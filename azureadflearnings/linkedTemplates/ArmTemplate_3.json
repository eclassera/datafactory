{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "azureadflearnings"
		},
		"trigger_DataCopy_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/b8501930-c7b6-4fa6-a05b-c62ac6d01b8c/resourceGroups/azuretraining/providers/Microsoft.Storage/storageAccounts/azuredatablobdev"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Onetime_Table_Creation_Notebook_DElookup')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is a common ADF pipeline that will be used to execute the onetime table creation notebooks.",
				"activities": [
					{
						"name": "Read_Env_File",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "Json",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Notebook",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.Notebookpath,'/',pipeline().parameters.Notebookname)",
								"type": "Expression"
							},
							"baseParameters": {
								"Env": {
									"value": "@activity('Read_Env_File').output.firstRow.azure_env",
									"type": "Expression"
								},
								"Storageaccountname": {
									"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_act)",
									"type": "Expression"
								},
								"lookupTable": {
									"value": "@pipeline().parameters.lookupTable",
									"type": "Expression"
								},
								"lookupTableDB": {
									"value": "@pipeline().parameters.lookupTableDB",
									"type": "Expression"
								},
								"filename": {
									"value": "@pipeline().parameters.filename",
									"type": "Expression"
								},
								"adls_storage_cntner": {
									"value": "@pipeline().parameters.adls_storage_cntner",
									"type": "Expression"
								},
								"l_storage_account_name": {
									"value": "@pipeline().parameters.l_storage_account_name",
									"type": "Expression"
								},
								"adb_par": {
									"value": "@string(activity('Read_Env_File').output.firstRow.adb_par)",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Email_Notify_Success",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Notebook",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('Onetime notebook execution is successful')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('Read_Env_File').output.firstRow.succ_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "NA",
									"type": "Expression"
								},
								"Status": "Success"
							}
						}
					},
					{
						"name": "Email_Notify_Failure",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Notebook",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "suresh.pathipati@aa.com",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "NA",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "Email_Notify_09",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('Could not find or unable to read job params json file. Please check the logs for more details.')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "DL_BA_Finance@aa.com",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "NA",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Notebookpath": {
						"type": "string",
						"defaultValue": "/rvact/dev/onetime/"
					},
					"Notebookname": {
						"type": "string",
						"defaultValue": "Create_lookup_table_IDEC"
					},
					"lookupTable": {
						"type": "string",
						"defaultValue": "idec_Lookup"
					},
					"lookupTableDB": {
						"type": "string",
						"defaultValue": "rvact_dev_struct"
					},
					"filename": {
						"type": "string",
						"defaultValue": "IDEC_CLEAN_metadata.json"
					},
					"adls_storage_cntner": {
						"type": "string",
						"defaultValue": "rvact"
					},
					"l_storage_account_name": {
						"type": "string",
						"defaultValue": "banzeausrvactdev"
					}
				},
				"folder": {
					"name": "DevOps"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-18T16:21:11Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Onetime_Table_and_View_Creation_Notebook')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is a common ADF pipeline that will be used to execute the onetime table  & view creation notebooks.",
				"activities": [
					{
						"name": "Read_Env_File",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "Json",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Notebook",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.Notebookpath,'/',pipeline().parameters.Notebookname)",
								"type": "Expression"
							},
							"baseParameters": {
								"env": {
									"value": "@activity('Read_Env_File').output.firstRow.azure_env",
									"type": "Expression"
								},
								"Storageaccountname": {
									"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_act)",
									"type": "Expression"
								},
								"Structtablename": {
									"value": "@pipeline().parameters.Structtablename",
									"type": "Expression"
								},
								"Rejecttablename": {
									"value": "@pipeline().parameters.Rejecttablename",
									"type": "Expression"
								},
								"Preptablename": {
									"value": "@pipeline().parameters.Preptablename",
									"type": "Expression"
								},
								"adls_storage_cntner": {
									"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_cntner)",
									"type": "Expression"
								},
								"adb_par": {
									"value": "@string(activity('Read_Env_File').output.firstRow.adb_par)",
									"type": "Expression"
								},
								"feed_name": {
									"value": "@pipeline().parameters.feed_name",
									"type": "Expression"
								},
								"filename": {
									"value": "@pipeline().parameters.file_name",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Email_Notify_Success",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Notebook",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('Onetime notebook execution is successful')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('Read_Env_File').output.firstRow.succ_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "NA",
									"type": "Expression"
								},
								"Status": "Success"
							}
						}
					},
					{
						"name": "Email_Notify_Failure",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Notebook",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "NA",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "Email_Notify_09",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('Could not find or unable to read job params json file. Please check the logs for more details.')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "DL_BA_Finance@aa.com",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "NA",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Notebookpath": {
						"type": "string",
						"defaultValue": "/rvact/dev/onetime"
					},
					"Notebookname": {
						"type": "string",
						"defaultValue": "AGDECURR_Onetime_Table_Creation"
					},
					"Structtablename": {
						"type": "string",
						"defaultValue": "NA"
					},
					"Rejecttablename": {
						"type": "string",
						"defaultValue": "NA"
					},
					"Preptablename": {
						"type": "string",
						"defaultValue": "NA"
					},
					"feed_name": {
						"type": "string",
						"defaultValue": "AGDECURR"
					},
					"file_name": {
						"type": "string",
						"defaultValue": "RAC_AGDECURR_20210317000000.dat.gz"
					}
				},
				"folder": {
					"name": "DevOps"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-18T16:21:11Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Onetime_View_Creation_Notebook')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is a common ADF pipeline that will be used to execute the onetime VIEW creation notebooks.\nparameter file_name should be genetic",
				"activities": [
					{
						"name": "Read_Env_File",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "Json",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Notebook",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.Notebookpath,'/',pipeline().parameters.Notebookname)",
								"type": "Expression"
							},
							"baseParameters": {
								"env": {
									"value": "@activity('Read_Env_File').output.firstRow.azure_env",
									"type": "Expression"
								},
								"adls_storage_cntner": {
									"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_cntner)",
									"type": "Expression"
								},
								"feed_name": {
									"value": "@pipeline().parameters.feed_name",
									"type": "Expression"
								},
								"filename": {
									"value": "@pipeline().parameters.file_name",
									"type": "Expression"
								},
								"adb_par": {
									"value": "@string(activity('Read_Env_File').output.firstRow.adb_par)",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Email_Notify_Success",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Notebook",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('Onetime notebook execution is successful')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('Read_Env_File').output.firstRow.succ_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "NA",
									"type": "Expression"
								},
								"Status": "Success"
							}
						}
					},
					{
						"name": "Email_Notify_Failure",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Notebook",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "NA",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "Email_Notify_09",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('Could not find or unable to read job params json file. Please check the logs for more details.')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "DL_BA_Finance@aa.com",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "NA",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Notebookpath": {
						"type": "string",
						"defaultValue": "/rvact/dev/onetime/"
					},
					"Notebookname": {
						"type": "string",
						"defaultValue": "CDC_Onetime_View_Creation"
					},
					"feed_name": {
						"type": "string",
						"defaultValue": "AGDECURR"
					},
					"file_name": {
						"type": "string",
						"defaultValue": "RAC_AGDECURR_20210317000000.dat.gz"
					}
				},
				"folder": {
					"name": "DevOps"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-18T16:21:11Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/aztraining_adf_copydata_df')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "this pipeline is used to copy data from raw zone to structured zone ",
				"activities": [
					{
						"name": "Raw to struct data copy",
						"description": "raw to struct data copy in adf",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Filter_condition",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": false,
							"dataIntegrationUnits": 8
						},
						"inputs": [
							{
								"referenceName": "Binary_blob_training_ds",
								"type": "DatasetReference",
								"parameters": {
									"FileName_ds": {
										"value": "@pipeline().globalParameters.FileName",
										"type": "Expression"
									},
									"Env": {
										"value": "@pipeline().globalParameters.Env",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Binary_adls_training_ds",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete raw zone data",
						"description": "this will delete the data from source blob after successfully processed files ",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Raw to struct data copy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Binary_blob_training_ds",
								"type": "DatasetReference",
								"parameters": {
									"FileName_ds": {
										"value": "@pipeline().globalParameters.FileName",
										"type": "Expression"
									},
									"Env": {
										"value": "@pipeline().globalParameters.Env",
										"type": "Expression"
									}
								}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "AzureBlobStorage_ls",
									"type": "LinkedServiceReference"
								},
								"path": "runlogs"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Get Metadata_blob",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Binary_Getmetatdata",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Filter_condition",
						"description": "this activity will filter the list of files ",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Metadata_blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata_blob').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@contains(activity('Get Metadata_blob').output.childItems[0].name,item().name)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute Pipeline_Email_Notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Get Metadata_blob",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Filter_condition",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Raw to struct data copy",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Delete raw zone data",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification_Pipelines",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"receiver": {
									"value": "eclasserasureshaz@outlook.com",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "LNDG_TYCO_CUST_CONVIT.txt",
									"type": "Expression"
								},
								"Status": {
									"value": "\"Fail\"",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Execute Pipeline_Email_Notification_copy1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete raw zone data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification_Pipelines",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"receiver": {
									"value": "eclasserasureshaz@outlook.com",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "LNDG_TYCO_CUST_CONVIT.txt",
									"type": "Expression"
								},
								"Status": {
									"value": "\" pipeline Run Success\"",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"TokenID": {
						"type": "String"
					},
					"Value": {
						"type": "String"
					},
					"Runtokenvalue": {
						"type": "String"
					},
					"TokenPath": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Azuretraining"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/aztraining_adf_fail_df')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Fail_jobparam",
						"type": "Fail",
						"dependsOn": [
							{
								"activity": "Lookup_jobparmfile",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"message": {
								"value": "{\n\n\"pipelineName\" : \"aztraining_adf_fail_df\"\n\"type\" : \"Failure Message\"\n\"ErrorCode\" : \"500\"\n}",
								"type": "Expression"
							},
							"errorCode": {
								"value": "500",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup_jobparmfile",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "Json_jobparam",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Metadata_jobparam",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Lookup_jobparmfile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Binary1_dsjobparam",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"itemName"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Append variable1_Example",
						"type": "AppendVariable",
						"dependsOn": [
							{
								"activity": "Get Metadata_jobparam",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Append_Test",
							"value": {
								"value": "@activity('Get Metadata_jobparam').output.itemName",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Append_Test": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Azuretraining"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_dataMigration_HistorymigrateFiles_01')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will call the notebooks necessary to perform the data migration and copy files from transient ",
				"activities": [
					{
						"name": "ac_lookupAdfParamFile",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "ds_adf_param",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "db_migrateFiles",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ac_lookupAdfParamFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat('/',activity('ac_lookupAdfParamFile').output.firstRow.adls_storage_cntner,'/',activity('ac_lookupAdfParamFile').output.firstRow.azure_env,'/migration/migrateFiles')",
								"type": "Expression"
							},
							"baseParameters": {
								"adb_par": {
									"value": "@string(activity('ac_lookupAdfParamFile').output.firstRow.adb_par)",
									"type": "Expression"
								},
								"env": {
									"value": "@string(activity('ac_lookupAdfParamFile').output.firstRow.azure_env)",
									"type": "Expression"
								},
								"adbDebugInd": "N",
								"Migration_sources": {
									"value": "@pipeline().parameters.Migration_sources",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ac_sendFailHistoryCopy_Email",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ac_lookupAdfParamFile",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error during the ac_lookupAdfParamFile activity. Please check the logs for more details. \nError: ', replace(activity('ac_lookupAdfParamFile').Error.Message, '\"', ''))\n",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "DL_BA_Finance@aa.com",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.filename",
									"type": "Expression"
								},
								"Status": "FAIL"
							}
						}
					},
					{
						"name": "ac_sendPassEmail",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "db_migrateFiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('This pipeline has completed successfully : ',activity('db_migrateFiles').output.runPageUrl)",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('ac_lookupAdfParamFile').output.firstRow.succ_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.filename",
									"type": "Expression"
								},
								"Status": "Success"
							}
						}
					},
					{
						"name": "ac_sendFailHistoryCopy_Fail_Email",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "db_migrateFiles",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error during the db_migrateFiles notebook. Please check the logs for more details. \nError: runPageUrl: ', activity('db_migrateFiles').output.runPageUrl)",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('ac_lookupAdfParamFile').output.firstRow.fail_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.filename",
									"type": "Expression"
								},
								"Status": "FAIL"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"filename": {
						"type": "string",
						"defaultValue": "n/a"
					},
					"adbDebugInd": {
						"type": "string",
						"defaultValue": "N"
					},
					"Migration_sources": {
						"type": "string",
						"defaultValue": "Codesharein_sources"
					}
				},
				"variables": {
					"throwError": {
						"type": "String",
						"defaultValue": "unknown"
					},
					"arrayPosition": {
						"type": "String",
						"defaultValue": "unknown"
					},
					"feedName": {
						"type": "String",
						"defaultValue": "unknown"
					},
					"sourceDataDt": {
						"type": "String",
						"defaultValue": "unknown"
					}
				},
				"folder": {
					"name": "History_Migration"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-18T16:21:12Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_dataMigration_copyMigrationFileToLanding')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ac_copyMigrationFileToLanding",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_FileMigration",
								"type": "DatasetReference",
								"parameters": {
									"sourceFileName": {
										"value": "@pipeline().parameters.filename",
										"type": "Expression"
									},
									"folderName": {
										"value": "@pipeline().parameters.feed_name",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_FileLanding",
								"type": "DatasetReference",
								"parameters": {
									"sourceFileName": {
										"value": "@pipeline().parameters.filename",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"filename": {
						"type": "string"
					},
					"feed_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "History_Migration"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-18T16:21:11Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_dataMigration_migration_landing_02')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will call the notebooks necessary to perform the data migration and copy files from migration to landing folder",
				"activities": [
					{
						"name": "ac_lookupAdfParamFile",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "ds_adf_param",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "db_copyMigrationFilesToLanding",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ac_lookupAdfParamFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat('/',activity('ac_lookupAdfParamFile').output.firstRow.adls_storage_cntner,'/',activity('ac_lookupAdfParamFile').output.firstRow.azure_env,'/migration/copyMigrationFilesToLanding')",
								"type": "Expression"
							},
							"baseParameters": {
								"adb_par": {
									"value": "@string(activity('ac_lookupAdfParamFile').output.firstRow.adb_par)",
									"type": "Expression"
								},
								"env": {
									"value": "@string(activity('ac_lookupAdfParamFile').output.firstRow.azure_env)",
									"type": "Expression"
								},
								"feed_name": {
									"value": "incr",
									"type": "Expression"
								},
								"adbDebugInd": "N",
								"Migration_sources": {
									"value": "@pipeline().parameters.Migration_sources",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ac_sendFailHistoryCopy_Email",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ac_lookupAdfParamFile",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error during the ac_lookupAdfParamFile activity. Please check the logs for more details. \nError: ', replace(activity('ac_lookupAdfParamFile').Error.Message, '\"', ''),\n' runPageUrl: ', activity('ac_lookupAdfParamFile').output.runPageUrl)",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "DL_BA_Finance@aa.com",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.filename",
									"type": "Expression"
								},
								"Status": "FAIL"
							}
						}
					},
					{
						"name": "ac_sendPassEmail",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "db_copyMigrationFilesToLanding",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('This pipeline has completed successfully.   db_copyMigrationFilesToLanding.runPageUrl: ', activity('db_copyMigrationFilesToLanding').output.runPageUrl)",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('ac_lookupAdfParamFile').output.firstRow.succ_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.feed_name",
									"type": "Expression"
								},
								"Status": "Success"
							}
						}
					},
					{
						"name": "ac_sendFailEmail_historyload",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "db_copyMigrationFilesToLanding",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error during the db_copyMigrationFilesToLanding notebook. Please check the logs for more details. \nError: ', replace(activity('db_copyMigrationFilesToLanding').Error.Message, '\"', ''),\n' runPageUrl: ', activity('db_copyMigrationFilesToLanding').output.runPageUrl)",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('ac_lookupAdfParamFile').output.firstRow.fail_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "db_copyMigrationFilesToLanding",
									"type": "Expression"
								},
								"Status": "FAIL"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"feed_name": {
						"type": "string",
						"defaultValue": "incr"
					},
					"adbDebugInd": {
						"type": "string",
						"defaultValue": "N"
					},
					"filename": {
						"type": "string",
						"defaultValue": "n/a"
					},
					"Migration_sources": {
						"type": "string",
						"defaultValue": "RESPIN_sources"
					}
				},
				"variables": {
					"throwError": {
						"type": "String",
						"defaultValue": "unknown"
					},
					"arrayPosition": {
						"type": "String",
						"defaultValue": "unknown"
					},
					"feedName": {
						"type": "String",
						"defaultValue": "unknown"
					},
					"sourceDataDt": {
						"type": "String",
						"defaultValue": "unknown"
					}
				},
				"folder": {
					"name": "History_Migration"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-18T16:21:12Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelin_Untilactivity_Test')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Until_Testpipeline",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "IDentity_set1",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Identity_Set2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(int(variables('ID1')),int(variables('ID2')))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Execute Pipelin_Until",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "aztraining_adf_copydata_df",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								},
								{
									"name": "Set variable_unil",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Execute Pipelin_Until",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "ID1",
										"value": {
											"value": "70",
											"type": "Expression"
										}
									}
								}
							],
							"timeout": "0.00:10:00"
						}
					},
					{
						"name": "Wait_Untilvar",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 60
						}
					},
					{
						"name": "IDentity_set1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Wait_Untilvar",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ID1",
							"value": {
								"value": "10",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Identity_Set2",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Wait_Untilvar",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ID2",
							"value": {
								"value": "60",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"ID1": {
						"type": "String"
					},
					"ID2": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Azuretraining"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/aztraining_adf_copydata_df')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_TYR_Data_Ingestion_Incremental')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will ingest YQYR data till Mosaic",
				"activities": [
					{
						"name": "Read_Env_File",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "Json",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "TYR_Load",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter_Individual_File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [
							{
								"name": "Filename",
								"value": "String"
							}
						],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter_Individual_File').output.Value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "File_Audit",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "Copy_From_Landing_To_Work",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": {
											"value": "@concat('/',activity('Read_Env_File').output.firstRow.adls_storage_cntner,'/',activity('Read_Env_File').output.firstRow.azure_env,'/audit/','File_Validations_new')",
											"type": "Expression"
										},
										"baseParameters": {
											"filename": {
												"value": "@{item().name}",
												"type": "Expression"
											},
											"sourcetm": {
												"value": "@{substring(item().name,add(indexof(item().name,'.'),-14),14)}",
												"type": "Expression"
											},
											"storageaccountname": {
												"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_act)",
												"type": "Expression"
											},
											"env": {
												"value": "@activity('Read_Env_File').output.firstRow.azure_env",
												"type": "Expression"
											},
											"adb_par": {
												"value": "@string(activity('Read_Env_File').output.firstRow.adb_par)",
												"type": "Expression"
											},
											"feed_name": {
												"value": "@pipeline().parameters.feed_name",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureDatabricks_ls",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "IsValidFile",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "File_Audit",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@startswith(activity('File_Audit').output.runOutput,'Valid')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Copy_data_to_Reject",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "AzureBlobStorageReadSettings",
															"recursive": false,
															"wildcardFileName": {
																"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'.*')}",
																"type": "Expression"
															}
														},
														"formatSettings": {
															"type": "BinaryReadSettings"
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														}
													},
													"enableStaging": false,
													"skipErrorFile": {
														"fileMissing": true
													},
													"validateDataConsistency": false
												},
												"inputs": [
													{
														"referenceName": "Blob",
														"type": "DatasetReference",
														"parameters": {}
													}
												],
												"outputs": [
													{
														"referenceName": "ADLS_Reject",
														"type": "DatasetReference",
														"parameters": {
															"env": {
																"value": "@activity('Read_Env_File').output.firstRow.azure_env",
																"type": "Expression"
															},
															"adls_storage_cntner": {
																"value": "@activity('Read_Env_File').output.firstRow.adls_storage_cntner",
																"type": "Expression"
															},
															"input_file_prefix": {
																"value": "@substring(pipeline().parameters.filename,0,lastindexof(pipeline().parameters.filename,'_'))",
																"type": "Expression"
															},
															"sourceDataDt": {
																"value": "@substring(pipeline().parameters.filename,add(lastindexof(pipeline().parameters.filename,'_'),1),8)",
																"type": "Expression"
															},
															"Filename": {
																"value": "@pipeline().parameters.Filename",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "Delete_Reject_Files_From_Landing",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "Copy_data_to_Reject",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "Blob",
														"type": "DatasetReference",
														"parameters": {}
													},
													"logStorageSettings": {
														"linkedServiceName": {
															"referenceName": "AzureBlobStorage_ls",
															"type": "LinkedServiceReference"
														},
														"path": "log"
													},
													"enableLogging": true,
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": false,
														"wildcardFileName": {
															"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'*')}",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "Email_Notify_02",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "Copy_data_to_Reject",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "EmailNotification",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"DataFactoryName": {
															"value": "@pipeline().DataFactory",
															"type": "Expression"
														},
														"PipelineName": {
															"value": "@pipeline().Pipeline",
															"type": "Expression"
														},
														"Message": {
															"value": "@if (startswith(activity('File_Audit').output.runOutput,'Mismatch'),concat('File Count does not match with trailer record count.',activity('File_Audit').output.runOutput,'. Input files are moved to the Reject folder and load process is skipped. Please check the logs for more details.'),if(startswith(activity('File_Audit').output.runOutput,'Already'),'File already exists in the RAW zone. Input files are moved to the Reject folder and load process is skipped. Please check the logs for more details.','File name contains invalid date timestamp. Input files are moved to the Reject folder and load process is skipped. Please check the logs for more details.'))",
															"type": "Expression"
														},
														"EmailTo": {
															"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
															"type": "Expression"
														},
														"SourceFile": {
															"value": "@{item().name}",
															"type": "Expression"
														},
														"Status": {
															"value": "@if (startswith(activity('File_Audit').output.runOutput,'Mismatch'),'File Count mismatches with Trailer Count',if(startswith(activity('File_Audit').output.runOutput,'Already'),'Duplicate file','File name contains Invalid date timestamp'))",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "DeleteFromBlobWork_02",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "Delete_Reject_Files_From_Landing",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "Blob_work",
														"type": "DatasetReference",
														"parameters": {}
													},
													"logStorageSettings": {
														"linkedServiceName": {
															"referenceName": "AzureBlobStorage_ls",
															"type": "LinkedServiceReference"
														},
														"path": "log"
													},
													"enableLogging": true,
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": false,
														"wildcardFileName": {
															"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'.dat')}",
															"type": "Expression"
														}
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "WorkToStruct",
												"type": "DatabricksNotebook",
												"dependsOn": [
													{
														"activity": "Copy_From_Raw_To_Work",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"notebookPath": {
														"value": "@concat('/',activity('Read_Env_File').output.firstRow.adls_storage_cntner,'/',activity('Read_Env_File').output.firstRow.azure_env,'/struct/',pipeline().parameters.feed_name,'_Struct')",
														"type": "Expression"
													},
													"baseParameters": {
														"filename": {
															"value": "@{item().name}",
															"type": "Expression"
														},
														"env": {
															"value": "@activity('Read_Env_File').output.firstRow.azure_env",
															"type": "Expression"
														},
														"adb_par": {
															"value": "@string(activity('Read_Env_File').output.firstRow.adb_par)",
															"type": "Expression"
														},
														"feed_name": {
															"value": "@trim(pipeline().parameters.feed_name)",
															"type": "Expression"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureDatabricks_ls",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "Copy_From_Inbound_Raw",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.01:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "AzureBlobStorageReadSettings",
															"maxConcurrentConnections": 1,
															"recursive": false,
															"wildcardFileName": {
																"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'.*')}",
																"type": "Expression"
															}
														},
														"formatSettings": {
															"type": "BinaryReadSettings"
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														}
													},
													"enableStaging": false,
													"validateDataConsistency": false
												},
												"inputs": [
													{
														"referenceName": "Blob",
														"type": "DatasetReference",
														"parameters": {}
													}
												],
												"outputs": [
													{
														"referenceName": "ADLS_raw",
														"type": "DatasetReference",
														"parameters": {
															"env": {
																"value": "@activity('Read_Env_File').output.firstRow.azure_env",
																"type": "Expression"
															},
															"adls_storage_cntner": {
																"value": "@activity('Read_Env_File').output.firstRow.adls_storage_cntner",
																"type": "Expression"
															},
															"input_file_prefix": {
																"value": "@substring(pipeline().parameters.filename,0,lastindexof(pipeline().parameters.filename,'_'))",
																"type": "Expression"
															},
															"Filename": {
																"value": "@pipeline().parameters.Filename",
																"type": "Expression"
															},
															"sourceDataDt": {
																"value": "@substring(pipeline().parameters.filename,add(lastindexof(pipeline().parameters.filename,'_'),1),8)",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "Copy_From_Raw_To_Work",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "Copy_From_Inbound_Raw",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.01:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "AzureBlobFSReadSettings",
															"maxConcurrentConnections": 1,
															"recursive": false,
															"wildcardFolderPath": {
																"value": "@concat(activity('Read_Env_File').output.firstRow.azure_env,'/raw','/',substring(pipeline().parameters.filename,0,lastindexof(pipeline().parameters.filename,'_')),'/',substring(pipeline().parameters.filename,add(lastindexof(pipeline().parameters.filename,'_'),1),8))",
																"type": "Expression"
															},
															"wildcardFileName": {
																"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'.dat.gz')}",
																"type": "Expression"
															},
															"deleteFilesAfterCompletion": false
														},
														"formatSettings": {
															"type": "BinaryReadSettings"
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "ADLS_gzip",
														"type": "DatasetReference",
														"parameters": {
															"adls_storage_cntner": {
																"value": "@activity('Read_Env_File').output.firstRow.adls_storage_cntner",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "ADLS_work",
														"type": "DatasetReference",
														"parameters": {
															"env": {
																"value": "@activity('Read_Env_File').output.firstRow.azure_env",
																"type": "Expression"
															},
															"adls_storage_cntner": {
																"value": "@activity('Read_Env_File').output.firstRow.adls_storage_cntner",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "DeleteFromWork",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "Load_Batch_Audit",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "ADLS_work",
														"type": "DatasetReference",
														"parameters": {
															"env": {
																"value": "@activity('Read_Env_File').output.firstRow.azure_env",
																"type": "Expression"
															},
															"adls_storage_cntner": {
																"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_cntner)",
																"type": "Expression"
															}
														}
													},
													"logStorageSettings": {
														"linkedServiceName": {
															"referenceName": "AzureBlobStorage_ls",
															"type": "LinkedServiceReference"
														},
														"path": {
															"value": "log",
															"type": "Expression"
														}
													},
													"enableLogging": true,
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": false,
														"wildcardFileName": {
															"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'*')}",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "DeleteFromLanding",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "DeleteFromWork",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "Blob",
														"type": "DatasetReference",
														"parameters": {}
													},
													"logStorageSettings": {
														"linkedServiceName": {
															"referenceName": "AzureBlobStorage_ls",
															"type": "LinkedServiceReference"
														},
														"path": "log"
													},
													"enableLogging": true,
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": false,
														"wildcardFileName": {
															"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'*')}",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "StructToPrep",
												"type": "DatabricksNotebook",
												"dependsOn": [
													{
														"activity": "WorkToStruct",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"notebookPath": {
														"value": "@concat('/',activity('Read_Env_File').output.firstRow.adls_storage_cntner,'/',activity('Read_Env_File').output.firstRow.azure_env,'/prep/',pipeline().parameters.feed_name,'_Prep')",
														"type": "Expression"
													},
													"baseParameters": {
														"filename": {
															"value": "@{item().name}",
															"type": "Expression"
														},
														"env": {
															"value": "@activity('Read_Env_File').output.firstRow.azure_env",
															"type": "Expression"
														},
														"adb_par": {
															"value": "@string(activity('Read_Env_File').output.firstRow.adb_par)",
															"type": "Expression"
														},
														"feed_name": {
															"value": "@trim(pipeline().parameters.feed_name)",
															"type": "Expression"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureDatabricks_ls",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "Email_Notify_Success",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "DeleteFromBlobWork_03",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "EmailNotification",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"DataFactoryName": {
															"value": "@pipeline().DataFactory",
															"type": "Expression"
														},
														"PipelineName": {
															"value": "@pipeline().Pipeline",
															"type": "Expression"
														},
														"Message": {
															"value": "@{concat('Data ingestion is successfully completed for the above file.  ', replace(activity('File_Audit').output.runOutput, 'Valid-',''))}\n",
															"type": "Expression"
														},
														"EmailTo": {
															"value": "@activity('Read_Env_File').output.firstRow.succ_email_to",
															"type": "Expression"
														},
														"SourceFile": {
															"value": "@{item().name}",
															"type": "Expression"
														},
														"Status": "Success"
													}
												}
											},
											{
												"name": "Email_Notify_Cleanup_03",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "ADLS_Data_Cleanup_03",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "EmailNotification",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"DataFactoryName": {
															"value": "@pipeline().DataFactory",
															"type": "Expression"
														},
														"PipelineName": {
															"value": "@pipeline().Pipeline",
															"type": "Expression"
														},
														"Message": {
															"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
															"type": "Expression"
														},
														"EmailTo": {
															"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
															"type": "Expression"
														},
														"SourceFile": {
															"value": "@{item().name}",
															"type": "Expression"
														},
														"Status": "Fail"
													}
												}
											},
											{
												"name": "DeleteFromRaw_01",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "Copy_From_Inbound_Raw",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "ADLS_raw",
														"type": "DatasetReference",
														"parameters": {
															"env": {
																"value": "@activity('Read_Env_File').output.firstRow.azure_env",
																"type": "Expression"
															},
															"adls_storage_cntner": {
																"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_cntner)",
																"type": "Expression"
															},
															"input_file_prefix": {
																"value": "@variables('input_file_prefix')",
																"type": "Expression"
															},
															"Filename": {
																"value": "@pipeline().parameters.Filename",
																"type": "Expression"
															},
															"sourceDataDt": {
																"value": "@variables('sourceDataDt')",
																"type": "Expression"
															}
														}
													},
													"logStorageSettings": {
														"linkedServiceName": {
															"referenceName": "AzureBlobStorage_ls",
															"type": "LinkedServiceReference"
														},
														"path": {
															"value": "log",
															"type": "Expression"
														}
													},
													"enableLogging": true,
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": false,
														"wildcardFileName": {
															"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'*')}",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "Email_Notify_Cleanup_Raw_01",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "DeleteFromRaw_01",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "EmailNotification",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"DataFactoryName": {
															"value": "@pipeline().DataFactory",
															"type": "Expression"
														},
														"PipelineName": {
															"value": "@pipeline().Pipeline",
															"type": "Expression"
														},
														"Message": {
															"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
															"type": "Expression"
														},
														"EmailTo": {
															"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
															"type": "Expression"
														},
														"SourceFile": {
															"value": "@{item().name}",
															"type": "Expression"
														},
														"Status": "Fail"
													}
												}
											},
											{
												"name": "Email_Notify_Cleanup_01",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "ADLS_Data_Cleanup_01",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "EmailNotification",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"DataFactoryName": {
															"value": "@pipeline().DataFactory",
															"type": "Expression"
														},
														"PipelineName": {
															"value": "@pipeline().Pipeline",
															"type": "Expression"
														},
														"Message": {
															"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
															"type": "Expression"
														},
														"EmailTo": {
															"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
															"type": "Expression"
														},
														"SourceFile": {
															"value": "@{item().name}",
															"type": "Expression"
														},
														"Status": "Fail"
													}
												}
											},
											{
												"name": "Email_Notify_Cleanup_02",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "ADLS_Data_Cleanup_02",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "EmailNotification",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {}
												}
											},
											{
												"name": "Email_Notify_Failure_Raw_01",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "DeleteFromRaw_01",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "EmailNotification",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"DataFactoryName": {
															"value": "@pipeline().DataFactory",
															"type": "Expression"
														},
														"PipelineName": {
															"value": "@pipeline().Pipeline",
															"type": "Expression"
														},
														"Message": {
															"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
															"type": "Expression"
														},
														"EmailTo": {
															"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
															"type": "Expression"
														},
														"SourceFile": {
															"value": "@{item().name}",
															"type": "Expression"
														},
														"Status": "Fail"
													}
												}
											},
											{
												"name": "Email_Notify_Failure_Landing",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "DeleteFromLanding",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "EmailNotification",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"DataFactoryName": {
															"value": "@pipeline().DataFactory",
															"type": "Expression"
														},
														"PipelineName": {
															"value": "@pipeline().Pipeline",
															"type": "Expression"
														},
														"Message": {
															"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
															"type": "Expression"
														},
														"EmailTo": {
															"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
															"type": "Expression"
														},
														"SourceFile": {
															"value": "@{item().name}",
															"type": "Expression"
														},
														"Status": "Fail"
													}
												}
											},
											{
												"name": "Email_Notify_Failure_Work",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "DeleteFromWork",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "EmailNotification",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"DataFactoryName": {
															"value": "@pipeline().DataFactory",
															"type": "Expression"
														},
														"PipelineName": {
															"value": "@pipeline().Pipeline",
															"type": "Expression"
														},
														"Message": {
															"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
															"type": "Expression"
														},
														"EmailTo": {
															"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
															"type": "Expression"
														},
														"SourceFile": {
															"value": "@{item().name}",
															"type": "Expression"
														},
														"Status": "Fail"
													}
												}
											},
											{
												"name": "StructToMosaic",
												"type": "DatabricksNotebook",
												"dependsOn": [
													{
														"activity": "StructToPrep",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"notebookPath": {
														"value": "@concat('/',activity('Read_Env_File').output.firstRow.adls_storage_cntner,'/',activity('Read_Env_File').output.firstRow.azure_env,'/mosaic/YQYR_Mosaic_Export')",
														"type": "Expression"
													},
													"baseParameters": {
														"filename": {
															"value": "@{item().name}",
															"type": "Expression"
														},
														"env": {
															"value": "@activity('Read_Env_File').output.firstRow.azure_env",
															"type": "Expression"
														},
														"adb_par": {
															"value": "@string(activity('Read_Env_File').output.firstRow.adb_par)",
															"type": "Expression"
														},
														"feed_name": {
															"value": "@trim(pipeline().parameters.feed_name)",
															"type": "Expression"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureDatabricks_ls",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "Email_Notify_Cleanup_04",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "ADLS_Data_Cleanup_04",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "EmailNotification",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"DataFactoryName": {
															"value": "@pipeline().DataFactory",
															"type": "Expression"
														},
														"PipelineName": {
															"value": "@pipeline().Pipeline",
															"type": "Expression"
														},
														"Message": {
															"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
															"type": "Expression"
														},
														"EmailTo": {
															"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
															"type": "Expression"
														},
														"SourceFile": {
															"value": "@{item().name}",
															"type": "Expression"
														},
														"Status": "Fail"
													}
												}
											},
											{
												"name": "ADLS_Data_Cleanup_01",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "Copy_From_Raw_To_Work",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "ADLS Data Cleanup",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"env": {
															"value": "@activity('Read_Env_File').output.firstRow.azure_env",
															"type": "Expression"
														},
														"adls_storage_cntner": {
															"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_cntner)",
															"type": "Expression"
														},
														"wildcard_file_path_work": {
															"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'.dat')}",
															"type": "Expression"
														},
														"wildcard_file_path_raw": {
															"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'*')}",
															"type": "Expression"
														},
														"EmailTo": {
															"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
															"type": "Expression"
														},
														"SourceFile": {
															"value": "@{item().name}",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "ADLS_Data_Cleanup_02",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "WorkToStruct",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "ADLS Data Cleanup",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"env": {
															"value": "@activity('Read_Env_File').output.firstRow.azure_env",
															"type": "Expression"
														},
														"adls_storage_cntner": {
															"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_cntner)",
															"type": "Expression"
														},
														"wildcard_file_path_work": {
															"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'.dat')}",
															"type": "Expression"
														},
														"wildcard_file_path_raw": {
															"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'*')}",
															"type": "Expression"
														},
														"EmailTo": {
															"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
															"type": "Expression"
														},
														"SourceFile": {
															"value": "@{item().name}",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "ADLS_Data_Cleanup_03",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "StructToPrep",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "ADLS Data Cleanup",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"env": {
															"value": "@activity('Read_Env_File').output.firstRow.azure_env",
															"type": "Expression"
														},
														"adls_storage_cntner": {
															"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_cntner)",
															"type": "Expression"
														},
														"wildcard_file_path_work": {
															"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'.dat')}",
															"type": "Expression"
														},
														"wildcard_file_path_raw": {
															"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'*')}",
															"type": "Expression"
														},
														"EmailTo": {
															"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
															"type": "Expression"
														},
														"SourceFile": {
															"value": "@{item().name}",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "ADLS_Data_Cleanup_04",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "StructToMosaic",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "ADLS Data Cleanup",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"env": {
															"value": "@activity('Read_Env_File').output.firstRow.azure_env",
															"type": "Expression"
														},
														"adls_storage_cntner": {
															"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_cntner)",
															"type": "Expression"
														},
														"wildcard_file_path_work": {
															"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'.dat')}",
															"type": "Expression"
														},
														"wildcard_file_path_raw": {
															"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'*')}",
															"type": "Expression"
														},
														"EmailTo": {
															"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
															"type": "Expression"
														},
														"SourceFile": {
															"value": "@{item().name}",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "DeleteFromBlobWork_03",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "DeleteFromLanding",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "Blob_work",
														"type": "DatasetReference",
														"parameters": {}
													},
													"logStorageSettings": {
														"linkedServiceName": {
															"referenceName": "AzureBlobStorage_ls",
															"type": "LinkedServiceReference"
														},
														"path": "log"
													},
													"enableLogging": true,
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": false,
														"wildcardFileName": {
															"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'.dat')}",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "Email_Notify_Failure_BlobWork_03",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "DeleteFromBlobWork_03",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "EmailNotification",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"DataFactoryName": {
															"value": "@pipeline().DataFactory",
															"type": "Expression"
														},
														"PipelineName": {
															"value": "@pipeline().Pipeline",
															"type": "Expression"
														},
														"Message": {
															"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
															"type": "Expression"
														},
														"EmailTo": {
															"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
															"type": "Expression"
														},
														"SourceFile": {
															"value": "@{item().name}",
															"type": "Expression"
														},
														"Status": "Fail"
													}
												}
											},
											{
												"name": "Load_Batch_Audit",
												"type": "DatabricksNotebook",
												"dependsOn": [
													{
														"activity": "StructToMosaic",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"notebookPath": {
														"value": "@concat('/',activity('Read_Env_File').output.firstRow.adls_storage_cntner,'/',activity('Read_Env_File').output.firstRow.azure_env,'/audit/Load_Batch_Audit')",
														"type": "Expression"
													},
													"baseParameters": {
														"filename": {
															"value": "@{item().name}",
															"type": "Expression"
														},
														"env": {
															"value": "@activity('Read_Env_File').output.firstRow.azure_env",
															"type": "Expression"
														},
														"adb_par": {
															"value": "@string(activity('Read_Env_File').output.firstRow.adb_par)",
															"type": "Expression"
														},
														"feed_name": {
															"value": "@trim(pipeline().parameters.feed_name)",
															"type": "Expression"
														},
														"batchid": {
															"value": "@pipeline().RunId",
															"type": "Expression"
														},
														"batch_frequency": "\"Bi-Monthly\"",
														"batch_status": "\"Success\"",
														"pipeline_name": {
															"value": "@pipeline().Pipeline",
															"type": "Expression"
														},
														"trigger_time": {
															"value": "@pipeline().TriggerTime",
															"type": "Expression"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureDatabricks_ls",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "Email_Notify_Failure_Audit",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "Load_Batch_Audit",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "EmailNotification",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"DataFactoryName": {
															"value": "@pipeline().DataFactory",
															"type": "Expression"
														},
														"PipelineName": {
															"value": "@pipeline().Pipeline",
															"type": "Expression"
														},
														"Message": {
															"value": "@concat('The pipeline has encountered an error in sending ADB logs to EventHub. Please check the notebook logs for more details. Note: Adhoc cleanup is required before restarting the failed pipeline. ',activity('Load_Batch_Audit').output.runPageUrl)",
															"type": "Expression"
														},
														"EmailTo": {
															"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
															"type": "Expression"
														},
														"SourceFile": {
															"value": "@{item().name}",
															"type": "Expression"
														},
														"Status": "Fail"
													}
												}
											}
										]
									}
								},
								{
									"name": "Email_Notify_01",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "DeleteFromBlobWork_audit_fail",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "EmailNotification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"DataFactoryName": {
												"value": "@pipeline().DataFactory",
												"type": "Expression"
											},
											"PipelineName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"Message": {
												"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. \nOutput: ' ,activity('File_Audit').output.runPageUrl)",
												"type": "Expression"
											},
											"EmailTo": {
												"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
												"type": "Expression"
											},
											"SourceFile": {
												"value": "@{item().name}",
												"type": "Expression"
											},
											"Status": "Fail"
										}
									}
								},
								{
									"name": "Copy_From_Landing_To_Work",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.01:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": false,
												"wildcardFileName": {
													"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'.dat.gz')}",
													"type": "Expression"
												},
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "Blob_gzip",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "Blob_work",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Email_Notify_Cleanup_Blob_Work",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Copy_From_Landing_To_Work",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "EmailNotification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"DataFactoryName": {
												"value": "@pipeline().DataFactory",
												"type": "Expression"
											},
											"PipelineName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"Message": {
												"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
												"type": "Expression"
											},
											"EmailTo": {
												"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
												"type": "Expression"
											},
											"SourceFile": {
												"value": "@{item().name}",
												"type": "Expression"
											},
											"Status": "Fail"
										}
									}
								},
								{
									"name": "DeleteFromBlobWork_audit_fail",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "File_Audit",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "Blob_work",
											"type": "DatasetReference",
											"parameters": {}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "AzureBlobStorage_ls",
												"type": "LinkedServiceReference"
											},
											"path": "log"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": false,
											"wildcardFileName": {
												"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'.dat')}",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Email_Notify_09",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('Could not find or unable to read job params json file. Please check the logs for more details.')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "DL_BA_Finance@aa.com",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@concat(pipeline().parameters.input_file_prefix,'.*')",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "List_Input_Files_From_Landing",
						"description": "This activity is used to get list files  from landing directory",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Blob",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Filter_Individual_File",
						"description": "This activity is used to Filter individual files  from file list to process single file for each trigger",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "List_Input_Files_From_Landing",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('List_Input_Files_From_Landing').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().name,trim(pipeline().parameters.Filename))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"feed_name": {
						"type": "string",
						"defaultValue": "YQYR"
					},
					"Filename": {
						"type": "string"
					},
					"input_file_prefix": {
						"type": "string"
					}
				},
				"variables": {
					"input_file_prefix": {
						"type": "String"
					},
					"sourceDataDt": {
						"type": "String"
					}
				},
				"folder": {
					"name": "TYR"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-18T16:21:12Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger_DataCopy')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "CopyPipeline_onetimecopy",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/rawblob/blobs/LNDG_",
					"blobPathEndsWith": ".txt",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('trigger_DataCopy_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		}
	]
}