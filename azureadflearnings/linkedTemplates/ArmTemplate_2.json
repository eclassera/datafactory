{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "azureadflearnings"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ADLS_work_spii')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage_ls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"env": {
						"type": "string"
					},
					"adls_storage_cntner_spii": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat(dataset().env,'/work-spii')",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().adls_storage_cntner_spii",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Binary_ADLS_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "structzone"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Binary_Forch_Adls')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "structzone"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Binary_adls_training_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "structzone"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Binary_copy_foreach')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "rawzone"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADLS Data Cleanup')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DeleteFromBlobWork",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Is_Raw_Non-PII",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Blob_work",
								"type": "DatasetReference",
								"parameters": {}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "AzureBlobStorage_ls",
									"type": "LinkedServiceReference"
								},
								"path": "log"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": false,
								"wildcardFileName": {
									"value": "@{pipeline().parameters.wildcard_file_path_work}",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Email_Notify_Failure_BlobWork",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DeleteFromBlobWork",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@pipeline().parameters.EmailTo",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.SourceFile",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "Input_File_Prefix",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Is_Work_Non-PII",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "input_file_prefix",
							"value": {
								"value": "@substring(pipeline().parameters.SourceFile,0,lastindexof(pipeline().parameters.SourceFile,'_'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "File_Name",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Input_File_Prefix",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Filename",
							"value": {
								"value": "@pipeline().parameters.SourceFile",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Source_Data_Dt",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "File_Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "sourceDataDt",
							"value": {
								"value": "@substring(pipeline().parameters.SourceFile,add(lastindexof(pipeline().parameters.SourceFile,'_'),1),8)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Is_Work_SPII",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(pipeline().parameters.adls_storage_cntner,'rvact-spii'), 'true', 'false')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "DeleteFromWork_spii",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ADLS_work_spii",
											"type": "DatasetReference",
											"parameters": {
												"env": {
													"value": "@pipeline().parameters.env",
													"type": "Expression"
												},
												"adls_storage_cntner_spii": {
													"value": "@pipeline().parameters.adls_storage_cntner",
													"type": "Expression"
												}
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "AzureBlobStorage_ls",
												"type": "LinkedServiceReference"
											},
											"path": "log"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": false,
											"wildcardFileName": {
												"value": "@{pipeline().parameters.wildcard_file_path_work}",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Email_Notify_Failure_Work_spii",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "DeleteFromWork_spii",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "EmailNotification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"DataFactoryName": {
												"value": "@pipeline().DataFactory",
												"type": "Expression"
											},
											"PipelineName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"Message": {
												"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
												"type": "Expression"
											},
											"EmailTo": {
												"value": "@pipeline().parameters.EmailTo",
												"type": "Expression"
											},
											"SourceFile": {
												"value": "@pipeline().parameters.SourceFile",
												"type": "Expression"
											},
											"Status": "Fail"
										}
									}
								}
							]
						}
					},
					{
						"name": "Is_Work_PII",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Is_Work_SPII",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(pipeline().parameters.adls_storage_cntner,'rvact-pii'), 'true', 'false')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "DeleteFromWork_pii",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ADLS_work_pii",
											"type": "DatasetReference",
											"parameters": {
												"env": {
													"value": "@pipeline().parameters.env",
													"type": "Expression"
												},
												"adls_storage_cntner_pii": {
													"value": "@pipeline().parameters.adls_storage_cntner",
													"type": "Expression"
												}
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "AzureBlobStorage_ls",
												"type": "LinkedServiceReference"
											},
											"path": "log"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": false,
											"wildcardFileName": {
												"value": "@{pipeline().parameters.wildcard_file_path_work}",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Email_Notify_Failure_Work_pii",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "DeleteFromWork_pii",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "EmailNotification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"DataFactoryName": {
												"value": "@pipeline().DataFactory",
												"type": "Expression"
											},
											"PipelineName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"Message": {
												"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
												"type": "Expression"
											},
											"EmailTo": {
												"value": "@pipeline().parameters.EmailTo",
												"type": "Expression"
											},
											"SourceFile": {
												"value": "@pipeline().parameters.SourceFile",
												"type": "Expression"
											},
											"Status": "Fail"
										}
									}
								}
							]
						}
					},
					{
						"name": "Is_Work_Non-PII",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Is_Work_PII",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(pipeline().parameters.adls_storage_cntner,'rvact'), 'true', 'false')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "DeleteFromWork",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ADLS_work",
											"type": "DatasetReference",
											"parameters": {
												"env": {
													"value": "@pipeline().parameters.env",
													"type": "Expression"
												},
												"adls_storage_cntner": {
													"value": "@pipeline().parameters.adls_storage_cntner",
													"type": "Expression"
												}
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "AzureBlobStorage_ls",
												"type": "LinkedServiceReference"
											},
											"path": "log"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": false,
											"wildcardFileName": {
												"value": "@{pipeline().parameters.wildcard_file_path_work}",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Email_Notify_Failure_Work",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "DeleteFromWork",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "EmailNotification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"DataFactoryName": {
												"value": "@pipeline().DataFactory",
												"type": "Expression"
											},
											"PipelineName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"Message": {
												"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
												"type": "Expression"
											},
											"EmailTo": {
												"value": "@pipeline().parameters.EmailTo",
												"type": "Expression"
											},
											"SourceFile": {
												"value": "@pipeline().parameters.SourceFile",
												"type": "Expression"
											},
											"Status": "Fail"
										}
									}
								}
							]
						}
					},
					{
						"name": "Is_Raw_SPII",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Source_Data_Dt",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(pipeline().parameters.adls_storage_cntner,'rvact-spii'), 'true', 'false')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "DeleteFromRaw_spii",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ADLS_raw_spii",
											"type": "DatasetReference",
											"parameters": {
												"env": {
													"value": "@pipeline().parameters.env",
													"type": "Expression"
												},
												"adls_storage_cntner_spii": {
													"value": "@pipeline().parameters.adls_storage_cntner",
													"type": "Expression"
												},
												"input_file_prefix": {
													"value": "@variables('input_file_prefix')",
													"type": "Expression"
												},
												"Filename": {
													"value": "@variables('Filename')",
													"type": "Expression"
												},
												"sourceDataDt": {
													"value": "@variables('sourceDataDt')",
													"type": "Expression"
												}
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "AzureBlobStorage_ls",
												"type": "LinkedServiceReference"
											},
											"path": "log"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": false,
											"wildcardFileName": {
												"value": "@{pipeline().parameters.SourceFile}",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Email_Notify_Failure_Raw_spii",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "DeleteFromRaw_spii",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "EmailNotification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"DataFactoryName": {
												"value": "@pipeline().DataFactory",
												"type": "Expression"
											},
											"PipelineName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"Message": {
												"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
												"type": "Expression"
											},
											"EmailTo": {
												"value": "@pipeline().parameters.EmailTo",
												"type": "Expression"
											},
											"SourceFile": {
												"value": "@pipeline().parameters.SourceFile",
												"type": "Expression"
											},
											"Status": "Fail"
										}
									}
								}
							]
						}
					},
					{
						"name": "Is_Raw_PII",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Is_Raw_SPII",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(pipeline().parameters.adls_storage_cntner,'rvact-pii'), 'true', 'false')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "DeleteFromRaw_pii",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ADLS_raw_pii",
											"type": "DatasetReference",
											"parameters": {
												"env": {
													"value": "@pipeline().parameters.env",
													"type": "Expression"
												},
												"adls_storage_cntner_pii": {
													"value": "@pipeline().parameters.adls_storage_cntner",
													"type": "Expression"
												},
												"input_file_prefix": {
													"value": "@variables('input_file_prefix')",
													"type": "Expression"
												},
												"Filename": {
													"value": "@variables('Filename')",
													"type": "Expression"
												},
												"sourceDataDt": {
													"value": "@variables('sourceDataDt')",
													"type": "Expression"
												}
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "AzureBlobStorage_ls",
												"type": "LinkedServiceReference"
											},
											"path": "log"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": false,
											"wildcardFileName": {
												"value": "@{pipeline().parameters.SourceFile}",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Email_Notify_Failure_Raw_pii",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "DeleteFromRaw_pii",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "EmailNotification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"DataFactoryName": {
												"value": "@pipeline().DataFactory",
												"type": "Expression"
											},
											"PipelineName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"Message": {
												"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
												"type": "Expression"
											},
											"EmailTo": {
												"value": "@pipeline().parameters.EmailTo",
												"type": "Expression"
											},
											"SourceFile": {
												"value": "@pipeline().parameters.SourceFile",
												"type": "Expression"
											},
											"Status": "Fail"
										}
									}
								}
							]
						}
					},
					{
						"name": "Is_Raw_Non-PII",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Is_Raw_PII",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(pipeline().parameters.adls_storage_cntner,'rvact'), 'true', 'false')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "DeleteFromRaw",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ADLS_raw",
											"type": "DatasetReference",
											"parameters": {
												"env": {
													"value": "@pipeline().parameters.env",
													"type": "Expression"
												},
												"adls_storage_cntner": {
													"value": "@pipeline().parameters.adls_storage_cntner",
													"type": "Expression"
												},
												"input_file_prefix": {
													"value": "@variables('input_file_prefix')",
													"type": "Expression"
												},
												"Filename": {
													"value": "@variables('Filename')",
													"type": "Expression"
												},
												"sourceDataDt": {
													"value": "@variables('sourceDataDt')",
													"type": "Expression"
												}
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "AzureBlobStorage_ls",
												"type": "LinkedServiceReference"
											},
											"path": "log"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": false,
											"wildcardFileName": {
												"value": "@{pipeline().parameters.SourceFile}",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Email_Notify_Failure_Raw",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "DeleteFromRaw",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "EmailNotification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"DataFactoryName": {
												"value": "@pipeline().DataFactory",
												"type": "Expression"
											},
											"PipelineName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"Message": {
												"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
												"type": "Expression"
											},
											"EmailTo": {
												"value": "@pipeline().parameters.EmailTo",
												"type": "Expression"
											},
											"SourceFile": {
												"value": "@pipeline().parameters.SourceFile",
												"type": "Expression"
											},
											"Status": "Fail"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"env": {
						"type": "string"
					},
					"adls_storage_cntner": {
						"type": "string"
					},
					"wildcard_file_path_work": {
						"type": "string"
					},
					"wildcard_file_path_raw": {
						"type": "string"
					},
					"EmailTo": {
						"type": "string"
					},
					"SourceFile": {
						"type": "string"
					}
				},
				"variables": {
					"input_file_prefix": {
						"type": "String"
					},
					"Filename": {
						"type": "String"
					},
					"sourceDataDt": {
						"type": "String"
					}
				},
				"folder": {
					"name": "DevOps"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-18T16:21:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ADLS_work_spii')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADLS Data Cleanup_Pii')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DeleteFromWork",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ADLS_work_pii",
								"type": "DatasetReference",
								"parameters": {
									"env": {
										"value": "@pipeline().parameters.env",
										"type": "Expression"
									},
									"adls_storage_cntner_pii": {
										"value": "@pipeline().parameters.adls_storage_cntner",
										"type": "Expression"
									}
								}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "AzureBlobStorage_ls",
									"type": "LinkedServiceReference"
								},
								"path": "log"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false,
								"wildcardFileName": {
									"value": "@{pipeline().parameters.wildcard_file_path_work}",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "DeleteFromRaw",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Source_Data_Dt",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ADLS_raw_pii",
								"type": "DatasetReference",
								"parameters": {
									"env": {
										"value": "@pipeline().parameters.env",
										"type": "Expression"
									},
									"adls_storage_cntner_pii": {
										"value": "@pipeline().parameters.adls_storage_cntner",
										"type": "Expression"
									},
									"input_file_prefix": {
										"value": "@variables('input_file_prefix')",
										"type": "Expression"
									},
									"Filename": {
										"value": "@variables('Filename')",
										"type": "Expression"
									},
									"sourceDataDt": {
										"value": "@variables('sourceDataDt')",
										"type": "Expression"
									}
								}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "AzureBlobStorage_ls",
									"type": "LinkedServiceReference"
								},
								"path": "log"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false,
								"wildcardFileName": {
									"value": "@{pipeline().parameters.SourceFile}",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Email_Notify_Failure_Work",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DeleteFromWork",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@pipeline().parameters.EmailTo",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.SourceFile",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "Email_Notify_Failure_Raw",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DeleteFromRaw",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@pipeline().parameters.EmailTo",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.SourceFile",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "DeleteFromBlobWork",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "DeleteFromRaw",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Blob_work",
								"type": "DatasetReference",
								"parameters": {}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "AzureBlobStorage_ls",
									"type": "LinkedServiceReference"
								},
								"path": "log"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": false,
								"wildcardFileName": {
									"value": "@{pipeline().parameters.wildcard_file_path_work}",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Email_Notify_Failure_BlobWork",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DeleteFromBlobWork",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@pipeline().parameters.EmailTo",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.SourceFile",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "Input_File_Prefix",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "DeleteFromWork",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "input_file_prefix",
							"value": {
								"value": "@substring(pipeline().parameters.SourceFile,0,lastindexof(pipeline().parameters.SourceFile,'_'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "File_Name",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Input_File_Prefix",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Filename",
							"value": {
								"value": "@pipeline().parameters.SourceFile",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Source_Data_Dt",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "File_Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "sourceDataDt",
							"value": {
								"value": "@substring(pipeline().parameters.SourceFile,add(lastindexof(pipeline().parameters.SourceFile,'_'),1),8)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"env": {
						"type": "string"
					},
					"adls_storage_cntner": {
						"type": "string"
					},
					"wildcard_file_path_work": {
						"type": "string"
					},
					"wildcard_file_path_raw": {
						"type": "string"
					},
					"EmailTo": {
						"type": "string"
					},
					"SourceFile": {
						"type": "string"
					}
				},
				"variables": {
					"input_file_prefix": {
						"type": "String"
					},
					"Filename": {
						"type": "String"
					},
					"sourceDataDt": {
						"type": "String"
					}
				},
				"folder": {
					"name": "DevOps"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-18T16:21:12Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADLS Data Cleanup_bkp')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DeleteFromWork",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ADLS_work",
								"type": "DatasetReference",
								"parameters": {
									"env": {
										"value": "@pipeline().parameters.env",
										"type": "Expression"
									},
									"adls_storage_cntner": {
										"value": "@pipeline().parameters.adls_storage_cntner",
										"type": "Expression"
									}
								}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "AzureBlobStorage_ls",
									"type": "LinkedServiceReference"
								},
								"path": "log"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false,
								"wildcardFileName": {
									"value": "@{pipeline().parameters.wildcard_file_path_work}",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "DeleteFromRaw",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "DeleteFromWork",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ADLS_raw",
								"type": "DatasetReference",
								"parameters": {
									"env": {
										"value": "@pipeline().parameters.env",
										"type": "Expression"
									},
									"adls_storage_cntner": {
										"value": "@pipeline().parameters.adls_storage_cntner",
										"type": "Expression"
									},
									"input_file_prefix": {
										"value": "@variables('input_file_prefix')",
										"type": "Expression"
									},
									"Filename": {
										"value": "@variables('Filename')",
										"type": "Expression"
									},
									"sourceDataDt": {
										"value": "@variables('sourceDataDt')",
										"type": "Expression"
									}
								}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "AzureBlobStorage_ls",
									"type": "LinkedServiceReference"
								},
								"path": "log"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false,
								"wildcardFileName": {
									"value": "@{pipeline().parameters.SourceFile}",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Email_Notify_Failure_Work",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DeleteFromWork",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@pipeline().parameters.EmailTo",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.SourceFile",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "Email_Notify_Failure_Raw",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DeleteFromRaw",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@pipeline().parameters.EmailTo",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.SourceFile",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "DeleteFromBlobWork",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "DeleteFromRaw",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Blob_work",
								"type": "DatasetReference",
								"parameters": {}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "AzureBlobStorage_ls",
									"type": "LinkedServiceReference"
								},
								"path": "log"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": false,
								"wildcardFileName": {
									"value": "@{pipeline().parameters.wildcard_file_path_work}",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Email_Notify_Failure_BlobWork",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DeleteFromBlobWork",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@pipeline().parameters.EmailTo",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.SourceFile",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"env": {
						"type": "string"
					},
					"adls_storage_cntner": {
						"type": "string"
					},
					"wildcard_file_path_work": {
						"type": "string"
					},
					"wildcard_file_path_raw": {
						"type": "string"
					},
					"EmailTo": {
						"type": "string"
					},
					"SourceFile": {
						"type": "string"
					}
				},
				"variables": {
					"input_file_prefix": {
						"type": "String"
					},
					"Filename": {
						"type": "String"
					},
					"sourceDataDt": {
						"type": "String"
					}
				},
				"folder": {
					"name": "DevOps"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-18T16:21:12Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADLS Data Cleanup_bkup')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DeleteFromWork",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ADLS_work",
								"type": "DatasetReference",
								"parameters": {
									"env": {
										"value": "@pipeline().parameters.env",
										"type": "Expression"
									},
									"adls_storage_cntner": {
										"value": "@pipeline().parameters.adls_storage_cntner",
										"type": "Expression"
									}
								}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "AzureBlobStorage_ls",
									"type": "LinkedServiceReference"
								},
								"path": "log"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false,
								"wildcardFileName": {
									"value": "@{pipeline().parameters.wildcard_file_path_work}",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "DeleteFromRaw",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Source_Data_Dt",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ADLS_raw",
								"type": "DatasetReference",
								"parameters": {
									"env": {
										"value": "@pipeline().parameters.env",
										"type": "Expression"
									},
									"adls_storage_cntner": {
										"value": "@pipeline().parameters.adls_storage_cntner",
										"type": "Expression"
									},
									"input_file_prefix": {
										"value": "@variables('input_file_prefix')",
										"type": "Expression"
									},
									"Filename": {
										"value": "@variables('Filename')",
										"type": "Expression"
									},
									"sourceDataDt": {
										"value": "@variables('sourceDataDt')",
										"type": "Expression"
									}
								}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "AzureBlobStorage_ls",
									"type": "LinkedServiceReference"
								},
								"path": "log"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false,
								"wildcardFileName": {
									"value": "@{pipeline().parameters.SourceFile}",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Email_Notify_Failure_Work",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DeleteFromWork",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@pipeline().parameters.EmailTo",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.SourceFile",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "Email_Notify_Failure_Raw",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DeleteFromRaw",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@pipeline().parameters.EmailTo",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.SourceFile",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "DeleteFromBlobWork",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "DeleteFromRaw",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Blob_work",
								"type": "DatasetReference",
								"parameters": {}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "AzureBlobStorage_ls",
									"type": "LinkedServiceReference"
								},
								"path": "log"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": false,
								"wildcardFileName": {
									"value": "@{pipeline().parameters.wildcard_file_path_work}",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Email_Notify_Failure_BlobWork",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DeleteFromBlobWork",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@pipeline().parameters.EmailTo",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.SourceFile",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "Input_File_Prefix",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "DeleteFromWork",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "input_file_prefix",
							"value": {
								"value": "@substring(pipeline().parameters.SourceFile,0,lastindexof(pipeline().parameters.SourceFile,'_'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "File_Name",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Input_File_Prefix",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Filename",
							"value": {
								"value": "@pipeline().parameters.SourceFile",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Source_Data_Dt",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "File_Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "sourceDataDt",
							"value": {
								"value": "@substring(pipeline().parameters.SourceFile,add(lastindexof(pipeline().parameters.SourceFile,'_'),1),8)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"env": {
						"type": "string"
					},
					"adls_storage_cntner": {
						"type": "string"
					},
					"wildcard_file_path_work": {
						"type": "string"
					},
					"wildcard_file_path_raw": {
						"type": "string"
					},
					"EmailTo": {
						"type": "string"
					},
					"SourceFile": {
						"type": "string"
					}
				},
				"variables": {
					"input_file_prefix": {
						"type": "String"
					},
					"Filename": {
						"type": "String"
					},
					"sourceDataDt": {
						"type": "String"
					}
				},
				"folder": {
					"name": "DevOps"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-18T16:21:11Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Adhoc_Cleanup')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will perform the adhoc clean up of Raw, Struct, Reject and Prep zones.\n\nInstructions:\nFor Raw Zone Cleanup: raw_cleanup_ind should be equal to Y and data filename(wildcard not supported) should be populated.\nFor Struct Zone Cleanup: struct_cleanup_ind should be equal to Y and struct_table_name & struct_filter should not be empty.\nFor Prep Zone Cleanup: prep_cleanup_ind should be equal to Y and prep_table_name & prep_filter should not be empty.",
				"activities": [
					{
						"name": "Read_Env_File",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "Json",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Email_Notify_03",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details.')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "DL_BA_Finance@aa.com",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.filename",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "Cleanup",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat('/',activity('Read_Env_File').output.firstRow.adls_storage_cntner,'/',activity('Read_Env_File').output.firstRow.azure_env,'/devops/Adhoc_Cleanup')",
								"type": "Expression"
							},
							"baseParameters": {
								"filename": {
									"value": "@pipeline().parameters.filename",
									"type": "Expression"
								},
								"storageaccountname": {
									"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_act)",
									"type": "Expression"
								},
								"env": {
									"value": "@activity('Read_Env_File').output.firstRow.azure_env",
									"type": "Expression"
								},
								"raw_cleanup_ind": {
									"value": "@pipeline().parameters.raw_cleanup_ind",
									"type": "Expression"
								},
								"struct_cleanup_ind": {
									"value": "@pipeline().parameters.struct_cleanup_ind",
									"type": "Expression"
								},
								"prep_cleanup_ind": {
									"value": "@pipeline().parameters.prep_cleanup_ind",
									"type": "Expression"
								},
								"struct_filter": {
									"value": "@pipeline().parameters.struct_filter",
									"type": "Expression"
								},
								"prep_filter": {
									"value": "@pipeline().parameters.prep_filter",
									"type": "Expression"
								},
								"adlsstoragecntner": {
									"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_cntner)",
									"type": "Expression"
								},
								"struct_table_name": {
									"value": "@pipeline().parameters.struct_table_name",
									"type": "Expression"
								},
								"prep_table_name": {
									"value": "@pipeline().parameters.prep_table_name",
									"type": "Expression"
								},
								"reject_cleanup_ind": {
									"value": "@pipeline().parameters.reject_cleanup_ind",
									"type": "Expression"
								},
								"reject_table_name": {
									"value": "@pipeline().parameters.reject_table_name",
									"type": "Expression"
								},
								"reject_filter": {
									"value": "@pipeline().parameters.reject_filter",
									"type": "Expression"
								},
								"filepath": {
									"value": "@pipeline().parameters.raw_subfolder_path",
									"type": "Expression"
								},
								"spii_ind": {
									"value": "@pipeline().parameters.spii_ind",
									"type": "Expression"
								},
								"pii_ind": {
									"value": "@pipeline().parameters.pii_ind",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Email_Notify_02",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Cleanup",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. \nLog : ' ,activity('Cleanup').output.runPageUrl)",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.filename",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "Email_Notify_01",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Cleanup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('Adhoc Cleanup completed successfully. Please verify the notebook log for more details. Log : ' ,activity('Cleanup').output.runPageUrl)",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.filename",
									"type": "Expression"
								},
								"Status": "Success"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"raw_cleanup_ind": {
						"type": "string",
						"defaultValue": "N"
					},
					"struct_cleanup_ind": {
						"type": "string",
						"defaultValue": "N"
					},
					"prep_cleanup_ind": {
						"type": "string",
						"defaultValue": "N"
					},
					"filename": {
						"type": "string",
						"defaultValue": " NA"
					},
					"struct_table_name": {
						"type": "string",
						"defaultValue": " "
					},
					"struct_filter": {
						"type": "string",
						"defaultValue": " "
					},
					"prep_table_name": {
						"type": "string",
						"defaultValue": " "
					},
					"prep_filter": {
						"type": "string",
						"defaultValue": " "
					},
					"reject_table_name": {
						"type": "string",
						"defaultValue": " "
					},
					"reject_filter": {
						"type": "string",
						"defaultValue": " "
					},
					"raw_subfolder_path": {
						"type": "string",
						"defaultValue": "dev/rvact/YQYR"
					},
					"reject_cleanup_ind": {
						"type": "string",
						"defaultValue": "N"
					},
					"spii_ind": {
						"type": "string",
						"defaultValue": "N"
					},
					"pii_ind": {
						"type": "string",
						"defaultValue": "Y"
					}
				},
				"folder": {
					"name": "DevOps"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-18T16:21:11Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Adhoc_Cleanup_bkp')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will perform the adhoc clean up of Raw, Struct, Reject and Prep zones.\n\nInstructions:\nFor Raw Zone Cleanup: raw_cleanup_ind should be equal to Y and data filename(wildcard not supported) should be populated.\nFor Struct Zone Cleanup: struct_cleanup_ind should be equal to Y and struct_table_name & struct_filter should not be empty.\nFor Prep Zone Cleanup: prep_cleanup_ind should be equal to Y and prep_table_name & prep_filter should not be empty.",
				"activities": [
					{
						"name": "Read_Env_File",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "Json",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Email_Notify_03",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details.')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "DL_BA_Finance@aa.com",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.filename",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "Cleanup",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat('/',activity('Read_Env_File').output.firstRow.adls_storage_cntner,'/',activity('Read_Env_File').output.firstRow.azure_env,'/devops/Adhoc_Cleanup')",
								"type": "Expression"
							},
							"baseParameters": {
								"filename": {
									"value": "@pipeline().parameters.filename",
									"type": "Expression"
								},
								"storageaccountname": {
									"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_act)",
									"type": "Expression"
								},
								"env": {
									"value": "@activity('Read_Env_File').output.firstRow.azure_env",
									"type": "Expression"
								},
								"raw_cleanup_ind": {
									"value": "@pipeline().parameters.raw_cleanup_ind",
									"type": "Expression"
								},
								"struct_cleanup_ind": {
									"value": "@pipeline().parameters.struct_cleanup_ind",
									"type": "Expression"
								},
								"prep_cleanup_ind": {
									"value": "@pipeline().parameters.prep_cleanup_ind",
									"type": "Expression"
								},
								"struct_filter": {
									"value": "@pipeline().parameters.struct_filter",
									"type": "Expression"
								},
								"prep_filter": {
									"value": "@pipeline().parameters.prep_filter",
									"type": "Expression"
								},
								"adlsstoragecntner": {
									"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_cntner)",
									"type": "Expression"
								},
								"struct_table_name": {
									"value": "@pipeline().parameters.struct_table_name",
									"type": "Expression"
								},
								"prep_table_name": {
									"value": "@pipeline().parameters.prep_table_name",
									"type": "Expression"
								},
								"reject_cleanup_ind": {
									"value": "@pipeline().parameters.reject_cleanup_ind",
									"type": "Expression"
								},
								"reject_table_name": {
									"value": "@pipeline().parameters.reject_table_name",
									"type": "Expression"
								},
								"reject_filter": {
									"value": "@pipeline().parameters.reject_filter",
									"type": "Expression"
								},
								"filepath": {
									"value": "@pipeline().parameters.raw_subfolder_path",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Email_Notify_02",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Cleanup",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. \nLog : ' ,activity('Cleanup').output.runPageUrl)",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.filename",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "Email_Notify_01",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Cleanup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('Adhoc Cleanup completed successfully. Please verify the notebook log for more details. Log : ' ,activity('Cleanup').output.runPageUrl)",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.filename",
									"type": "Expression"
								},
								"Status": "Success"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"raw_cleanup_ind": {
						"type": "string",
						"defaultValue": "N"
					},
					"struct_cleanup_ind": {
						"type": "string",
						"defaultValue": "N"
					},
					"prep_cleanup_ind": {
						"type": "string",
						"defaultValue": "N"
					},
					"filename": {
						"type": "string",
						"defaultValue": " NA"
					},
					"struct_table_name": {
						"type": "string",
						"defaultValue": " "
					},
					"struct_filter": {
						"type": "string",
						"defaultValue": " "
					},
					"prep_table_name": {
						"type": "string",
						"defaultValue": " "
					},
					"prep_filter": {
						"type": "string",
						"defaultValue": " "
					},
					"reject_table_name": {
						"type": "string",
						"defaultValue": " "
					},
					"reject_filter": {
						"type": "string",
						"defaultValue": " "
					},
					"raw_subfolder_path": {
						"type": "string",
						"defaultValue": "dev/rvact/YQYR"
					},
					"reject_cleanup_ind": {
						"type": "string",
						"defaultValue": "Y"
					}
				},
				"folder": {
					"name": "DevOps"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-18T16:21:11Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Adhoc_Table_Optimization')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will perform the adhoc optimization on Struct, Reject and Prep tables.\n\nInstructions:\nFor a specific or individual table optimization input the STRUCT or PREP or BOTH in the parameter value AND frequency value cannot be blank.\n   input D for Daily, W for Weekly, and M for Monthly\n\nJust run the pipeline for all tables optimization ",
				"activities": [
					{
						"name": "Read_Env_File",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "Json",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Email_Notify_03",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details.')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "DL_BA_Finance@aa.com",
									"type": "Expression"
								},
								"Status": {
									"value": "Fail",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Table_Optimization",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat('/',activity('Read_Env_File').output.firstRow.adls_storage_cntner,'/',activity('Read_Env_File').output.firstRow.azure_env,'/devops/Table_Optimization')",
								"type": "Expression"
							},
							"baseParameters": {
								"struct_table_name": {
									"value": "@pipeline().parameters.struct_table_name",
									"type": "Expression"
								},
								"prep_table_name": {
									"value": "@pipeline().parameters.prep_table_name",
									"type": "Expression"
								},
								"env": {
									"value": "@activity('Read_Env_File').output.firstRow.azure_env",
									"type": "Expression"
								},
								"adls_storage_cntner": {
									"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_cntner)",
									"type": "Expression"
								},
								"frequency": {
									"value": "@pipeline().parameters.frequency",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Email_Notify_02",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Table_Optimization",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. \nLog : ' ,activity('Table_Optimization').output.runPageUrl)",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
									"type": "Expression"
								},
								"Status": {
									"value": "Fail",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Email_Notify_01",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Table_Optimization",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('Adhoc Table_Optimization completed successfully. Please verify the notebook log for more details. Log : ' ,activity('Table_Optimization').output.runPageUrl)",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
									"type": "Expression"
								},
								"Status": {
									"value": "Success",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"struct_table_name": {
						"type": "string",
						"defaultValue": " "
					},
					"prep_table_name": {
						"type": "string",
						"defaultValue": " "
					},
					"frequency": {
						"type": "string",
						"defaultValue": "D"
					}
				},
				"folder": {
					"name": "DevOps"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-18T16:21:11Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy_or_Move_files_from_ADLS_to_Blobstorage')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is a common ADF pipeline that can be used to copy/move the files  between the ADLS and local blob storage.\n\n*wild card is supported.",
				"activities": [
					{
						"name": "Read_Env_File",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "Json",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Email_Notify_Success",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If Condition1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('Pipeline execution is successful')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('Read_Env_File').output.firstRow.succ_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.Filename",
									"type": "Expression"
								},
								"Status": "Success"
							}
						}
					},
					{
						"name": "Email_Notify_Failure_02",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If Condition1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.Filename",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "Email_Notify_Failure_01",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('Could not find or unable to read job params json file. Please check the logs for more details.')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "DL_BA_Finance@aa.com",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.Filename",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.Move_Ind,'Y')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Copy_Files1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.01:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"maxConcurrentConnections": 1,
												"recursive": false,
												"wildcardFileName": {
													"value": "@concat(pipeline().parameters.Filename,'*')",
													"type": "Expression"
												},
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false
									},
									"inputs": [
										{
											"referenceName": "ADLS_generic",
											"type": "DatasetReference",
											"parameters": {
												"complete_path": {
													"value": "@pipeline().parameters.From_Folder",
													"type": "Expression"
												},
												"adls_storage_cntner": {
													"value": "@activity('Read_Env_File').output.firstRow.adls_storage_cntner",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Blob_Binary_Generic",
											"type": "DatasetReference",
											"parameters": {
												"ContainerName": {
													"value": "@pipeline().parameters.To_Folder",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy_Files",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.01:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"maxConcurrentConnections": 1,
												"recursive": false,
												"wildcardFileName": {
													"value": "@concat(pipeline().parameters.Filename,'*')",
													"type": "Expression"
												},
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false
									},
									"inputs": [
										{
											"referenceName": "ADLS_generic",
											"type": "DatasetReference",
											"parameters": {
												"complete_path": {
													"value": "@pipeline().parameters.From_Folder",
													"type": "Expression"
												},
												"adls_storage_cntner": {
													"value": "@activity('Read_Env_File').output.firstRow.adls_storage_cntner",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Blob_Binary_Generic",
											"type": "DatasetReference",
											"parameters": {
												"ContainerName": {
													"value": "@pipeline().parameters.To_Folder",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "DeleteFromSource",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Copy_Files",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ADLS_generic",
											"type": "DatasetReference",
											"parameters": {
												"complete_path": {
													"value": "@pipeline().parameters.From_Folder",
													"type": "Expression"
												},
												"adls_storage_cntner": {
													"value": "@activity('Read_Env_File').output.firstRow.adls_storage_cntner",
													"type": "Expression"
												}
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "AzureBlobStorage_ls",
												"type": "LinkedServiceReference"
											},
											"path": "log"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": false,
											"wildcardFileName": {
												"value": "@{concat(pipeline().parameters.Filename,'*')}",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Filename": {
						"type": "string",
						"defaultValue": "NA"
					},
					"From_Folder": {
						"type": "string",
						"defaultValue": "dev/raw/"
					},
					"To_Folder": {
						"type": "string",
						"defaultValue": "landing"
					},
					"Move_Ind": {
						"type": "string",
						"defaultValue": "N"
					}
				},
				"folder": {
					"name": "DevOps"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-18T16:21:12Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy_or_Move_files_within_Blobstorage_containers')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is a common ADF pipeline that can be used to copy/move the files  between the folders(containers) within the local blob storage.\n\n*wild card is supported.",
				"activities": [
					{
						"name": "Read_Env_File",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "Json",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Email_Notify_Success",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If Condition1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('Pipeline execution is successful')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('Read_Env_File').output.firstRow.succ_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.Filename",
									"type": "Expression"
								},
								"Status": "Success"
							}
						}
					},
					{
						"name": "Email_Notify_Failure_02",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If Condition1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.Filename",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "Email_Notify_Failure_01",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('Could not find or unable to read job params json file. Please check the logs for more details.')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "DL_BA_Finance@aa.com",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.Filename",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.Move_Ind,'Y')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Copy_Files1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.01:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"maxConcurrentConnections": 1,
												"recursive": false,
												"wildcardFileName": {
													"value": "@concat(pipeline().parameters.Filename,'*')",
													"type": "Expression"
												},
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false
									},
									"inputs": [
										{
											"referenceName": "Blob_Binary_Generic",
											"type": "DatasetReference",
											"parameters": {
												"ContainerName": {
													"value": "@pipeline().parameters.From_Folder",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Blob_Binary_Generic",
											"type": "DatasetReference",
											"parameters": {
												"ContainerName": {
													"value": "@pipeline().parameters.To_Folder",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy_Files",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.01:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"maxConcurrentConnections": 1,
												"recursive": false,
												"wildcardFileName": {
													"value": "@concat(pipeline().parameters.Filename,'*')",
													"type": "Expression"
												},
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false
									},
									"inputs": [
										{
											"referenceName": "Blob_Binary_Generic",
											"type": "DatasetReference",
											"parameters": {
												"ContainerName": {
													"value": "@pipeline().parameters.From_Folder",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Blob_Binary_Generic",
											"type": "DatasetReference",
											"parameters": {
												"ContainerName": {
													"value": "@pipeline().parameters.To_Folder",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "DeleteFromSource",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Copy_Files",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "Blob_Binary_Generic",
											"type": "DatasetReference",
											"parameters": {
												"ContainerName": {
													"value": "@pipeline().parameters.From_Folder",
													"type": "Expression"
												}
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "AzureBlobStorage_ls",
												"type": "LinkedServiceReference"
											},
											"path": "log"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": false,
											"wildcardFileName": {
												"value": "@{concat(pipeline().parameters.Filename,'*')}",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Filename": {
						"type": "string",
						"defaultValue": "NA"
					},
					"From_Folder": {
						"type": "string",
						"defaultValue": "NA"
					},
					"To_Folder": {
						"type": "string",
						"defaultValue": "NA"
					},
					"Move_Ind": {
						"type": "string",
						"defaultValue": "N"
					}
				},
				"folder": {
					"name": "DevOps"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-18T16:21:11Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Onetime_Table_Creation_Notebook')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is a common ADF pipeline that will be used to execute the onetime table creation notebooks.",
				"activities": [
					{
						"name": "Read_Env_File",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "Json",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Notebook",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.Notebookpath,'/',pipeline().parameters.Notebookname)",
								"type": "Expression"
							},
							"baseParameters": {
								"Env": {
									"value": "@activity('Read_Env_File').output.firstRow.azure_env",
									"type": "Expression"
								},
								"Storageaccountname": {
									"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_act)",
									"type": "Expression"
								},
								"Structtablename": {
									"value": "@pipeline().parameters.Structtablename",
									"type": "Expression"
								},
								"Rejecttablename": {
									"value": "@pipeline().parameters.Rejecttablename",
									"type": "Expression"
								},
								"Preptablename": {
									"value": "@pipeline().parameters.Preptablename",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Email_Notify_Success",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Notebook",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('Onetime notebook execution is successful')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('Read_Env_File').output.firstRow.succ_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "NA",
									"type": "Expression"
								},
								"Status": "Success"
							}
						}
					},
					{
						"name": "Email_Notify_Failure",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Notebook",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "NA",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "Email_Notify_09",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('Could not find or unable to read job params json file. Please check the logs for more details.')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "DL_BA_Finance@aa.com",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "NA",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Notebookpath": {
						"type": "string",
						"defaultValue": "/rvact/dev/onetime"
					},
					"Notebookname": {
						"type": "string",
						"defaultValue": "YQYR_Onetime_Table_Creation"
					},
					"Structtablename": {
						"type": "string",
						"defaultValue": "NA"
					},
					"Rejecttablename": {
						"type": "string",
						"defaultValue": "NA"
					},
					"Preptablename": {
						"type": "string",
						"defaultValue": "NA"
					}
				},
				"folder": {
					"name": "DevOps"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-18T16:21:12Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Onetime_Table_Creation_Notebook_DElookup')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is a common ADF pipeline that will be used to execute the onetime table creation notebooks.",
				"activities": [
					{
						"name": "Read_Env_File",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "Json",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Notebook",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.Notebookpath,'/',pipeline().parameters.Notebookname)",
								"type": "Expression"
							},
							"baseParameters": {
								"Env": {
									"value": "@activity('Read_Env_File').output.firstRow.azure_env",
									"type": "Expression"
								},
								"Storageaccountname": {
									"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_act)",
									"type": "Expression"
								},
								"lookupTable": {
									"value": "@pipeline().parameters.lookupTable",
									"type": "Expression"
								},
								"lookupTableDB": {
									"value": "@pipeline().parameters.lookupTableDB",
									"type": "Expression"
								},
								"filename": {
									"value": "@pipeline().parameters.filename",
									"type": "Expression"
								},
								"adls_storage_cntner": {
									"value": "@pipeline().parameters.adls_storage_cntner",
									"type": "Expression"
								},
								"l_storage_account_name": {
									"value": "@pipeline().parameters.l_storage_account_name",
									"type": "Expression"
								},
								"adb_par": {
									"value": "@string(activity('Read_Env_File').output.firstRow.adb_par)",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Email_Notify_Success",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Notebook",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('Onetime notebook execution is successful')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('Read_Env_File').output.firstRow.succ_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "NA",
									"type": "Expression"
								},
								"Status": "Success"
							}
						}
					},
					{
						"name": "Email_Notify_Failure",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Notebook",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "suresh.pathipati@aa.com",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "NA",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "Email_Notify_09",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('Could not find or unable to read job params json file. Please check the logs for more details.')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "DL_BA_Finance@aa.com",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "NA",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Notebookpath": {
						"type": "string",
						"defaultValue": "/rvact/dev/onetime/"
					},
					"Notebookname": {
						"type": "string",
						"defaultValue": "Create_lookup_table_IDEC"
					},
					"lookupTable": {
						"type": "string",
						"defaultValue": "idec_Lookup"
					},
					"lookupTableDB": {
						"type": "string",
						"defaultValue": "rvact_dev_struct"
					},
					"filename": {
						"type": "string",
						"defaultValue": "IDEC_CLEAN_metadata.json"
					},
					"adls_storage_cntner": {
						"type": "string",
						"defaultValue": "rvact"
					},
					"l_storage_account_name": {
						"type": "string",
						"defaultValue": "banzeausrvactdev"
					}
				},
				"folder": {
					"name": "DevOps"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-18T16:21:11Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Onetime_Table_and_View_Creation_Notebook')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is a common ADF pipeline that will be used to execute the onetime table  & view creation notebooks.",
				"activities": [
					{
						"name": "Read_Env_File",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "Json",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Notebook",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.Notebookpath,'/',pipeline().parameters.Notebookname)",
								"type": "Expression"
							},
							"baseParameters": {
								"env": {
									"value": "@activity('Read_Env_File').output.firstRow.azure_env",
									"type": "Expression"
								},
								"Storageaccountname": {
									"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_act)",
									"type": "Expression"
								},
								"Structtablename": {
									"value": "@pipeline().parameters.Structtablename",
									"type": "Expression"
								},
								"Rejecttablename": {
									"value": "@pipeline().parameters.Rejecttablename",
									"type": "Expression"
								},
								"Preptablename": {
									"value": "@pipeline().parameters.Preptablename",
									"type": "Expression"
								},
								"adls_storage_cntner": {
									"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_cntner)",
									"type": "Expression"
								},
								"adb_par": {
									"value": "@string(activity('Read_Env_File').output.firstRow.adb_par)",
									"type": "Expression"
								},
								"feed_name": {
									"value": "@pipeline().parameters.feed_name",
									"type": "Expression"
								},
								"filename": {
									"value": "@pipeline().parameters.file_name",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Email_Notify_Success",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Notebook",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('Onetime notebook execution is successful')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('Read_Env_File').output.firstRow.succ_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "NA",
									"type": "Expression"
								},
								"Status": "Success"
							}
						}
					},
					{
						"name": "Email_Notify_Failure",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Notebook",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "NA",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "Email_Notify_09",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('Could not find or unable to read job params json file. Please check the logs for more details.')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "DL_BA_Finance@aa.com",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "NA",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Notebookpath": {
						"type": "string",
						"defaultValue": "/rvact/dev/onetime"
					},
					"Notebookname": {
						"type": "string",
						"defaultValue": "AGDECURR_Onetime_Table_Creation"
					},
					"Structtablename": {
						"type": "string",
						"defaultValue": "NA"
					},
					"Rejecttablename": {
						"type": "string",
						"defaultValue": "NA"
					},
					"Preptablename": {
						"type": "string",
						"defaultValue": "NA"
					},
					"feed_name": {
						"type": "string",
						"defaultValue": "AGDECURR"
					},
					"file_name": {
						"type": "string",
						"defaultValue": "RAC_AGDECURR_20210317000000.dat.gz"
					}
				},
				"folder": {
					"name": "DevOps"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-18T16:21:11Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Onetime_View_Creation_Notebook')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is a common ADF pipeline that will be used to execute the onetime VIEW creation notebooks.\nparameter file_name should be genetic",
				"activities": [
					{
						"name": "Read_Env_File",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "Json",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Notebook",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.Notebookpath,'/',pipeline().parameters.Notebookname)",
								"type": "Expression"
							},
							"baseParameters": {
								"env": {
									"value": "@activity('Read_Env_File').output.firstRow.azure_env",
									"type": "Expression"
								},
								"adls_storage_cntner": {
									"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_cntner)",
									"type": "Expression"
								},
								"feed_name": {
									"value": "@pipeline().parameters.feed_name",
									"type": "Expression"
								},
								"filename": {
									"value": "@pipeline().parameters.file_name",
									"type": "Expression"
								},
								"adb_par": {
									"value": "@string(activity('Read_Env_File').output.firstRow.adb_par)",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Email_Notify_Success",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Notebook",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('Onetime notebook execution is successful')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('Read_Env_File').output.firstRow.succ_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "NA",
									"type": "Expression"
								},
								"Status": "Success"
							}
						}
					},
					{
						"name": "Email_Notify_Failure",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Notebook",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "NA",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "Email_Notify_09",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('Could not find or unable to read job params json file. Please check the logs for more details.')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "DL_BA_Finance@aa.com",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "NA",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Notebookpath": {
						"type": "string",
						"defaultValue": "/rvact/dev/onetime/"
					},
					"Notebookname": {
						"type": "string",
						"defaultValue": "CDC_Onetime_View_Creation"
					},
					"feed_name": {
						"type": "string",
						"defaultValue": "AGDECURR"
					},
					"file_name": {
						"type": "string",
						"defaultValue": "RAC_AGDECURR_20210317000000.dat.gz"
					}
				},
				"folder": {
					"name": "DevOps"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-18T16:21:11Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_dataMigration_HistorymigrateFiles_01')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will call the notebooks necessary to perform the data migration and copy files from transient ",
				"activities": [
					{
						"name": "ac_lookupAdfParamFile",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "ds_adf_param",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "db_migrateFiles",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ac_lookupAdfParamFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat('/',activity('ac_lookupAdfParamFile').output.firstRow.adls_storage_cntner,'/',activity('ac_lookupAdfParamFile').output.firstRow.azure_env,'/migration/migrateFiles')",
								"type": "Expression"
							},
							"baseParameters": {
								"adb_par": {
									"value": "@string(activity('ac_lookupAdfParamFile').output.firstRow.adb_par)",
									"type": "Expression"
								},
								"env": {
									"value": "@string(activity('ac_lookupAdfParamFile').output.firstRow.azure_env)",
									"type": "Expression"
								},
								"adbDebugInd": "N",
								"Migration_sources": {
									"value": "@pipeline().parameters.Migration_sources",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ac_sendFailHistoryCopy_Email",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ac_lookupAdfParamFile",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error during the ac_lookupAdfParamFile activity. Please check the logs for more details. \nError: ', replace(activity('ac_lookupAdfParamFile').Error.Message, '\"', ''))\n",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "DL_BA_Finance@aa.com",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.filename",
									"type": "Expression"
								},
								"Status": "FAIL"
							}
						}
					},
					{
						"name": "ac_sendPassEmail",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "db_migrateFiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('This pipeline has completed successfully : ',activity('db_migrateFiles').output.runPageUrl)",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('ac_lookupAdfParamFile').output.firstRow.succ_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.filename",
									"type": "Expression"
								},
								"Status": "Success"
							}
						}
					},
					{
						"name": "ac_sendFailHistoryCopy_Fail_Email",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "db_migrateFiles",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error during the db_migrateFiles notebook. Please check the logs for more details. \nError: runPageUrl: ', activity('db_migrateFiles').output.runPageUrl)",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('ac_lookupAdfParamFile').output.firstRow.fail_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.filename",
									"type": "Expression"
								},
								"Status": "FAIL"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"filename": {
						"type": "string",
						"defaultValue": "n/a"
					},
					"adbDebugInd": {
						"type": "string",
						"defaultValue": "N"
					},
					"Migration_sources": {
						"type": "string",
						"defaultValue": "Codesharein_sources"
					}
				},
				"variables": {
					"throwError": {
						"type": "String",
						"defaultValue": "unknown"
					},
					"arrayPosition": {
						"type": "String",
						"defaultValue": "unknown"
					},
					"feedName": {
						"type": "String",
						"defaultValue": "unknown"
					},
					"sourceDataDt": {
						"type": "String",
						"defaultValue": "unknown"
					}
				},
				"folder": {
					"name": "History_Migration"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-18T16:21:12Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_dataMigration_migration_landing_02')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will call the notebooks necessary to perform the data migration and copy files from migration to landing folder",
				"activities": [
					{
						"name": "ac_lookupAdfParamFile",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "ds_adf_param",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "db_copyMigrationFilesToLanding",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ac_lookupAdfParamFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat('/',activity('ac_lookupAdfParamFile').output.firstRow.adls_storage_cntner,'/',activity('ac_lookupAdfParamFile').output.firstRow.azure_env,'/migration/copyMigrationFilesToLanding')",
								"type": "Expression"
							},
							"baseParameters": {
								"adb_par": {
									"value": "@string(activity('ac_lookupAdfParamFile').output.firstRow.adb_par)",
									"type": "Expression"
								},
								"env": {
									"value": "@string(activity('ac_lookupAdfParamFile').output.firstRow.azure_env)",
									"type": "Expression"
								},
								"feed_name": {
									"value": "incr",
									"type": "Expression"
								},
								"adbDebugInd": "N",
								"Migration_sources": {
									"value": "@pipeline().parameters.Migration_sources",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ac_sendFailHistoryCopy_Email",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ac_lookupAdfParamFile",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error during the ac_lookupAdfParamFile activity. Please check the logs for more details. \nError: ', replace(activity('ac_lookupAdfParamFile').Error.Message, '\"', ''),\n' runPageUrl: ', activity('ac_lookupAdfParamFile').output.runPageUrl)",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "DL_BA_Finance@aa.com",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.filename",
									"type": "Expression"
								},
								"Status": "FAIL"
							}
						}
					},
					{
						"name": "ac_sendPassEmail",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "db_copyMigrationFilesToLanding",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('This pipeline has completed successfully.   db_copyMigrationFilesToLanding.runPageUrl: ', activity('db_copyMigrationFilesToLanding').output.runPageUrl)",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('ac_lookupAdfParamFile').output.firstRow.succ_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.feed_name",
									"type": "Expression"
								},
								"Status": "Success"
							}
						}
					},
					{
						"name": "ac_sendFailEmail_historyload",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "db_copyMigrationFilesToLanding",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error during the db_copyMigrationFilesToLanding notebook. Please check the logs for more details. \nError: ', replace(activity('db_copyMigrationFilesToLanding').Error.Message, '\"', ''),\n' runPageUrl: ', activity('db_copyMigrationFilesToLanding').output.runPageUrl)",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('ac_lookupAdfParamFile').output.firstRow.fail_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "db_copyMigrationFilesToLanding",
									"type": "Expression"
								},
								"Status": "FAIL"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"feed_name": {
						"type": "string",
						"defaultValue": "incr"
					},
					"adbDebugInd": {
						"type": "string",
						"defaultValue": "N"
					},
					"filename": {
						"type": "string",
						"defaultValue": "n/a"
					},
					"Migration_sources": {
						"type": "string",
						"defaultValue": "RESPIN_sources"
					}
				},
				"variables": {
					"throwError": {
						"type": "String",
						"defaultValue": "unknown"
					},
					"arrayPosition": {
						"type": "String",
						"defaultValue": "unknown"
					},
					"feedName": {
						"type": "String",
						"defaultValue": "unknown"
					},
					"sourceDataDt": {
						"type": "String",
						"defaultValue": "unknown"
					}
				},
				"folder": {
					"name": "History_Migration"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-18T16:21:12Z"
			},
			"dependsOn": []
		}
	]
}