{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "azureadflearnings"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ds_adf_param')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "job_param_Historymigration.json",
						"container": "config"
					}
				},
				"schema": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/jobparamlookup')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Jobparam.txt",
						"container": "transiant"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "env",
						"type": "String"
					},
					{
						"name": "blob_path",
						"type": "String"
					},
					{
						"name": "ADLS_PATH",
						"type": "String"
					},
					{
						"name": "Token_id",
						"type": "String"
					},
					{
						"name": "Param_path",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDatabricks_V6_4')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This will use the run time 6.4 cluster",
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-7339348852698591.11.azuredatabricks.net",
					"accessToken": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault_ls",
							"type": "LinkedServiceReference"
						},
						"secretName": "ba-n-rvact-001-adbtoken-secret"
					},
					"existingClusterId": "0222-202204-flora568"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDatabricks_ls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-7339348852698591.11.azuredatabricks.net",
					"accessToken": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault_ls",
							"type": "LinkedServiceReference"
						},
						"secretName": "ba-n-rvact-001-adbtoken-secret"
					},
					"existingClusterId": "0406-221726-guess351"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADLS Data Cleanup')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DeleteFromBlobWork",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Is_Raw_Non-PII",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Blob_work",
								"type": "DatasetReference",
								"parameters": {}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "AzureBlobStorage_ls",
									"type": "LinkedServiceReference"
								},
								"path": "log"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": false,
								"wildcardFileName": {
									"value": "@{pipeline().parameters.wildcard_file_path_work}",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Email_Notify_Failure_BlobWork",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DeleteFromBlobWork",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@pipeline().parameters.EmailTo",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.SourceFile",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "Input_File_Prefix",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Is_Work_Non-PII",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "input_file_prefix",
							"value": {
								"value": "@substring(pipeline().parameters.SourceFile,0,lastindexof(pipeline().parameters.SourceFile,'_'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "File_Name",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Input_File_Prefix",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Filename",
							"value": {
								"value": "@pipeline().parameters.SourceFile",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Source_Data_Dt",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "File_Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "sourceDataDt",
							"value": {
								"value": "@substring(pipeline().parameters.SourceFile,add(lastindexof(pipeline().parameters.SourceFile,'_'),1),8)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Is_Work_SPII",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(pipeline().parameters.adls_storage_cntner,'rvact-spii'), 'true', 'false')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "DeleteFromWork_spii",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ADLS_work_spii",
											"type": "DatasetReference",
											"parameters": {
												"env": {
													"value": "@pipeline().parameters.env",
													"type": "Expression"
												},
												"adls_storage_cntner_spii": {
													"value": "@pipeline().parameters.adls_storage_cntner",
													"type": "Expression"
												}
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "AzureBlobStorage_ls",
												"type": "LinkedServiceReference"
											},
											"path": "log"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": false,
											"wildcardFileName": {
												"value": "@{pipeline().parameters.wildcard_file_path_work}",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Email_Notify_Failure_Work_spii",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "DeleteFromWork_spii",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "EmailNotification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"DataFactoryName": {
												"value": "@pipeline().DataFactory",
												"type": "Expression"
											},
											"PipelineName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"Message": {
												"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
												"type": "Expression"
											},
											"EmailTo": {
												"value": "@pipeline().parameters.EmailTo",
												"type": "Expression"
											},
											"SourceFile": {
												"value": "@pipeline().parameters.SourceFile",
												"type": "Expression"
											},
											"Status": "Fail"
										}
									}
								}
							]
						}
					},
					{
						"name": "Is_Work_PII",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Is_Work_SPII",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(pipeline().parameters.adls_storage_cntner,'rvact-pii'), 'true', 'false')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "DeleteFromWork_pii",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ADLS_work_pii",
											"type": "DatasetReference",
											"parameters": {
												"env": {
													"value": "@pipeline().parameters.env",
													"type": "Expression"
												},
												"adls_storage_cntner_pii": {
													"value": "@pipeline().parameters.adls_storage_cntner",
													"type": "Expression"
												}
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "AzureBlobStorage_ls",
												"type": "LinkedServiceReference"
											},
											"path": "log"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": false,
											"wildcardFileName": {
												"value": "@{pipeline().parameters.wildcard_file_path_work}",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Email_Notify_Failure_Work_pii",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "DeleteFromWork_pii",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "EmailNotification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"DataFactoryName": {
												"value": "@pipeline().DataFactory",
												"type": "Expression"
											},
											"PipelineName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"Message": {
												"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
												"type": "Expression"
											},
											"EmailTo": {
												"value": "@pipeline().parameters.EmailTo",
												"type": "Expression"
											},
											"SourceFile": {
												"value": "@pipeline().parameters.SourceFile",
												"type": "Expression"
											},
											"Status": "Fail"
										}
									}
								}
							]
						}
					},
					{
						"name": "Is_Work_Non-PII",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Is_Work_PII",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(pipeline().parameters.adls_storage_cntner,'rvact'), 'true', 'false')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "DeleteFromWork",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ADLS_work",
											"type": "DatasetReference",
											"parameters": {
												"env": {
													"value": "@pipeline().parameters.env",
													"type": "Expression"
												},
												"adls_storage_cntner": {
													"value": "@pipeline().parameters.adls_storage_cntner",
													"type": "Expression"
												}
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "AzureBlobStorage_ls",
												"type": "LinkedServiceReference"
											},
											"path": "log"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": false,
											"wildcardFileName": {
												"value": "@{pipeline().parameters.wildcard_file_path_work}",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Email_Notify_Failure_Work",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "DeleteFromWork",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "EmailNotification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"DataFactoryName": {
												"value": "@pipeline().DataFactory",
												"type": "Expression"
											},
											"PipelineName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"Message": {
												"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
												"type": "Expression"
											},
											"EmailTo": {
												"value": "@pipeline().parameters.EmailTo",
												"type": "Expression"
											},
											"SourceFile": {
												"value": "@pipeline().parameters.SourceFile",
												"type": "Expression"
											},
											"Status": "Fail"
										}
									}
								}
							]
						}
					},
					{
						"name": "Is_Raw_SPII",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Source_Data_Dt",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(pipeline().parameters.adls_storage_cntner,'rvact-spii'), 'true', 'false')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "DeleteFromRaw_spii",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ADLS_raw_spii",
											"type": "DatasetReference",
											"parameters": {
												"env": {
													"value": "@pipeline().parameters.env",
													"type": "Expression"
												},
												"adls_storage_cntner_spii": {
													"value": "@pipeline().parameters.adls_storage_cntner",
													"type": "Expression"
												},
												"input_file_prefix": {
													"value": "@variables('input_file_prefix')",
													"type": "Expression"
												},
												"Filename": {
													"value": "@variables('Filename')",
													"type": "Expression"
												},
												"sourceDataDt": {
													"value": "@variables('sourceDataDt')",
													"type": "Expression"
												}
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "AzureBlobStorage_ls",
												"type": "LinkedServiceReference"
											},
											"path": "log"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": false,
											"wildcardFileName": {
												"value": "@{pipeline().parameters.SourceFile}",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Email_Notify_Failure_Raw_spii",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "DeleteFromRaw_spii",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "EmailNotification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"DataFactoryName": {
												"value": "@pipeline().DataFactory",
												"type": "Expression"
											},
											"PipelineName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"Message": {
												"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
												"type": "Expression"
											},
											"EmailTo": {
												"value": "@pipeline().parameters.EmailTo",
												"type": "Expression"
											},
											"SourceFile": {
												"value": "@pipeline().parameters.SourceFile",
												"type": "Expression"
											},
											"Status": "Fail"
										}
									}
								}
							]
						}
					},
					{
						"name": "Is_Raw_PII",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Is_Raw_SPII",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(pipeline().parameters.adls_storage_cntner,'rvact-pii'), 'true', 'false')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "DeleteFromRaw_pii",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ADLS_raw_pii",
											"type": "DatasetReference",
											"parameters": {
												"env": {
													"value": "@pipeline().parameters.env",
													"type": "Expression"
												},
												"adls_storage_cntner_pii": {
													"value": "@pipeline().parameters.adls_storage_cntner",
													"type": "Expression"
												},
												"input_file_prefix": {
													"value": "@variables('input_file_prefix')",
													"type": "Expression"
												},
												"Filename": {
													"value": "@variables('Filename')",
													"type": "Expression"
												},
												"sourceDataDt": {
													"value": "@variables('sourceDataDt')",
													"type": "Expression"
												}
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "AzureBlobStorage_ls",
												"type": "LinkedServiceReference"
											},
											"path": "log"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": false,
											"wildcardFileName": {
												"value": "@{pipeline().parameters.SourceFile}",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Email_Notify_Failure_Raw_pii",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "DeleteFromRaw_pii",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "EmailNotification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"DataFactoryName": {
												"value": "@pipeline().DataFactory",
												"type": "Expression"
											},
											"PipelineName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"Message": {
												"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
												"type": "Expression"
											},
											"EmailTo": {
												"value": "@pipeline().parameters.EmailTo",
												"type": "Expression"
											},
											"SourceFile": {
												"value": "@pipeline().parameters.SourceFile",
												"type": "Expression"
											},
											"Status": "Fail"
										}
									}
								}
							]
						}
					},
					{
						"name": "Is_Raw_Non-PII",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Is_Raw_PII",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(pipeline().parameters.adls_storage_cntner,'rvact'), 'true', 'false')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "DeleteFromRaw",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ADLS_raw",
											"type": "DatasetReference",
											"parameters": {
												"env": {
													"value": "@pipeline().parameters.env",
													"type": "Expression"
												},
												"adls_storage_cntner": {
													"value": "@pipeline().parameters.adls_storage_cntner",
													"type": "Expression"
												},
												"input_file_prefix": {
													"value": "@variables('input_file_prefix')",
													"type": "Expression"
												},
												"Filename": {
													"value": "@variables('Filename')",
													"type": "Expression"
												},
												"sourceDataDt": {
													"value": "@variables('sourceDataDt')",
													"type": "Expression"
												}
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "AzureBlobStorage_ls",
												"type": "LinkedServiceReference"
											},
											"path": "log"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": false,
											"wildcardFileName": {
												"value": "@{pipeline().parameters.SourceFile}",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Email_Notify_Failure_Raw",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "DeleteFromRaw",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "EmailNotification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"DataFactoryName": {
												"value": "@pipeline().DataFactory",
												"type": "Expression"
											},
											"PipelineName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"Message": {
												"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
												"type": "Expression"
											},
											"EmailTo": {
												"value": "@pipeline().parameters.EmailTo",
												"type": "Expression"
											},
											"SourceFile": {
												"value": "@pipeline().parameters.SourceFile",
												"type": "Expression"
											},
											"Status": "Fail"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"env": {
						"type": "string"
					},
					"adls_storage_cntner": {
						"type": "string"
					},
					"wildcard_file_path_work": {
						"type": "string"
					},
					"wildcard_file_path_raw": {
						"type": "string"
					},
					"EmailTo": {
						"type": "string"
					},
					"SourceFile": {
						"type": "string"
					}
				},
				"variables": {
					"input_file_prefix": {
						"type": "String"
					},
					"Filename": {
						"type": "String"
					},
					"sourceDataDt": {
						"type": "String"
					}
				},
				"folder": {
					"name": "DevOps"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-18T16:21:12Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADLS Data Cleanup_Pii')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DeleteFromWork",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ADLS_work_pii",
								"type": "DatasetReference",
								"parameters": {
									"env": {
										"value": "@pipeline().parameters.env",
										"type": "Expression"
									},
									"adls_storage_cntner_pii": {
										"value": "@pipeline().parameters.adls_storage_cntner",
										"type": "Expression"
									}
								}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "AzureBlobStorage_ls",
									"type": "LinkedServiceReference"
								},
								"path": "log"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false,
								"wildcardFileName": {
									"value": "@{pipeline().parameters.wildcard_file_path_work}",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "DeleteFromRaw",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Source_Data_Dt",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ADLS_raw_pii",
								"type": "DatasetReference",
								"parameters": {
									"env": {
										"value": "@pipeline().parameters.env",
										"type": "Expression"
									},
									"adls_storage_cntner_pii": {
										"value": "@pipeline().parameters.adls_storage_cntner",
										"type": "Expression"
									},
									"input_file_prefix": {
										"value": "@variables('input_file_prefix')",
										"type": "Expression"
									},
									"Filename": {
										"value": "@variables('Filename')",
										"type": "Expression"
									},
									"sourceDataDt": {
										"value": "@variables('sourceDataDt')",
										"type": "Expression"
									}
								}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "AzureBlobStorage_ls",
									"type": "LinkedServiceReference"
								},
								"path": "log"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false,
								"wildcardFileName": {
									"value": "@{pipeline().parameters.SourceFile}",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Email_Notify_Failure_Work",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DeleteFromWork",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@pipeline().parameters.EmailTo",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.SourceFile",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "Email_Notify_Failure_Raw",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DeleteFromRaw",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@pipeline().parameters.EmailTo",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.SourceFile",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "DeleteFromBlobWork",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "DeleteFromRaw",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Blob_work",
								"type": "DatasetReference",
								"parameters": {}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "AzureBlobStorage_ls",
									"type": "LinkedServiceReference"
								},
								"path": "log"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": false,
								"wildcardFileName": {
									"value": "@{pipeline().parameters.wildcard_file_path_work}",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Email_Notify_Failure_BlobWork",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DeleteFromBlobWork",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@pipeline().parameters.EmailTo",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.SourceFile",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "Input_File_Prefix",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "DeleteFromWork",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "input_file_prefix",
							"value": {
								"value": "@substring(pipeline().parameters.SourceFile,0,lastindexof(pipeline().parameters.SourceFile,'_'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "File_Name",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Input_File_Prefix",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Filename",
							"value": {
								"value": "@pipeline().parameters.SourceFile",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Source_Data_Dt",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "File_Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "sourceDataDt",
							"value": {
								"value": "@substring(pipeline().parameters.SourceFile,add(lastindexof(pipeline().parameters.SourceFile,'_'),1),8)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"env": {
						"type": "string"
					},
					"adls_storage_cntner": {
						"type": "string"
					},
					"wildcard_file_path_work": {
						"type": "string"
					},
					"wildcard_file_path_raw": {
						"type": "string"
					},
					"EmailTo": {
						"type": "string"
					},
					"SourceFile": {
						"type": "string"
					}
				},
				"variables": {
					"input_file_prefix": {
						"type": "String"
					},
					"Filename": {
						"type": "String"
					},
					"sourceDataDt": {
						"type": "String"
					}
				},
				"folder": {
					"name": "DevOps"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-18T16:21:12Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADLS Data Cleanup_bkp')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DeleteFromWork",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ADLS_work",
								"type": "DatasetReference",
								"parameters": {
									"env": {
										"value": "@pipeline().parameters.env",
										"type": "Expression"
									},
									"adls_storage_cntner": {
										"value": "@pipeline().parameters.adls_storage_cntner",
										"type": "Expression"
									}
								}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "AzureBlobStorage_ls",
									"type": "LinkedServiceReference"
								},
								"path": "log"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false,
								"wildcardFileName": {
									"value": "@{pipeline().parameters.wildcard_file_path_work}",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "DeleteFromRaw",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "DeleteFromWork",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ADLS_raw",
								"type": "DatasetReference",
								"parameters": {
									"env": {
										"value": "@pipeline().parameters.env",
										"type": "Expression"
									},
									"adls_storage_cntner": {
										"value": "@pipeline().parameters.adls_storage_cntner",
										"type": "Expression"
									},
									"input_file_prefix": {
										"value": "@variables('input_file_prefix')",
										"type": "Expression"
									},
									"Filename": {
										"value": "@variables('Filename')",
										"type": "Expression"
									},
									"sourceDataDt": {
										"value": "@variables('sourceDataDt')",
										"type": "Expression"
									}
								}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "AzureBlobStorage_ls",
									"type": "LinkedServiceReference"
								},
								"path": "log"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false,
								"wildcardFileName": {
									"value": "@{pipeline().parameters.SourceFile}",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Email_Notify_Failure_Work",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DeleteFromWork",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@pipeline().parameters.EmailTo",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.SourceFile",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "Email_Notify_Failure_Raw",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DeleteFromRaw",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@pipeline().parameters.EmailTo",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.SourceFile",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "DeleteFromBlobWork",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "DeleteFromRaw",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Blob_work",
								"type": "DatasetReference",
								"parameters": {}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "AzureBlobStorage_ls",
									"type": "LinkedServiceReference"
								},
								"path": "log"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": false,
								"wildcardFileName": {
									"value": "@{pipeline().parameters.wildcard_file_path_work}",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Email_Notify_Failure_BlobWork",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DeleteFromBlobWork",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@pipeline().parameters.EmailTo",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.SourceFile",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"env": {
						"type": "string"
					},
					"adls_storage_cntner": {
						"type": "string"
					},
					"wildcard_file_path_work": {
						"type": "string"
					},
					"wildcard_file_path_raw": {
						"type": "string"
					},
					"EmailTo": {
						"type": "string"
					},
					"SourceFile": {
						"type": "string"
					}
				},
				"variables": {
					"input_file_prefix": {
						"type": "String"
					},
					"Filename": {
						"type": "String"
					},
					"sourceDataDt": {
						"type": "String"
					}
				},
				"folder": {
					"name": "DevOps"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-18T16:21:12Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADLS Data Cleanup_bkup')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DeleteFromWork",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ADLS_work",
								"type": "DatasetReference",
								"parameters": {
									"env": {
										"value": "@pipeline().parameters.env",
										"type": "Expression"
									},
									"adls_storage_cntner": {
										"value": "@pipeline().parameters.adls_storage_cntner",
										"type": "Expression"
									}
								}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "AzureBlobStorage_ls",
									"type": "LinkedServiceReference"
								},
								"path": "log"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false,
								"wildcardFileName": {
									"value": "@{pipeline().parameters.wildcard_file_path_work}",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "DeleteFromRaw",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Source_Data_Dt",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ADLS_raw",
								"type": "DatasetReference",
								"parameters": {
									"env": {
										"value": "@pipeline().parameters.env",
										"type": "Expression"
									},
									"adls_storage_cntner": {
										"value": "@pipeline().parameters.adls_storage_cntner",
										"type": "Expression"
									},
									"input_file_prefix": {
										"value": "@variables('input_file_prefix')",
										"type": "Expression"
									},
									"Filename": {
										"value": "@variables('Filename')",
										"type": "Expression"
									},
									"sourceDataDt": {
										"value": "@variables('sourceDataDt')",
										"type": "Expression"
									}
								}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "AzureBlobStorage_ls",
									"type": "LinkedServiceReference"
								},
								"path": "log"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false,
								"wildcardFileName": {
									"value": "@{pipeline().parameters.SourceFile}",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Email_Notify_Failure_Work",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DeleteFromWork",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@pipeline().parameters.EmailTo",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.SourceFile",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "Email_Notify_Failure_Raw",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DeleteFromRaw",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@pipeline().parameters.EmailTo",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.SourceFile",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "DeleteFromBlobWork",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "DeleteFromRaw",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Blob_work",
								"type": "DatasetReference",
								"parameters": {}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "AzureBlobStorage_ls",
									"type": "LinkedServiceReference"
								},
								"path": "log"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": false,
								"wildcardFileName": {
									"value": "@{pipeline().parameters.wildcard_file_path_work}",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Email_Notify_Failure_BlobWork",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DeleteFromBlobWork",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@pipeline().parameters.EmailTo",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.SourceFile",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "Input_File_Prefix",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "DeleteFromWork",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "input_file_prefix",
							"value": {
								"value": "@substring(pipeline().parameters.SourceFile,0,lastindexof(pipeline().parameters.SourceFile,'_'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "File_Name",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Input_File_Prefix",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Filename",
							"value": {
								"value": "@pipeline().parameters.SourceFile",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Source_Data_Dt",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "File_Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "sourceDataDt",
							"value": {
								"value": "@substring(pipeline().parameters.SourceFile,add(lastindexof(pipeline().parameters.SourceFile,'_'),1),8)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"env": {
						"type": "string"
					},
					"adls_storage_cntner": {
						"type": "string"
					},
					"wildcard_file_path_work": {
						"type": "string"
					},
					"wildcard_file_path_raw": {
						"type": "string"
					},
					"EmailTo": {
						"type": "string"
					},
					"SourceFile": {
						"type": "string"
					}
				},
				"variables": {
					"input_file_prefix": {
						"type": "String"
					},
					"Filename": {
						"type": "String"
					},
					"sourceDataDt": {
						"type": "String"
					}
				},
				"folder": {
					"name": "DevOps"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-18T16:21:11Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Adhoc_Cleanup')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will perform the adhoc clean up of Raw, Struct, Reject and Prep zones.\n\nInstructions:\nFor Raw Zone Cleanup: raw_cleanup_ind should be equal to Y and data filename(wildcard not supported) should be populated.\nFor Struct Zone Cleanup: struct_cleanup_ind should be equal to Y and struct_table_name & struct_filter should not be empty.\nFor Prep Zone Cleanup: prep_cleanup_ind should be equal to Y and prep_table_name & prep_filter should not be empty.",
				"activities": [
					{
						"name": "Read_Env_File",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "Json",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Email_Notify_03",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details.')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "DL_BA_Finance@aa.com",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.filename",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "Cleanup",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat('/',activity('Read_Env_File').output.firstRow.adls_storage_cntner,'/',activity('Read_Env_File').output.firstRow.azure_env,'/devops/Adhoc_Cleanup')",
								"type": "Expression"
							},
							"baseParameters": {
								"filename": {
									"value": "@pipeline().parameters.filename",
									"type": "Expression"
								},
								"storageaccountname": {
									"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_act)",
									"type": "Expression"
								},
								"env": {
									"value": "@activity('Read_Env_File').output.firstRow.azure_env",
									"type": "Expression"
								},
								"raw_cleanup_ind": {
									"value": "@pipeline().parameters.raw_cleanup_ind",
									"type": "Expression"
								},
								"struct_cleanup_ind": {
									"value": "@pipeline().parameters.struct_cleanup_ind",
									"type": "Expression"
								},
								"prep_cleanup_ind": {
									"value": "@pipeline().parameters.prep_cleanup_ind",
									"type": "Expression"
								},
								"struct_filter": {
									"value": "@pipeline().parameters.struct_filter",
									"type": "Expression"
								},
								"prep_filter": {
									"value": "@pipeline().parameters.prep_filter",
									"type": "Expression"
								},
								"adlsstoragecntner": {
									"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_cntner)",
									"type": "Expression"
								},
								"struct_table_name": {
									"value": "@pipeline().parameters.struct_table_name",
									"type": "Expression"
								},
								"prep_table_name": {
									"value": "@pipeline().parameters.prep_table_name",
									"type": "Expression"
								},
								"reject_cleanup_ind": {
									"value": "@pipeline().parameters.reject_cleanup_ind",
									"type": "Expression"
								},
								"reject_table_name": {
									"value": "@pipeline().parameters.reject_table_name",
									"type": "Expression"
								},
								"reject_filter": {
									"value": "@pipeline().parameters.reject_filter",
									"type": "Expression"
								},
								"filepath": {
									"value": "@pipeline().parameters.raw_subfolder_path",
									"type": "Expression"
								},
								"spii_ind": {
									"value": "@pipeline().parameters.spii_ind",
									"type": "Expression"
								},
								"pii_ind": {
									"value": "@pipeline().parameters.pii_ind",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Email_Notify_02",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Cleanup",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. \nLog : ' ,activity('Cleanup').output.runPageUrl)",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.filename",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "Email_Notify_01",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Cleanup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('Adhoc Cleanup completed successfully. Please verify the notebook log for more details. Log : ' ,activity('Cleanup').output.runPageUrl)",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.filename",
									"type": "Expression"
								},
								"Status": "Success"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"raw_cleanup_ind": {
						"type": "string",
						"defaultValue": "N"
					},
					"struct_cleanup_ind": {
						"type": "string",
						"defaultValue": "N"
					},
					"prep_cleanup_ind": {
						"type": "string",
						"defaultValue": "N"
					},
					"filename": {
						"type": "string",
						"defaultValue": " NA"
					},
					"struct_table_name": {
						"type": "string",
						"defaultValue": " "
					},
					"struct_filter": {
						"type": "string",
						"defaultValue": " "
					},
					"prep_table_name": {
						"type": "string",
						"defaultValue": " "
					},
					"prep_filter": {
						"type": "string",
						"defaultValue": " "
					},
					"reject_table_name": {
						"type": "string",
						"defaultValue": " "
					},
					"reject_filter": {
						"type": "string",
						"defaultValue": " "
					},
					"raw_subfolder_path": {
						"type": "string",
						"defaultValue": "dev/rvact/YQYR"
					},
					"reject_cleanup_ind": {
						"type": "string",
						"defaultValue": "N"
					},
					"spii_ind": {
						"type": "string",
						"defaultValue": "N"
					},
					"pii_ind": {
						"type": "string",
						"defaultValue": "Y"
					}
				},
				"folder": {
					"name": "DevOps"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-18T16:21:11Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDatabricks_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Adhoc_Cleanup_bkp')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will perform the adhoc clean up of Raw, Struct, Reject and Prep zones.\n\nInstructions:\nFor Raw Zone Cleanup: raw_cleanup_ind should be equal to Y and data filename(wildcard not supported) should be populated.\nFor Struct Zone Cleanup: struct_cleanup_ind should be equal to Y and struct_table_name & struct_filter should not be empty.\nFor Prep Zone Cleanup: prep_cleanup_ind should be equal to Y and prep_table_name & prep_filter should not be empty.",
				"activities": [
					{
						"name": "Read_Env_File",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "Json",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Email_Notify_03",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details.')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "DL_BA_Finance@aa.com",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.filename",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "Cleanup",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat('/',activity('Read_Env_File').output.firstRow.adls_storage_cntner,'/',activity('Read_Env_File').output.firstRow.azure_env,'/devops/Adhoc_Cleanup')",
								"type": "Expression"
							},
							"baseParameters": {
								"filename": {
									"value": "@pipeline().parameters.filename",
									"type": "Expression"
								},
								"storageaccountname": {
									"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_act)",
									"type": "Expression"
								},
								"env": {
									"value": "@activity('Read_Env_File').output.firstRow.azure_env",
									"type": "Expression"
								},
								"raw_cleanup_ind": {
									"value": "@pipeline().parameters.raw_cleanup_ind",
									"type": "Expression"
								},
								"struct_cleanup_ind": {
									"value": "@pipeline().parameters.struct_cleanup_ind",
									"type": "Expression"
								},
								"prep_cleanup_ind": {
									"value": "@pipeline().parameters.prep_cleanup_ind",
									"type": "Expression"
								},
								"struct_filter": {
									"value": "@pipeline().parameters.struct_filter",
									"type": "Expression"
								},
								"prep_filter": {
									"value": "@pipeline().parameters.prep_filter",
									"type": "Expression"
								},
								"adlsstoragecntner": {
									"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_cntner)",
									"type": "Expression"
								},
								"struct_table_name": {
									"value": "@pipeline().parameters.struct_table_name",
									"type": "Expression"
								},
								"prep_table_name": {
									"value": "@pipeline().parameters.prep_table_name",
									"type": "Expression"
								},
								"reject_cleanup_ind": {
									"value": "@pipeline().parameters.reject_cleanup_ind",
									"type": "Expression"
								},
								"reject_table_name": {
									"value": "@pipeline().parameters.reject_table_name",
									"type": "Expression"
								},
								"reject_filter": {
									"value": "@pipeline().parameters.reject_filter",
									"type": "Expression"
								},
								"filepath": {
									"value": "@pipeline().parameters.raw_subfolder_path",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Email_Notify_02",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Cleanup",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. \nLog : ' ,activity('Cleanup').output.runPageUrl)",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.filename",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "Email_Notify_01",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Cleanup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('Adhoc Cleanup completed successfully. Please verify the notebook log for more details. Log : ' ,activity('Cleanup').output.runPageUrl)",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.filename",
									"type": "Expression"
								},
								"Status": "Success"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"raw_cleanup_ind": {
						"type": "string",
						"defaultValue": "N"
					},
					"struct_cleanup_ind": {
						"type": "string",
						"defaultValue": "N"
					},
					"prep_cleanup_ind": {
						"type": "string",
						"defaultValue": "N"
					},
					"filename": {
						"type": "string",
						"defaultValue": " NA"
					},
					"struct_table_name": {
						"type": "string",
						"defaultValue": " "
					},
					"struct_filter": {
						"type": "string",
						"defaultValue": " "
					},
					"prep_table_name": {
						"type": "string",
						"defaultValue": " "
					},
					"prep_filter": {
						"type": "string",
						"defaultValue": " "
					},
					"reject_table_name": {
						"type": "string",
						"defaultValue": " "
					},
					"reject_filter": {
						"type": "string",
						"defaultValue": " "
					},
					"raw_subfolder_path": {
						"type": "string",
						"defaultValue": "dev/rvact/YQYR"
					},
					"reject_cleanup_ind": {
						"type": "string",
						"defaultValue": "Y"
					}
				},
				"folder": {
					"name": "DevOps"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-18T16:21:11Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDatabricks_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Adhoc_Table_Optimization')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will perform the adhoc optimization on Struct, Reject and Prep tables.\n\nInstructions:\nFor a specific or individual table optimization input the STRUCT or PREP or BOTH in the parameter value AND frequency value cannot be blank.\n   input D for Daily, W for Weekly, and M for Monthly\n\nJust run the pipeline for all tables optimization ",
				"activities": [
					{
						"name": "Read_Env_File",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "Json",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Email_Notify_03",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details.')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "DL_BA_Finance@aa.com",
									"type": "Expression"
								},
								"Status": {
									"value": "Fail",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Table_Optimization",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat('/',activity('Read_Env_File').output.firstRow.adls_storage_cntner,'/',activity('Read_Env_File').output.firstRow.azure_env,'/devops/Table_Optimization')",
								"type": "Expression"
							},
							"baseParameters": {
								"struct_table_name": {
									"value": "@pipeline().parameters.struct_table_name",
									"type": "Expression"
								},
								"prep_table_name": {
									"value": "@pipeline().parameters.prep_table_name",
									"type": "Expression"
								},
								"env": {
									"value": "@activity('Read_Env_File').output.firstRow.azure_env",
									"type": "Expression"
								},
								"adls_storage_cntner": {
									"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_cntner)",
									"type": "Expression"
								},
								"frequency": {
									"value": "@pipeline().parameters.frequency",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Email_Notify_02",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Table_Optimization",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. \nLog : ' ,activity('Table_Optimization').output.runPageUrl)",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
									"type": "Expression"
								},
								"Status": {
									"value": "Fail",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Email_Notify_01",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Table_Optimization",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('Adhoc Table_Optimization completed successfully. Please verify the notebook log for more details. Log : ' ,activity('Table_Optimization').output.runPageUrl)",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
									"type": "Expression"
								},
								"Status": {
									"value": "Success",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"struct_table_name": {
						"type": "string",
						"defaultValue": " "
					},
					"prep_table_name": {
						"type": "string",
						"defaultValue": " "
					},
					"frequency": {
						"type": "string",
						"defaultValue": "D"
					}
				},
				"folder": {
					"name": "DevOps"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-18T16:21:11Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDatabricks_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyPipeline_onetimecopy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_opy",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "rawzone//"
							},
							{
								"name": "Destination",
								"value": "structzone//"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"maxConcurrentConnections": 10,
									"recursive": true,
									"modifiedDatetimeStart": "2022-06-09T00:00:00.013Z",
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 0
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"maxConcurrentConnections": 10
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "AzureBlobStorage_ls",
										"type": "LinkedServiceReference"
									},
									"path": "runlogs"
								}
							},
							"dataIntegrationUnits": 16
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_opy",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_opy",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Azuretraining"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy_or_Move_files_from_ADLS_to_Blobstorage')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is a common ADF pipeline that can be used to copy/move the files  between the ADLS and local blob storage.\n\n*wild card is supported.",
				"activities": [
					{
						"name": "Read_Env_File",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "Json",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Email_Notify_Success",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If Condition1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('Pipeline execution is successful')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('Read_Env_File').output.firstRow.succ_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.Filename",
									"type": "Expression"
								},
								"Status": "Success"
							}
						}
					},
					{
						"name": "Email_Notify_Failure_02",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If Condition1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.Filename",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "Email_Notify_Failure_01",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('Could not find or unable to read job params json file. Please check the logs for more details.')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "DL_BA_Finance@aa.com",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.Filename",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.Move_Ind,'Y')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Copy_Files1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.01:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"maxConcurrentConnections": 1,
												"recursive": false,
												"wildcardFileName": {
													"value": "@concat(pipeline().parameters.Filename,'*')",
													"type": "Expression"
												},
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false
									},
									"inputs": [
										{
											"referenceName": "ADLS_generic",
											"type": "DatasetReference",
											"parameters": {
												"complete_path": {
													"value": "@pipeline().parameters.From_Folder",
													"type": "Expression"
												},
												"adls_storage_cntner": {
													"value": "@activity('Read_Env_File').output.firstRow.adls_storage_cntner",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Blob_Binary_Generic",
											"type": "DatasetReference",
											"parameters": {
												"ContainerName": {
													"value": "@pipeline().parameters.To_Folder",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy_Files",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.01:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"maxConcurrentConnections": 1,
												"recursive": false,
												"wildcardFileName": {
													"value": "@concat(pipeline().parameters.Filename,'*')",
													"type": "Expression"
												},
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false
									},
									"inputs": [
										{
											"referenceName": "ADLS_generic",
											"type": "DatasetReference",
											"parameters": {
												"complete_path": {
													"value": "@pipeline().parameters.From_Folder",
													"type": "Expression"
												},
												"adls_storage_cntner": {
													"value": "@activity('Read_Env_File').output.firstRow.adls_storage_cntner",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Blob_Binary_Generic",
											"type": "DatasetReference",
											"parameters": {
												"ContainerName": {
													"value": "@pipeline().parameters.To_Folder",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "DeleteFromSource",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Copy_Files",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ADLS_generic",
											"type": "DatasetReference",
											"parameters": {
												"complete_path": {
													"value": "@pipeline().parameters.From_Folder",
													"type": "Expression"
												},
												"adls_storage_cntner": {
													"value": "@activity('Read_Env_File').output.firstRow.adls_storage_cntner",
													"type": "Expression"
												}
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "AzureBlobStorage_ls",
												"type": "LinkedServiceReference"
											},
											"path": "log"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": false,
											"wildcardFileName": {
												"value": "@{concat(pipeline().parameters.Filename,'*')}",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Filename": {
						"type": "string",
						"defaultValue": "NA"
					},
					"From_Folder": {
						"type": "string",
						"defaultValue": "dev/raw/"
					},
					"To_Folder": {
						"type": "string",
						"defaultValue": "landing"
					},
					"Move_Ind": {
						"type": "string",
						"defaultValue": "N"
					}
				},
				"folder": {
					"name": "DevOps"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-18T16:21:12Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy_or_Move_files_within_Blobstorage_containers')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is a common ADF pipeline that can be used to copy/move the files  between the folders(containers) within the local blob storage.\n\n*wild card is supported.",
				"activities": [
					{
						"name": "Read_Env_File",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "Json",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Email_Notify_Success",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If Condition1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('Pipeline execution is successful')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('Read_Env_File').output.firstRow.succ_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.Filename",
									"type": "Expression"
								},
								"Status": "Success"
							}
						}
					},
					{
						"name": "Email_Notify_Failure_02",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If Condition1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.Filename",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "Email_Notify_Failure_01",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('Could not find or unable to read job params json file. Please check the logs for more details.')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "DL_BA_Finance@aa.com",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.Filename",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.Move_Ind,'Y')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Copy_Files1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.01:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"maxConcurrentConnections": 1,
												"recursive": false,
												"wildcardFileName": {
													"value": "@concat(pipeline().parameters.Filename,'*')",
													"type": "Expression"
												},
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false
									},
									"inputs": [
										{
											"referenceName": "Blob_Binary_Generic",
											"type": "DatasetReference",
											"parameters": {
												"ContainerName": {
													"value": "@pipeline().parameters.From_Folder",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Blob_Binary_Generic",
											"type": "DatasetReference",
											"parameters": {
												"ContainerName": {
													"value": "@pipeline().parameters.To_Folder",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy_Files",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.01:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"maxConcurrentConnections": 1,
												"recursive": false,
												"wildcardFileName": {
													"value": "@concat(pipeline().parameters.Filename,'*')",
													"type": "Expression"
												},
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false
									},
									"inputs": [
										{
											"referenceName": "Blob_Binary_Generic",
											"type": "DatasetReference",
											"parameters": {
												"ContainerName": {
													"value": "@pipeline().parameters.From_Folder",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Blob_Binary_Generic",
											"type": "DatasetReference",
											"parameters": {
												"ContainerName": {
													"value": "@pipeline().parameters.To_Folder",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "DeleteFromSource",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Copy_Files",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "Blob_Binary_Generic",
											"type": "DatasetReference",
											"parameters": {
												"ContainerName": {
													"value": "@pipeline().parameters.From_Folder",
													"type": "Expression"
												}
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "AzureBlobStorage_ls",
												"type": "LinkedServiceReference"
											},
											"path": "log"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": false,
											"wildcardFileName": {
												"value": "@{concat(pipeline().parameters.Filename,'*')}",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Filename": {
						"type": "string",
						"defaultValue": "NA"
					},
					"From_Folder": {
						"type": "string",
						"defaultValue": "NA"
					},
					"To_Folder": {
						"type": "string",
						"defaultValue": "NA"
					},
					"Move_Ind": {
						"type": "string",
						"defaultValue": "N"
					}
				},
				"folder": {
					"name": "DevOps"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-18T16:21:11Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete files older than 30 days')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Please input a folder path as the parameter for this pipeline, and the pipeline will delete files which were last modified more than 30 days ago under the particular folder path.",
				"activities": [
					{
						"name": "DeleteFiles",
						"description": "Connect to your storage account to save the log file.",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinaryDatasetForDeleteActivity1",
								"type": "DatasetReference",
								"parameters": {
									"FolderPath": {
										"value": "@pipeline().parameters.SourceFolder",
										"type": "Expression"
									},
									"Directory": {
										"value": "@pipeline().parameters.SourceDirectory",
										"type": "Expression"
									}
								}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "AzureDataLakeStorage_ls",
									"type": "LinkedServiceReference"
								},
								"path": {
									"value": "@pipeline().parameters.LoggingPath",
									"type": "Expression"
								}
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"modifiedDatetimeEnd": {
									"value": "@{adddays(pipeline().TriggerTime, -1)}",
									"type": "Expression"
								},
								"wildcardFileName": "*"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceFolder": {
						"type": "string",
						"defaultValue": "structzone"
					},
					"SourceDirectory": {
						"type": "string",
						"defaultValue": "STRUCT_ARCH"
					},
					"LoggingPath": {
						"type": "string",
						"defaultValue": "/transiant"
					}
				},
				"folder": {
					"name": "Azuretraining"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Onetime_Table_Creation_Notebook')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is a common ADF pipeline that will be used to execute the onetime table creation notebooks.",
				"activities": [
					{
						"name": "Read_Env_File",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "Json",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Notebook",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.Notebookpath,'/',pipeline().parameters.Notebookname)",
								"type": "Expression"
							},
							"baseParameters": {
								"Env": {
									"value": "@activity('Read_Env_File').output.firstRow.azure_env",
									"type": "Expression"
								},
								"Storageaccountname": {
									"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_act)",
									"type": "Expression"
								},
								"Structtablename": {
									"value": "@pipeline().parameters.Structtablename",
									"type": "Expression"
								},
								"Rejecttablename": {
									"value": "@pipeline().parameters.Rejecttablename",
									"type": "Expression"
								},
								"Preptablename": {
									"value": "@pipeline().parameters.Preptablename",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Email_Notify_Success",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Notebook",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('Onetime notebook execution is successful')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('Read_Env_File').output.firstRow.succ_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "NA",
									"type": "Expression"
								},
								"Status": "Success"
							}
						}
					},
					{
						"name": "Email_Notify_Failure",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Notebook",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "NA",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "Email_Notify_09",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('Could not find or unable to read job params json file. Please check the logs for more details.')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "DL_BA_Finance@aa.com",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "NA",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Notebookpath": {
						"type": "string",
						"defaultValue": "/rvact/dev/onetime"
					},
					"Notebookname": {
						"type": "string",
						"defaultValue": "YQYR_Onetime_Table_Creation"
					},
					"Structtablename": {
						"type": "string",
						"defaultValue": "NA"
					},
					"Rejecttablename": {
						"type": "string",
						"defaultValue": "NA"
					},
					"Preptablename": {
						"type": "string",
						"defaultValue": "NA"
					}
				},
				"folder": {
					"name": "DevOps"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-18T16:21:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDatabricks_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Onetime_Table_Creation_Notebook_DElookup')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is a common ADF pipeline that will be used to execute the onetime table creation notebooks.",
				"activities": [
					{
						"name": "Read_Env_File",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "Json",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Notebook",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.Notebookpath,'/',pipeline().parameters.Notebookname)",
								"type": "Expression"
							},
							"baseParameters": {
								"Env": {
									"value": "@activity('Read_Env_File').output.firstRow.azure_env",
									"type": "Expression"
								},
								"Storageaccountname": {
									"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_act)",
									"type": "Expression"
								},
								"lookupTable": {
									"value": "@pipeline().parameters.lookupTable",
									"type": "Expression"
								},
								"lookupTableDB": {
									"value": "@pipeline().parameters.lookupTableDB",
									"type": "Expression"
								},
								"filename": {
									"value": "@pipeline().parameters.filename",
									"type": "Expression"
								},
								"adls_storage_cntner": {
									"value": "@pipeline().parameters.adls_storage_cntner",
									"type": "Expression"
								},
								"l_storage_account_name": {
									"value": "@pipeline().parameters.l_storage_account_name",
									"type": "Expression"
								},
								"adb_par": {
									"value": "@string(activity('Read_Env_File').output.firstRow.adb_par)",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Email_Notify_Success",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Notebook",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('Onetime notebook execution is successful')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('Read_Env_File').output.firstRow.succ_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "NA",
									"type": "Expression"
								},
								"Status": "Success"
							}
						}
					},
					{
						"name": "Email_Notify_Failure",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Notebook",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "suresh.pathipati@aa.com",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "NA",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "Email_Notify_09",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('Could not find or unable to read job params json file. Please check the logs for more details.')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "DL_BA_Finance@aa.com",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "NA",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Notebookpath": {
						"type": "string",
						"defaultValue": "/rvact/dev/onetime/"
					},
					"Notebookname": {
						"type": "string",
						"defaultValue": "Create_lookup_table_IDEC"
					},
					"lookupTable": {
						"type": "string",
						"defaultValue": "idec_Lookup"
					},
					"lookupTableDB": {
						"type": "string",
						"defaultValue": "rvact_dev_struct"
					},
					"filename": {
						"type": "string",
						"defaultValue": "IDEC_CLEAN_metadata.json"
					},
					"adls_storage_cntner": {
						"type": "string",
						"defaultValue": "rvact"
					},
					"l_storage_account_name": {
						"type": "string",
						"defaultValue": "banzeausrvactdev"
					}
				},
				"folder": {
					"name": "DevOps"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-18T16:21:11Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDatabricks_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Onetime_Table_and_View_Creation_Notebook')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is a common ADF pipeline that will be used to execute the onetime table  & view creation notebooks.",
				"activities": [
					{
						"name": "Read_Env_File",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "Json",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Notebook",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.Notebookpath,'/',pipeline().parameters.Notebookname)",
								"type": "Expression"
							},
							"baseParameters": {
								"env": {
									"value": "@activity('Read_Env_File').output.firstRow.azure_env",
									"type": "Expression"
								},
								"Storageaccountname": {
									"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_act)",
									"type": "Expression"
								},
								"Structtablename": {
									"value": "@pipeline().parameters.Structtablename",
									"type": "Expression"
								},
								"Rejecttablename": {
									"value": "@pipeline().parameters.Rejecttablename",
									"type": "Expression"
								},
								"Preptablename": {
									"value": "@pipeline().parameters.Preptablename",
									"type": "Expression"
								},
								"adls_storage_cntner": {
									"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_cntner)",
									"type": "Expression"
								},
								"adb_par": {
									"value": "@string(activity('Read_Env_File').output.firstRow.adb_par)",
									"type": "Expression"
								},
								"feed_name": {
									"value": "@pipeline().parameters.feed_name",
									"type": "Expression"
								},
								"filename": {
									"value": "@pipeline().parameters.file_name",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Email_Notify_Success",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Notebook",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('Onetime notebook execution is successful')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('Read_Env_File').output.firstRow.succ_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "NA",
									"type": "Expression"
								},
								"Status": "Success"
							}
						}
					},
					{
						"name": "Email_Notify_Failure",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Notebook",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "NA",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "Email_Notify_09",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('Could not find or unable to read job params json file. Please check the logs for more details.')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "DL_BA_Finance@aa.com",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "NA",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Notebookpath": {
						"type": "string",
						"defaultValue": "/rvact/dev/onetime"
					},
					"Notebookname": {
						"type": "string",
						"defaultValue": "AGDECURR_Onetime_Table_Creation"
					},
					"Structtablename": {
						"type": "string",
						"defaultValue": "NA"
					},
					"Rejecttablename": {
						"type": "string",
						"defaultValue": "NA"
					},
					"Preptablename": {
						"type": "string",
						"defaultValue": "NA"
					},
					"feed_name": {
						"type": "string",
						"defaultValue": "AGDECURR"
					},
					"file_name": {
						"type": "string",
						"defaultValue": "RAC_AGDECURR_20210317000000.dat.gz"
					}
				},
				"folder": {
					"name": "DevOps"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-18T16:21:11Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDatabricks_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Onetime_View_Creation_Notebook')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is a common ADF pipeline that will be used to execute the onetime VIEW creation notebooks.\nparameter file_name should be genetic",
				"activities": [
					{
						"name": "Read_Env_File",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "Json",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Notebook",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.Notebookpath,'/',pipeline().parameters.Notebookname)",
								"type": "Expression"
							},
							"baseParameters": {
								"env": {
									"value": "@activity('Read_Env_File').output.firstRow.azure_env",
									"type": "Expression"
								},
								"adls_storage_cntner": {
									"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_cntner)",
									"type": "Expression"
								},
								"feed_name": {
									"value": "@pipeline().parameters.feed_name",
									"type": "Expression"
								},
								"filename": {
									"value": "@pipeline().parameters.file_name",
									"type": "Expression"
								},
								"adb_par": {
									"value": "@string(activity('Read_Env_File').output.firstRow.adb_par)",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Email_Notify_Success",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Notebook",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('Onetime notebook execution is successful')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('Read_Env_File').output.firstRow.succ_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "NA",
									"type": "Expression"
								},
								"Status": "Success"
							}
						}
					},
					{
						"name": "Email_Notify_Failure",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Notebook",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "NA",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "Email_Notify_09",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('Could not find or unable to read job params json file. Please check the logs for more details.')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "DL_BA_Finance@aa.com",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "NA",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Notebookpath": {
						"type": "string",
						"defaultValue": "/rvact/dev/onetime/"
					},
					"Notebookname": {
						"type": "string",
						"defaultValue": "CDC_Onetime_View_Creation"
					},
					"feed_name": {
						"type": "string",
						"defaultValue": "AGDECURR"
					},
					"file_name": {
						"type": "string",
						"defaultValue": "RAC_AGDECURR_20210317000000.dat.gz"
					}
				},
				"folder": {
					"name": "DevOps"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-18T16:21:11Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDatabricks_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/aztraining_adf_copydata_df')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "this pipeline is used to copy data from raw zone to structured zone ",
				"activities": [
					{
						"name": "Raw to struct data copy",
						"description": "raw to struct data copy in adf",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Filter_condition",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": false,
							"dataIntegrationUnits": 8
						},
						"inputs": [
							{
								"referenceName": "Binary_blob_training_ds",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Binary_adls_training_ds",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete raw zone data",
						"description": "this will delete the data from source blob after successfully processed files ",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Raw to struct data copy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Binary_blob_training_ds",
								"type": "DatasetReference",
								"parameters": {}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "AzureBlobStorage_ls",
									"type": "LinkedServiceReference"
								},
								"path": "runlogs"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Get Metadata_blob",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Binary_Getmetatdata",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Filter_condition",
						"description": "this activity will filter the list of files ",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Metadata_blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata_blob').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@contains(activity('Get Metadata_blob').output.childItems[0].name,item().name)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute Pipeline_Email_Notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Get Metadata_blob",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification_Pipelines",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "eclasserasureshaz@outlook.com",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@activity('Get Metadata_blob').output.itemName",
									"type": "Expression"
								},
								"Status": {
									"value": "\"Fail\"",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"TokenID": {
						"type": "String"
					},
					"Value": {
						"type": "String"
					},
					"Runtokenvalue": {
						"type": "String"
					},
					"TokenPath": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Azuretraining"
				},
				"annotations": []
			},
			"dependsOn": []
		}
	]
}