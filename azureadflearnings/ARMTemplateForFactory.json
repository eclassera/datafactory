{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "azureadflearnings"
		},
		"AzureBlobStorage_ls_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage_ls'"
		},
		"AzureDataLakeStorage_ls_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage_ls'"
		},
		"linkedService1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'linkedService1'"
		},
		"linkedService2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'linkedService2'"
		},
		"AzureDataLakeStorage_ls_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://azuredataadlsdev.dfs.core.windows.net/"
		},
		"AzureKeyVault_ls_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://ba-n-zeaus-rvact-dev-kv.vault.azure.net/"
		},
		"TransientStorage_ls_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://banoriontransient.dfs.core.windows.net"
		},
		"trigger_DataCopy_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/b8501930-c7b6-4fa6-a05b-c62ac6d01b8c/resourceGroups/azuretraining/providers/Microsoft.Storage/storageAccounts/azuredatablobdev"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ADLS Data Cleanup')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DeleteFromBlobWork",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Is_Raw_Non-PII",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Blob_work",
								"type": "DatasetReference",
								"parameters": {}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "AzureBlobStorage_ls",
									"type": "LinkedServiceReference"
								},
								"path": "log"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": false,
								"wildcardFileName": {
									"value": "@{pipeline().parameters.wildcard_file_path_work}",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Email_Notify_Failure_BlobWork",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DeleteFromBlobWork",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@pipeline().parameters.EmailTo",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.SourceFile",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "Input_File_Prefix",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Is_Work_Non-PII",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "input_file_prefix",
							"value": {
								"value": "@substring(pipeline().parameters.SourceFile,0,lastindexof(pipeline().parameters.SourceFile,'_'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "File_Name",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Input_File_Prefix",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Filename",
							"value": {
								"value": "@pipeline().parameters.SourceFile",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Source_Data_Dt",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "File_Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "sourceDataDt",
							"value": {
								"value": "@substring(pipeline().parameters.SourceFile,add(lastindexof(pipeline().parameters.SourceFile,'_'),1),8)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Is_Work_SPII",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(pipeline().parameters.adls_storage_cntner,'rvact-spii'), 'true', 'false')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "DeleteFromWork_spii",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ADLS_work_spii",
											"type": "DatasetReference",
											"parameters": {
												"env": {
													"value": "@pipeline().parameters.env",
													"type": "Expression"
												},
												"adls_storage_cntner_spii": {
													"value": "@pipeline().parameters.adls_storage_cntner",
													"type": "Expression"
												}
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "AzureBlobStorage_ls",
												"type": "LinkedServiceReference"
											},
											"path": "log"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": false,
											"wildcardFileName": {
												"value": "@{pipeline().parameters.wildcard_file_path_work}",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Email_Notify_Failure_Work_spii",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "DeleteFromWork_spii",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "EmailNotification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"DataFactoryName": {
												"value": "@pipeline().DataFactory",
												"type": "Expression"
											},
											"PipelineName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"Message": {
												"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
												"type": "Expression"
											},
											"EmailTo": {
												"value": "@pipeline().parameters.EmailTo",
												"type": "Expression"
											},
											"SourceFile": {
												"value": "@pipeline().parameters.SourceFile",
												"type": "Expression"
											},
											"Status": "Fail"
										}
									}
								}
							]
						}
					},
					{
						"name": "Is_Work_PII",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Is_Work_SPII",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(pipeline().parameters.adls_storage_cntner,'rvact-pii'), 'true', 'false')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "DeleteFromWork_pii",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ADLS_work_pii",
											"type": "DatasetReference",
											"parameters": {
												"env": {
													"value": "@pipeline().parameters.env",
													"type": "Expression"
												},
												"adls_storage_cntner_pii": {
													"value": "@pipeline().parameters.adls_storage_cntner",
													"type": "Expression"
												}
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "AzureBlobStorage_ls",
												"type": "LinkedServiceReference"
											},
											"path": "log"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": false,
											"wildcardFileName": {
												"value": "@{pipeline().parameters.wildcard_file_path_work}",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Email_Notify_Failure_Work_pii",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "DeleteFromWork_pii",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "EmailNotification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"DataFactoryName": {
												"value": "@pipeline().DataFactory",
												"type": "Expression"
											},
											"PipelineName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"Message": {
												"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
												"type": "Expression"
											},
											"EmailTo": {
												"value": "@pipeline().parameters.EmailTo",
												"type": "Expression"
											},
											"SourceFile": {
												"value": "@pipeline().parameters.SourceFile",
												"type": "Expression"
											},
											"Status": "Fail"
										}
									}
								}
							]
						}
					},
					{
						"name": "Is_Work_Non-PII",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Is_Work_PII",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(pipeline().parameters.adls_storage_cntner,'rvact'), 'true', 'false')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "DeleteFromWork",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ADLS_work",
											"type": "DatasetReference",
											"parameters": {
												"env": {
													"value": "@pipeline().parameters.env",
													"type": "Expression"
												},
												"adls_storage_cntner": {
													"value": "@pipeline().parameters.adls_storage_cntner",
													"type": "Expression"
												}
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "AzureBlobStorage_ls",
												"type": "LinkedServiceReference"
											},
											"path": "log"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": false,
											"wildcardFileName": {
												"value": "@{pipeline().parameters.wildcard_file_path_work}",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Email_Notify_Failure_Work",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "DeleteFromWork",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "EmailNotification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"DataFactoryName": {
												"value": "@pipeline().DataFactory",
												"type": "Expression"
											},
											"PipelineName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"Message": {
												"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
												"type": "Expression"
											},
											"EmailTo": {
												"value": "@pipeline().parameters.EmailTo",
												"type": "Expression"
											},
											"SourceFile": {
												"value": "@pipeline().parameters.SourceFile",
												"type": "Expression"
											},
											"Status": "Fail"
										}
									}
								}
							]
						}
					},
					{
						"name": "Is_Raw_SPII",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Source_Data_Dt",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(pipeline().parameters.adls_storage_cntner,'rvact-spii'), 'true', 'false')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "DeleteFromRaw_spii",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ADLS_raw_spii",
											"type": "DatasetReference",
											"parameters": {
												"env": {
													"value": "@pipeline().parameters.env",
													"type": "Expression"
												},
												"adls_storage_cntner_spii": {
													"value": "@pipeline().parameters.adls_storage_cntner",
													"type": "Expression"
												},
												"input_file_prefix": {
													"value": "@variables('input_file_prefix')",
													"type": "Expression"
												},
												"Filename": {
													"value": "@variables('Filename')",
													"type": "Expression"
												},
												"sourceDataDt": {
													"value": "@variables('sourceDataDt')",
													"type": "Expression"
												}
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "AzureBlobStorage_ls",
												"type": "LinkedServiceReference"
											},
											"path": "log"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": false,
											"wildcardFileName": {
												"value": "@{pipeline().parameters.SourceFile}",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Email_Notify_Failure_Raw_spii",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "DeleteFromRaw_spii",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "EmailNotification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"DataFactoryName": {
												"value": "@pipeline().DataFactory",
												"type": "Expression"
											},
											"PipelineName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"Message": {
												"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
												"type": "Expression"
											},
											"EmailTo": {
												"value": "@pipeline().parameters.EmailTo",
												"type": "Expression"
											},
											"SourceFile": {
												"value": "@pipeline().parameters.SourceFile",
												"type": "Expression"
											},
											"Status": "Fail"
										}
									}
								}
							]
						}
					},
					{
						"name": "Is_Raw_PII",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Is_Raw_SPII",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(pipeline().parameters.adls_storage_cntner,'rvact-pii'), 'true', 'false')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "DeleteFromRaw_pii",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ADLS_raw_pii",
											"type": "DatasetReference",
											"parameters": {
												"env": {
													"value": "@pipeline().parameters.env",
													"type": "Expression"
												},
												"adls_storage_cntner_pii": {
													"value": "@pipeline().parameters.adls_storage_cntner",
													"type": "Expression"
												},
												"input_file_prefix": {
													"value": "@variables('input_file_prefix')",
													"type": "Expression"
												},
												"Filename": {
													"value": "@variables('Filename')",
													"type": "Expression"
												},
												"sourceDataDt": {
													"value": "@variables('sourceDataDt')",
													"type": "Expression"
												}
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "AzureBlobStorage_ls",
												"type": "LinkedServiceReference"
											},
											"path": "log"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": false,
											"wildcardFileName": {
												"value": "@{pipeline().parameters.SourceFile}",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Email_Notify_Failure_Raw_pii",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "DeleteFromRaw_pii",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "EmailNotification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"DataFactoryName": {
												"value": "@pipeline().DataFactory",
												"type": "Expression"
											},
											"PipelineName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"Message": {
												"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
												"type": "Expression"
											},
											"EmailTo": {
												"value": "@pipeline().parameters.EmailTo",
												"type": "Expression"
											},
											"SourceFile": {
												"value": "@pipeline().parameters.SourceFile",
												"type": "Expression"
											},
											"Status": "Fail"
										}
									}
								}
							]
						}
					},
					{
						"name": "Is_Raw_Non-PII",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Is_Raw_PII",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(pipeline().parameters.adls_storage_cntner,'rvact'), 'true', 'false')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "DeleteFromRaw",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ADLS_raw",
											"type": "DatasetReference",
											"parameters": {
												"env": {
													"value": "@pipeline().parameters.env",
													"type": "Expression"
												},
												"adls_storage_cntner": {
													"value": "@pipeline().parameters.adls_storage_cntner",
													"type": "Expression"
												},
												"input_file_prefix": {
													"value": "@variables('input_file_prefix')",
													"type": "Expression"
												},
												"Filename": {
													"value": "@variables('Filename')",
													"type": "Expression"
												},
												"sourceDataDt": {
													"value": "@variables('sourceDataDt')",
													"type": "Expression"
												}
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "AzureBlobStorage_ls",
												"type": "LinkedServiceReference"
											},
											"path": "log"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": false,
											"wildcardFileName": {
												"value": "@{pipeline().parameters.SourceFile}",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Email_Notify_Failure_Raw",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "DeleteFromRaw",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "EmailNotification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"DataFactoryName": {
												"value": "@pipeline().DataFactory",
												"type": "Expression"
											},
											"PipelineName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"Message": {
												"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
												"type": "Expression"
											},
											"EmailTo": {
												"value": "@pipeline().parameters.EmailTo",
												"type": "Expression"
											},
											"SourceFile": {
												"value": "@pipeline().parameters.SourceFile",
												"type": "Expression"
											},
											"Status": "Fail"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"env": {
						"type": "string"
					},
					"adls_storage_cntner": {
						"type": "string"
					},
					"wildcard_file_path_work": {
						"type": "string"
					},
					"wildcard_file_path_raw": {
						"type": "string"
					},
					"EmailTo": {
						"type": "string"
					},
					"SourceFile": {
						"type": "string"
					}
				},
				"variables": {
					"input_file_prefix": {
						"type": "String"
					},
					"Filename": {
						"type": "String"
					},
					"sourceDataDt": {
						"type": "String"
					}
				},
				"folder": {
					"name": "DevOps"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-18T16:21:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Blob_work')]",
				"[concat(variables('factoryId'), '/pipelines/EmailNotification')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_ls')]",
				"[concat(variables('factoryId'), '/datasets/ADLS_work_spii')]",
				"[concat(variables('factoryId'), '/datasets/ADLS_work_pii')]",
				"[concat(variables('factoryId'), '/datasets/ADLS_work')]",
				"[concat(variables('factoryId'), '/datasets/ADLS_raw_spii')]",
				"[concat(variables('factoryId'), '/datasets/ADLS_raw_pii')]",
				"[concat(variables('factoryId'), '/datasets/ADLS_raw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADLS Data Cleanup_Pii')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DeleteFromWork",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ADLS_work_pii",
								"type": "DatasetReference",
								"parameters": {
									"env": {
										"value": "@pipeline().parameters.env",
										"type": "Expression"
									},
									"adls_storage_cntner_pii": {
										"value": "@pipeline().parameters.adls_storage_cntner",
										"type": "Expression"
									}
								}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "AzureBlobStorage_ls",
									"type": "LinkedServiceReference"
								},
								"path": "log"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false,
								"wildcardFileName": {
									"value": "@{pipeline().parameters.wildcard_file_path_work}",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "DeleteFromRaw",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Source_Data_Dt",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ADLS_raw_pii",
								"type": "DatasetReference",
								"parameters": {
									"env": {
										"value": "@pipeline().parameters.env",
										"type": "Expression"
									},
									"adls_storage_cntner_pii": {
										"value": "@pipeline().parameters.adls_storage_cntner",
										"type": "Expression"
									},
									"input_file_prefix": {
										"value": "@variables('input_file_prefix')",
										"type": "Expression"
									},
									"Filename": {
										"value": "@variables('Filename')",
										"type": "Expression"
									},
									"sourceDataDt": {
										"value": "@variables('sourceDataDt')",
										"type": "Expression"
									}
								}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "AzureBlobStorage_ls",
									"type": "LinkedServiceReference"
								},
								"path": "log"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false,
								"wildcardFileName": {
									"value": "@{pipeline().parameters.SourceFile}",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Email_Notify_Failure_Work",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DeleteFromWork",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@pipeline().parameters.EmailTo",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.SourceFile",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "Email_Notify_Failure_Raw",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DeleteFromRaw",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@pipeline().parameters.EmailTo",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.SourceFile",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "DeleteFromBlobWork",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "DeleteFromRaw",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Blob_work",
								"type": "DatasetReference",
								"parameters": {}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "AzureBlobStorage_ls",
									"type": "LinkedServiceReference"
								},
								"path": "log"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": false,
								"wildcardFileName": {
									"value": "@{pipeline().parameters.wildcard_file_path_work}",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Email_Notify_Failure_BlobWork",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DeleteFromBlobWork",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@pipeline().parameters.EmailTo",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.SourceFile",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "Input_File_Prefix",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "DeleteFromWork",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "input_file_prefix",
							"value": {
								"value": "@substring(pipeline().parameters.SourceFile,0,lastindexof(pipeline().parameters.SourceFile,'_'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "File_Name",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Input_File_Prefix",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Filename",
							"value": {
								"value": "@pipeline().parameters.SourceFile",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Source_Data_Dt",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "File_Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "sourceDataDt",
							"value": {
								"value": "@substring(pipeline().parameters.SourceFile,add(lastindexof(pipeline().parameters.SourceFile,'_'),1),8)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"env": {
						"type": "string"
					},
					"adls_storage_cntner": {
						"type": "string"
					},
					"wildcard_file_path_work": {
						"type": "string"
					},
					"wildcard_file_path_raw": {
						"type": "string"
					},
					"EmailTo": {
						"type": "string"
					},
					"SourceFile": {
						"type": "string"
					}
				},
				"variables": {
					"input_file_prefix": {
						"type": "String"
					},
					"Filename": {
						"type": "String"
					},
					"sourceDataDt": {
						"type": "String"
					}
				},
				"folder": {
					"name": "DevOps"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-18T16:21:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ADLS_work_pii')]",
				"[concat(variables('factoryId'), '/datasets/ADLS_raw_pii')]",
				"[concat(variables('factoryId'), '/pipelines/EmailNotification')]",
				"[concat(variables('factoryId'), '/datasets/Blob_work')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADLS Data Cleanup_bkp')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DeleteFromWork",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ADLS_work",
								"type": "DatasetReference",
								"parameters": {
									"env": {
										"value": "@pipeline().parameters.env",
										"type": "Expression"
									},
									"adls_storage_cntner": {
										"value": "@pipeline().parameters.adls_storage_cntner",
										"type": "Expression"
									}
								}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "AzureBlobStorage_ls",
									"type": "LinkedServiceReference"
								},
								"path": "log"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false,
								"wildcardFileName": {
									"value": "@{pipeline().parameters.wildcard_file_path_work}",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "DeleteFromRaw",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "DeleteFromWork",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ADLS_raw",
								"type": "DatasetReference",
								"parameters": {
									"env": {
										"value": "@pipeline().parameters.env",
										"type": "Expression"
									},
									"adls_storage_cntner": {
										"value": "@pipeline().parameters.adls_storage_cntner",
										"type": "Expression"
									},
									"input_file_prefix": {
										"value": "@variables('input_file_prefix')",
										"type": "Expression"
									},
									"Filename": {
										"value": "@variables('Filename')",
										"type": "Expression"
									},
									"sourceDataDt": {
										"value": "@variables('sourceDataDt')",
										"type": "Expression"
									}
								}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "AzureBlobStorage_ls",
									"type": "LinkedServiceReference"
								},
								"path": "log"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false,
								"wildcardFileName": {
									"value": "@{pipeline().parameters.SourceFile}",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Email_Notify_Failure_Work",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DeleteFromWork",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@pipeline().parameters.EmailTo",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.SourceFile",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "Email_Notify_Failure_Raw",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DeleteFromRaw",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@pipeline().parameters.EmailTo",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.SourceFile",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "DeleteFromBlobWork",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "DeleteFromRaw",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Blob_work",
								"type": "DatasetReference",
								"parameters": {}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "AzureBlobStorage_ls",
									"type": "LinkedServiceReference"
								},
								"path": "log"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": false,
								"wildcardFileName": {
									"value": "@{pipeline().parameters.wildcard_file_path_work}",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Email_Notify_Failure_BlobWork",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DeleteFromBlobWork",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@pipeline().parameters.EmailTo",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.SourceFile",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"env": {
						"type": "string"
					},
					"adls_storage_cntner": {
						"type": "string"
					},
					"wildcard_file_path_work": {
						"type": "string"
					},
					"wildcard_file_path_raw": {
						"type": "string"
					},
					"EmailTo": {
						"type": "string"
					},
					"SourceFile": {
						"type": "string"
					}
				},
				"variables": {
					"input_file_prefix": {
						"type": "String"
					},
					"Filename": {
						"type": "String"
					},
					"sourceDataDt": {
						"type": "String"
					}
				},
				"folder": {
					"name": "DevOps"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-18T16:21:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ADLS_work')]",
				"[concat(variables('factoryId'), '/datasets/ADLS_raw')]",
				"[concat(variables('factoryId'), '/pipelines/EmailNotification')]",
				"[concat(variables('factoryId'), '/datasets/Blob_work')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADLS Data Cleanup_bkup')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DeleteFromWork",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ADLS_work",
								"type": "DatasetReference",
								"parameters": {
									"env": {
										"value": "@pipeline().parameters.env",
										"type": "Expression"
									},
									"adls_storage_cntner": {
										"value": "@pipeline().parameters.adls_storage_cntner",
										"type": "Expression"
									}
								}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "AzureBlobStorage_ls",
									"type": "LinkedServiceReference"
								},
								"path": "log"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false,
								"wildcardFileName": {
									"value": "@{pipeline().parameters.wildcard_file_path_work}",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "DeleteFromRaw",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Source_Data_Dt",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ADLS_raw",
								"type": "DatasetReference",
								"parameters": {
									"env": {
										"value": "@pipeline().parameters.env",
										"type": "Expression"
									},
									"adls_storage_cntner": {
										"value": "@pipeline().parameters.adls_storage_cntner",
										"type": "Expression"
									},
									"input_file_prefix": {
										"value": "@variables('input_file_prefix')",
										"type": "Expression"
									},
									"Filename": {
										"value": "@variables('Filename')",
										"type": "Expression"
									},
									"sourceDataDt": {
										"value": "@variables('sourceDataDt')",
										"type": "Expression"
									}
								}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "AzureBlobStorage_ls",
									"type": "LinkedServiceReference"
								},
								"path": "log"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false,
								"wildcardFileName": {
									"value": "@{pipeline().parameters.SourceFile}",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Email_Notify_Failure_Work",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DeleteFromWork",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@pipeline().parameters.EmailTo",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.SourceFile",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "Email_Notify_Failure_Raw",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DeleteFromRaw",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@pipeline().parameters.EmailTo",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.SourceFile",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "DeleteFromBlobWork",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "DeleteFromRaw",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Blob_work",
								"type": "DatasetReference",
								"parameters": {}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "AzureBlobStorage_ls",
									"type": "LinkedServiceReference"
								},
								"path": "log"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": false,
								"wildcardFileName": {
									"value": "@{pipeline().parameters.wildcard_file_path_work}",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Email_Notify_Failure_BlobWork",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DeleteFromBlobWork",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@pipeline().parameters.EmailTo",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.SourceFile",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "Input_File_Prefix",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "DeleteFromWork",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "input_file_prefix",
							"value": {
								"value": "@substring(pipeline().parameters.SourceFile,0,lastindexof(pipeline().parameters.SourceFile,'_'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "File_Name",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Input_File_Prefix",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Filename",
							"value": {
								"value": "@pipeline().parameters.SourceFile",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Source_Data_Dt",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "File_Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "sourceDataDt",
							"value": {
								"value": "@substring(pipeline().parameters.SourceFile,add(lastindexof(pipeline().parameters.SourceFile,'_'),1),8)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"env": {
						"type": "string"
					},
					"adls_storage_cntner": {
						"type": "string"
					},
					"wildcard_file_path_work": {
						"type": "string"
					},
					"wildcard_file_path_raw": {
						"type": "string"
					},
					"EmailTo": {
						"type": "string"
					},
					"SourceFile": {
						"type": "string"
					}
				},
				"variables": {
					"input_file_prefix": {
						"type": "String"
					},
					"Filename": {
						"type": "String"
					},
					"sourceDataDt": {
						"type": "String"
					}
				},
				"folder": {
					"name": "DevOps"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-18T16:21:11Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ADLS_work')]",
				"[concat(variables('factoryId'), '/datasets/ADLS_raw')]",
				"[concat(variables('factoryId'), '/pipelines/EmailNotification')]",
				"[concat(variables('factoryId'), '/datasets/Blob_work')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Adhoc_Cleanup')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will perform the adhoc clean up of Raw, Struct, Reject and Prep zones.\n\nInstructions:\nFor Raw Zone Cleanup: raw_cleanup_ind should be equal to Y and data filename(wildcard not supported) should be populated.\nFor Struct Zone Cleanup: struct_cleanup_ind should be equal to Y and struct_table_name & struct_filter should not be empty.\nFor Prep Zone Cleanup: prep_cleanup_ind should be equal to Y and prep_table_name & prep_filter should not be empty.",
				"activities": [
					{
						"name": "Read_Env_File",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "Json",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Email_Notify_03",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details.')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "DL_BA_Finance@aa.com",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.filename",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "Cleanup",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat('/',activity('Read_Env_File').output.firstRow.adls_storage_cntner,'/',activity('Read_Env_File').output.firstRow.azure_env,'/devops/Adhoc_Cleanup')",
								"type": "Expression"
							},
							"baseParameters": {
								"filename": {
									"value": "@pipeline().parameters.filename",
									"type": "Expression"
								},
								"storageaccountname": {
									"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_act)",
									"type": "Expression"
								},
								"env": {
									"value": "@activity('Read_Env_File').output.firstRow.azure_env",
									"type": "Expression"
								},
								"raw_cleanup_ind": {
									"value": "@pipeline().parameters.raw_cleanup_ind",
									"type": "Expression"
								},
								"struct_cleanup_ind": {
									"value": "@pipeline().parameters.struct_cleanup_ind",
									"type": "Expression"
								},
								"prep_cleanup_ind": {
									"value": "@pipeline().parameters.prep_cleanup_ind",
									"type": "Expression"
								},
								"struct_filter": {
									"value": "@pipeline().parameters.struct_filter",
									"type": "Expression"
								},
								"prep_filter": {
									"value": "@pipeline().parameters.prep_filter",
									"type": "Expression"
								},
								"adlsstoragecntner": {
									"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_cntner)",
									"type": "Expression"
								},
								"struct_table_name": {
									"value": "@pipeline().parameters.struct_table_name",
									"type": "Expression"
								},
								"prep_table_name": {
									"value": "@pipeline().parameters.prep_table_name",
									"type": "Expression"
								},
								"reject_cleanup_ind": {
									"value": "@pipeline().parameters.reject_cleanup_ind",
									"type": "Expression"
								},
								"reject_table_name": {
									"value": "@pipeline().parameters.reject_table_name",
									"type": "Expression"
								},
								"reject_filter": {
									"value": "@pipeline().parameters.reject_filter",
									"type": "Expression"
								},
								"filepath": {
									"value": "@pipeline().parameters.raw_subfolder_path",
									"type": "Expression"
								},
								"spii_ind": {
									"value": "@pipeline().parameters.spii_ind",
									"type": "Expression"
								},
								"pii_ind": {
									"value": "@pipeline().parameters.pii_ind",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Email_Notify_02",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Cleanup",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. \nLog : ' ,activity('Cleanup').output.runPageUrl)",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.filename",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "Email_Notify_01",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Cleanup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('Adhoc Cleanup completed successfully. Please verify the notebook log for more details. Log : ' ,activity('Cleanup').output.runPageUrl)",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.filename",
									"type": "Expression"
								},
								"Status": "Success"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"raw_cleanup_ind": {
						"type": "string",
						"defaultValue": "N"
					},
					"struct_cleanup_ind": {
						"type": "string",
						"defaultValue": "N"
					},
					"prep_cleanup_ind": {
						"type": "string",
						"defaultValue": "N"
					},
					"filename": {
						"type": "string",
						"defaultValue": " NA"
					},
					"struct_table_name": {
						"type": "string",
						"defaultValue": " "
					},
					"struct_filter": {
						"type": "string",
						"defaultValue": " "
					},
					"prep_table_name": {
						"type": "string",
						"defaultValue": " "
					},
					"prep_filter": {
						"type": "string",
						"defaultValue": " "
					},
					"reject_table_name": {
						"type": "string",
						"defaultValue": " "
					},
					"reject_filter": {
						"type": "string",
						"defaultValue": " "
					},
					"raw_subfolder_path": {
						"type": "string",
						"defaultValue": "dev/rvact/YQYR"
					},
					"reject_cleanup_ind": {
						"type": "string",
						"defaultValue": "N"
					},
					"spii_ind": {
						"type": "string",
						"defaultValue": "N"
					},
					"pii_ind": {
						"type": "string",
						"defaultValue": "Y"
					}
				},
				"folder": {
					"name": "DevOps"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-18T16:21:11Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json')]",
				"[concat(variables('factoryId'), '/pipelines/EmailNotification')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDatabricks_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Adhoc_Cleanup_bkp')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will perform the adhoc clean up of Raw, Struct, Reject and Prep zones.\n\nInstructions:\nFor Raw Zone Cleanup: raw_cleanup_ind should be equal to Y and data filename(wildcard not supported) should be populated.\nFor Struct Zone Cleanup: struct_cleanup_ind should be equal to Y and struct_table_name & struct_filter should not be empty.\nFor Prep Zone Cleanup: prep_cleanup_ind should be equal to Y and prep_table_name & prep_filter should not be empty.",
				"activities": [
					{
						"name": "Read_Env_File",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "Json",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Email_Notify_03",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details.')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "DL_BA_Finance@aa.com",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.filename",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "Cleanup",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat('/',activity('Read_Env_File').output.firstRow.adls_storage_cntner,'/',activity('Read_Env_File').output.firstRow.azure_env,'/devops/Adhoc_Cleanup')",
								"type": "Expression"
							},
							"baseParameters": {
								"filename": {
									"value": "@pipeline().parameters.filename",
									"type": "Expression"
								},
								"storageaccountname": {
									"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_act)",
									"type": "Expression"
								},
								"env": {
									"value": "@activity('Read_Env_File').output.firstRow.azure_env",
									"type": "Expression"
								},
								"raw_cleanup_ind": {
									"value": "@pipeline().parameters.raw_cleanup_ind",
									"type": "Expression"
								},
								"struct_cleanup_ind": {
									"value": "@pipeline().parameters.struct_cleanup_ind",
									"type": "Expression"
								},
								"prep_cleanup_ind": {
									"value": "@pipeline().parameters.prep_cleanup_ind",
									"type": "Expression"
								},
								"struct_filter": {
									"value": "@pipeline().parameters.struct_filter",
									"type": "Expression"
								},
								"prep_filter": {
									"value": "@pipeline().parameters.prep_filter",
									"type": "Expression"
								},
								"adlsstoragecntner": {
									"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_cntner)",
									"type": "Expression"
								},
								"struct_table_name": {
									"value": "@pipeline().parameters.struct_table_name",
									"type": "Expression"
								},
								"prep_table_name": {
									"value": "@pipeline().parameters.prep_table_name",
									"type": "Expression"
								},
								"reject_cleanup_ind": {
									"value": "@pipeline().parameters.reject_cleanup_ind",
									"type": "Expression"
								},
								"reject_table_name": {
									"value": "@pipeline().parameters.reject_table_name",
									"type": "Expression"
								},
								"reject_filter": {
									"value": "@pipeline().parameters.reject_filter",
									"type": "Expression"
								},
								"filepath": {
									"value": "@pipeline().parameters.raw_subfolder_path",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Email_Notify_02",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Cleanup",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. \nLog : ' ,activity('Cleanup').output.runPageUrl)",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.filename",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "Email_Notify_01",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Cleanup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('Adhoc Cleanup completed successfully. Please verify the notebook log for more details. Log : ' ,activity('Cleanup').output.runPageUrl)",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.filename",
									"type": "Expression"
								},
								"Status": "Success"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"raw_cleanup_ind": {
						"type": "string",
						"defaultValue": "N"
					},
					"struct_cleanup_ind": {
						"type": "string",
						"defaultValue": "N"
					},
					"prep_cleanup_ind": {
						"type": "string",
						"defaultValue": "N"
					},
					"filename": {
						"type": "string",
						"defaultValue": " NA"
					},
					"struct_table_name": {
						"type": "string",
						"defaultValue": " "
					},
					"struct_filter": {
						"type": "string",
						"defaultValue": " "
					},
					"prep_table_name": {
						"type": "string",
						"defaultValue": " "
					},
					"prep_filter": {
						"type": "string",
						"defaultValue": " "
					},
					"reject_table_name": {
						"type": "string",
						"defaultValue": " "
					},
					"reject_filter": {
						"type": "string",
						"defaultValue": " "
					},
					"raw_subfolder_path": {
						"type": "string",
						"defaultValue": "dev/rvact/YQYR"
					},
					"reject_cleanup_ind": {
						"type": "string",
						"defaultValue": "Y"
					}
				},
				"folder": {
					"name": "DevOps"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-18T16:21:11Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json')]",
				"[concat(variables('factoryId'), '/pipelines/EmailNotification')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDatabricks_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Adhoc_Table_Optimization')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will perform the adhoc optimization on Struct, Reject and Prep tables.\n\nInstructions:\nFor a specific or individual table optimization input the STRUCT or PREP or BOTH in the parameter value AND frequency value cannot be blank.\n   input D for Daily, W for Weekly, and M for Monthly\n\nJust run the pipeline for all tables optimization ",
				"activities": [
					{
						"name": "Read_Env_File",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "Json",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Email_Notify_03",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details.')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "DL_BA_Finance@aa.com",
									"type": "Expression"
								},
								"Status": {
									"value": "Fail",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Table_Optimization",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat('/',activity('Read_Env_File').output.firstRow.adls_storage_cntner,'/',activity('Read_Env_File').output.firstRow.azure_env,'/devops/Table_Optimization')",
								"type": "Expression"
							},
							"baseParameters": {
								"struct_table_name": {
									"value": "@pipeline().parameters.struct_table_name",
									"type": "Expression"
								},
								"prep_table_name": {
									"value": "@pipeline().parameters.prep_table_name",
									"type": "Expression"
								},
								"env": {
									"value": "@activity('Read_Env_File').output.firstRow.azure_env",
									"type": "Expression"
								},
								"adls_storage_cntner": {
									"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_cntner)",
									"type": "Expression"
								},
								"frequency": {
									"value": "@pipeline().parameters.frequency",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Email_Notify_02",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Table_Optimization",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. \nLog : ' ,activity('Table_Optimization').output.runPageUrl)",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
									"type": "Expression"
								},
								"Status": {
									"value": "Fail",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Email_Notify_01",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Table_Optimization",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('Adhoc Table_Optimization completed successfully. Please verify the notebook log for more details. Log : ' ,activity('Table_Optimization').output.runPageUrl)",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
									"type": "Expression"
								},
								"Status": {
									"value": "Success",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"struct_table_name": {
						"type": "string",
						"defaultValue": " "
					},
					"prep_table_name": {
						"type": "string",
						"defaultValue": " "
					},
					"frequency": {
						"type": "string",
						"defaultValue": "D"
					}
				},
				"folder": {
					"name": "DevOps"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-18T16:21:11Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json')]",
				"[concat(variables('factoryId'), '/pipelines/EmailNotification')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDatabricks_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyPipeline_onetimecopy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_opy",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "rawzone//"
							},
							{
								"name": "Destination",
								"value": "structzone//"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"maxConcurrentConnections": 10,
									"recursive": true,
									"modifiedDatetimeStart": "2022-06-09T00:00:00.013Z",
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 0
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"maxConcurrentConnections": 10
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "AzureBlobStorage_ls",
										"type": "LinkedServiceReference"
									},
									"path": "runlogs"
								}
							},
							"dataIntegrationUnits": 16
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_opy",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_opy",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Azuretraining"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataset_opy')]",
				"[concat(variables('factoryId'), '/datasets/DestinationDataset_opy')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy_or_Move_files_from_ADLS_to_Blobstorage')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is a common ADF pipeline that can be used to copy/move the files  between the ADLS and local blob storage.\n\n*wild card is supported.",
				"activities": [
					{
						"name": "Read_Env_File",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "Json",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Email_Notify_Success",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If Condition1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('Pipeline execution is successful')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('Read_Env_File').output.firstRow.succ_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.Filename",
									"type": "Expression"
								},
								"Status": "Success"
							}
						}
					},
					{
						"name": "Email_Notify_Failure_02",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If Condition1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.Filename",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "Email_Notify_Failure_01",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('Could not find or unable to read job params json file. Please check the logs for more details.')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "DL_BA_Finance@aa.com",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.Filename",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.Move_Ind,'Y')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Copy_Files1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.01:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"maxConcurrentConnections": 1,
												"recursive": false,
												"wildcardFileName": {
													"value": "@concat(pipeline().parameters.Filename,'*')",
													"type": "Expression"
												},
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false
									},
									"inputs": [
										{
											"referenceName": "ADLS_generic",
											"type": "DatasetReference",
											"parameters": {
												"complete_path": {
													"value": "@pipeline().parameters.From_Folder",
													"type": "Expression"
												},
												"adls_storage_cntner": {
													"value": "@activity('Read_Env_File').output.firstRow.adls_storage_cntner",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Blob_Binary_Generic",
											"type": "DatasetReference",
											"parameters": {
												"ContainerName": {
													"value": "@pipeline().parameters.To_Folder",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy_Files",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.01:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"maxConcurrentConnections": 1,
												"recursive": false,
												"wildcardFileName": {
													"value": "@concat(pipeline().parameters.Filename,'*')",
													"type": "Expression"
												},
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false
									},
									"inputs": [
										{
											"referenceName": "ADLS_generic",
											"type": "DatasetReference",
											"parameters": {
												"complete_path": {
													"value": "@pipeline().parameters.From_Folder",
													"type": "Expression"
												},
												"adls_storage_cntner": {
													"value": "@activity('Read_Env_File').output.firstRow.adls_storage_cntner",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Blob_Binary_Generic",
											"type": "DatasetReference",
											"parameters": {
												"ContainerName": {
													"value": "@pipeline().parameters.To_Folder",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "DeleteFromSource",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Copy_Files",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ADLS_generic",
											"type": "DatasetReference",
											"parameters": {
												"complete_path": {
													"value": "@pipeline().parameters.From_Folder",
													"type": "Expression"
												},
												"adls_storage_cntner": {
													"value": "@activity('Read_Env_File').output.firstRow.adls_storage_cntner",
													"type": "Expression"
												}
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "AzureBlobStorage_ls",
												"type": "LinkedServiceReference"
											},
											"path": "log"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": false,
											"wildcardFileName": {
												"value": "@{concat(pipeline().parameters.Filename,'*')}",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Filename": {
						"type": "string",
						"defaultValue": "NA"
					},
					"From_Folder": {
						"type": "string",
						"defaultValue": "dev/raw/"
					},
					"To_Folder": {
						"type": "string",
						"defaultValue": "landing"
					},
					"Move_Ind": {
						"type": "string",
						"defaultValue": "N"
					}
				},
				"folder": {
					"name": "DevOps"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-18T16:21:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json')]",
				"[concat(variables('factoryId'), '/pipelines/EmailNotification')]",
				"[concat(variables('factoryId'), '/datasets/ADLS_generic')]",
				"[concat(variables('factoryId'), '/datasets/Blob_Binary_Generic')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy_or_Move_files_within_Blobstorage_containers')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is a common ADF pipeline that can be used to copy/move the files  between the folders(containers) within the local blob storage.\n\n*wild card is supported.",
				"activities": [
					{
						"name": "Read_Env_File",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "Json",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Email_Notify_Success",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If Condition1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('Pipeline execution is successful')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('Read_Env_File').output.firstRow.succ_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.Filename",
									"type": "Expression"
								},
								"Status": "Success"
							}
						}
					},
					{
						"name": "Email_Notify_Failure_02",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If Condition1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.Filename",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "Email_Notify_Failure_01",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('Could not find or unable to read job params json file. Please check the logs for more details.')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "DL_BA_Finance@aa.com",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.Filename",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.Move_Ind,'Y')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Copy_Files1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.01:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"maxConcurrentConnections": 1,
												"recursive": false,
												"wildcardFileName": {
													"value": "@concat(pipeline().parameters.Filename,'*')",
													"type": "Expression"
												},
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false
									},
									"inputs": [
										{
											"referenceName": "Blob_Binary_Generic",
											"type": "DatasetReference",
											"parameters": {
												"ContainerName": {
													"value": "@pipeline().parameters.From_Folder",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Blob_Binary_Generic",
											"type": "DatasetReference",
											"parameters": {
												"ContainerName": {
													"value": "@pipeline().parameters.To_Folder",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy_Files",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.01:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"maxConcurrentConnections": 1,
												"recursive": false,
												"wildcardFileName": {
													"value": "@concat(pipeline().parameters.Filename,'*')",
													"type": "Expression"
												},
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false
									},
									"inputs": [
										{
											"referenceName": "Blob_Binary_Generic",
											"type": "DatasetReference",
											"parameters": {
												"ContainerName": {
													"value": "@pipeline().parameters.From_Folder",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Blob_Binary_Generic",
											"type": "DatasetReference",
											"parameters": {
												"ContainerName": {
													"value": "@pipeline().parameters.To_Folder",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "DeleteFromSource",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Copy_Files",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "Blob_Binary_Generic",
											"type": "DatasetReference",
											"parameters": {
												"ContainerName": {
													"value": "@pipeline().parameters.From_Folder",
													"type": "Expression"
												}
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "AzureBlobStorage_ls",
												"type": "LinkedServiceReference"
											},
											"path": "log"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": false,
											"wildcardFileName": {
												"value": "@{concat(pipeline().parameters.Filename,'*')}",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Filename": {
						"type": "string",
						"defaultValue": "NA"
					},
					"From_Folder": {
						"type": "string",
						"defaultValue": "NA"
					},
					"To_Folder": {
						"type": "string",
						"defaultValue": "NA"
					},
					"Move_Ind": {
						"type": "string",
						"defaultValue": "N"
					}
				},
				"folder": {
					"name": "DevOps"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-18T16:21:11Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json')]",
				"[concat(variables('factoryId'), '/pipelines/EmailNotification')]",
				"[concat(variables('factoryId'), '/datasets/Blob_Binary_Generic')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete files older than 30 days')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Please input a folder path as the parameter for this pipeline, and the pipeline will delete files which were last modified more than 30 days ago under the particular folder path.",
				"activities": [
					{
						"name": "DeleteFiles",
						"description": "Connect to your storage account to save the log file.",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinaryDatasetForDeleteActivity1",
								"type": "DatasetReference",
								"parameters": {
									"FolderPath": {
										"value": "@pipeline().parameters.SourceFolder",
										"type": "Expression"
									},
									"Directory": {
										"value": "@pipeline().parameters.SourceDirectory",
										"type": "Expression"
									}
								}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "AzureDataLakeStorage_ls",
									"type": "LinkedServiceReference"
								},
								"path": {
									"value": "@pipeline().parameters.LoggingPath",
									"type": "Expression"
								}
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"modifiedDatetimeEnd": {
									"value": "@{adddays(pipeline().TriggerTime, -1)}",
									"type": "Expression"
								},
								"wildcardFileName": "*"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceFolder": {
						"type": "string",
						"defaultValue": "structzone"
					},
					"SourceDirectory": {
						"type": "string",
						"defaultValue": "STRUCT_ARCH"
					},
					"LoggingPath": {
						"type": "string",
						"defaultValue": "/transiant"
					}
				},
				"folder": {
					"name": "Azuretraining"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/BinaryDatasetForDeleteActivity1')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EmailNotification')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will send an email notification",
				"activities": [
					{
						"name": "SendEmail",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "https://prod-95.eastus.logic.azure.com:443/workflows/8f214fed9cfe41e3abb5f0b81ea3ef06/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=IxdWfrleWW-nvUPu7VHZdN5DH9e-Hzhvf1hpA5vcJtA",
								"type": "Expression"
							},
							"method": "POST",
							"headers": {
								"Content-Type": "application/json"
							},
							"body": {
								"value": "{\r\n    \"message\" : \"This is a custom dynamic message from your pipeline with run ID @{pipeline().RunId}.\",\r\n    \"dataFactoryName\" : \"@{pipeline().DataFactory}\", \r\n    \"pipelineName\" : \"@{pipeline().Pipeline}\", \r\n    \"receiver\" : \"@{pipeline().parameters.receiver}\"\r\n   }",
								"type": "Expression"
							},
							"linkedServices": [
								{
									"referenceName": "AzureDataLakeStorage_ls",
									"type": "LinkedServiceReference"
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"DataFactoryName": {
						"type": "string",
						"defaultValue": "Default"
					},
					"PipelineName": {
						"type": "string",
						"defaultValue": "Default"
					},
					"Message": {
						"type": "string",
						"defaultValue": "Default"
					},
					"receiver": {
						"type": "string",
						"defaultValue": "Default"
					},
					"SourceFile": {
						"type": "string",
						"defaultValue": "Default"
					}
				},
				"folder": {
					"name": "LogicApp_EmailNotify"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-18T16:21:11Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EmailNotification_Pipelines')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Email_Notification",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "https://prod2-29.eastus2.logic.azure.com:443/workflows/67cae0b99360404da450c207d5f89588/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=4Wj2YAfbM-UokQivut2TWfbLXqb9ZKh13CY37pJLM3g",
								"type": "Expression"
							},
							"method": "POST",
							"headers": {
								"Content-Type": {
									"value": "application/json",
									"type": "Expression"
								}
							},
							"body": {
								"value": "{\r\n    \"message\" : \"This is a custom dynamic message from your pipeline with run ID @{pipeline().RunId}.\",\r\n    \"dataFactoryName\" : \"@{pipeline().DataFactory}\", \r\n    \"pipelineName\" : \"@{pipeline().Pipeline}\", \r\n    \"receiver\" : \"@{pipeline().parameters.receiver}\"\r\n   }",
								"type": "Expression"
							},
							"linkedServices": [
								{
									"referenceName": "AzureDataLakeStorage_ls",
									"type": "LinkedServiceReference"
								}
							],
							"turnOffAsync": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"DataFactoryName": {
						"type": "string"
					},
					"PipelineName": {
						"type": "string"
					},
					"Message": {
						"type": "string"
					},
					"receiver": {
						"type": "string"
					},
					"SourceFile": {
						"type": "string"
					},
					"Status": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Azuretraining"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Onetime_Table_Creation_Notebook')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is a common ADF pipeline that will be used to execute the onetime table creation notebooks.",
				"activities": [
					{
						"name": "Read_Env_File",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "Json",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Notebook",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.Notebookpath,'/',pipeline().parameters.Notebookname)",
								"type": "Expression"
							},
							"baseParameters": {
								"Env": {
									"value": "@activity('Read_Env_File').output.firstRow.azure_env",
									"type": "Expression"
								},
								"Storageaccountname": {
									"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_act)",
									"type": "Expression"
								},
								"Structtablename": {
									"value": "@pipeline().parameters.Structtablename",
									"type": "Expression"
								},
								"Rejecttablename": {
									"value": "@pipeline().parameters.Rejecttablename",
									"type": "Expression"
								},
								"Preptablename": {
									"value": "@pipeline().parameters.Preptablename",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Email_Notify_Success",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Notebook",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('Onetime notebook execution is successful')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('Read_Env_File').output.firstRow.succ_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "NA",
									"type": "Expression"
								},
								"Status": "Success"
							}
						}
					},
					{
						"name": "Email_Notify_Failure",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Notebook",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "NA",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "Email_Notify_09",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('Could not find or unable to read job params json file. Please check the logs for more details.')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "DL_BA_Finance@aa.com",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "NA",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Notebookpath": {
						"type": "string",
						"defaultValue": "/rvact/dev/onetime"
					},
					"Notebookname": {
						"type": "string",
						"defaultValue": "YQYR_Onetime_Table_Creation"
					},
					"Structtablename": {
						"type": "string",
						"defaultValue": "NA"
					},
					"Rejecttablename": {
						"type": "string",
						"defaultValue": "NA"
					},
					"Preptablename": {
						"type": "string",
						"defaultValue": "NA"
					}
				},
				"folder": {
					"name": "DevOps"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-18T16:21:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDatabricks_ls')]",
				"[concat(variables('factoryId'), '/pipelines/EmailNotification')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Onetime_Table_Creation_Notebook_DElookup')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is a common ADF pipeline that will be used to execute the onetime table creation notebooks.",
				"activities": [
					{
						"name": "Read_Env_File",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "Json",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Notebook",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.Notebookpath,'/',pipeline().parameters.Notebookname)",
								"type": "Expression"
							},
							"baseParameters": {
								"Env": {
									"value": "@activity('Read_Env_File').output.firstRow.azure_env",
									"type": "Expression"
								},
								"Storageaccountname": {
									"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_act)",
									"type": "Expression"
								},
								"lookupTable": {
									"value": "@pipeline().parameters.lookupTable",
									"type": "Expression"
								},
								"lookupTableDB": {
									"value": "@pipeline().parameters.lookupTableDB",
									"type": "Expression"
								},
								"filename": {
									"value": "@pipeline().parameters.filename",
									"type": "Expression"
								},
								"adls_storage_cntner": {
									"value": "@pipeline().parameters.adls_storage_cntner",
									"type": "Expression"
								},
								"l_storage_account_name": {
									"value": "@pipeline().parameters.l_storage_account_name",
									"type": "Expression"
								},
								"adb_par": {
									"value": "@string(activity('Read_Env_File').output.firstRow.adb_par)",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Email_Notify_Success",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Notebook",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('Onetime notebook execution is successful')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('Read_Env_File').output.firstRow.succ_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "NA",
									"type": "Expression"
								},
								"Status": "Success"
							}
						}
					},
					{
						"name": "Email_Notify_Failure",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Notebook",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "suresh.pathipati@aa.com",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "NA",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "Email_Notify_09",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('Could not find or unable to read job params json file. Please check the logs for more details.')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "DL_BA_Finance@aa.com",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "NA",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Notebookpath": {
						"type": "string",
						"defaultValue": "/rvact/dev/onetime/"
					},
					"Notebookname": {
						"type": "string",
						"defaultValue": "Create_lookup_table_IDEC"
					},
					"lookupTable": {
						"type": "string",
						"defaultValue": "idec_Lookup"
					},
					"lookupTableDB": {
						"type": "string",
						"defaultValue": "rvact_dev_struct"
					},
					"filename": {
						"type": "string",
						"defaultValue": "IDEC_CLEAN_metadata.json"
					},
					"adls_storage_cntner": {
						"type": "string",
						"defaultValue": "rvact"
					},
					"l_storage_account_name": {
						"type": "string",
						"defaultValue": "banzeausrvactdev"
					}
				},
				"folder": {
					"name": "DevOps"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-18T16:21:11Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDatabricks_ls')]",
				"[concat(variables('factoryId'), '/pipelines/EmailNotification')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Onetime_Table_and_View_Creation_Notebook')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is a common ADF pipeline that will be used to execute the onetime table  & view creation notebooks.",
				"activities": [
					{
						"name": "Read_Env_File",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "Json",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Notebook",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.Notebookpath,'/',pipeline().parameters.Notebookname)",
								"type": "Expression"
							},
							"baseParameters": {
								"env": {
									"value": "@activity('Read_Env_File').output.firstRow.azure_env",
									"type": "Expression"
								},
								"Storageaccountname": {
									"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_act)",
									"type": "Expression"
								},
								"Structtablename": {
									"value": "@pipeline().parameters.Structtablename",
									"type": "Expression"
								},
								"Rejecttablename": {
									"value": "@pipeline().parameters.Rejecttablename",
									"type": "Expression"
								},
								"Preptablename": {
									"value": "@pipeline().parameters.Preptablename",
									"type": "Expression"
								},
								"adls_storage_cntner": {
									"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_cntner)",
									"type": "Expression"
								},
								"adb_par": {
									"value": "@string(activity('Read_Env_File').output.firstRow.adb_par)",
									"type": "Expression"
								},
								"feed_name": {
									"value": "@pipeline().parameters.feed_name",
									"type": "Expression"
								},
								"filename": {
									"value": "@pipeline().parameters.file_name",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Email_Notify_Success",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Notebook",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('Onetime notebook execution is successful')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('Read_Env_File').output.firstRow.succ_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "NA",
									"type": "Expression"
								},
								"Status": "Success"
							}
						}
					},
					{
						"name": "Email_Notify_Failure",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Notebook",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "NA",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "Email_Notify_09",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('Could not find or unable to read job params json file. Please check the logs for more details.')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "DL_BA_Finance@aa.com",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "NA",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Notebookpath": {
						"type": "string",
						"defaultValue": "/rvact/dev/onetime"
					},
					"Notebookname": {
						"type": "string",
						"defaultValue": "AGDECURR_Onetime_Table_Creation"
					},
					"Structtablename": {
						"type": "string",
						"defaultValue": "NA"
					},
					"Rejecttablename": {
						"type": "string",
						"defaultValue": "NA"
					},
					"Preptablename": {
						"type": "string",
						"defaultValue": "NA"
					},
					"feed_name": {
						"type": "string",
						"defaultValue": "AGDECURR"
					},
					"file_name": {
						"type": "string",
						"defaultValue": "RAC_AGDECURR_20210317000000.dat.gz"
					}
				},
				"folder": {
					"name": "DevOps"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-18T16:21:11Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDatabricks_ls')]",
				"[concat(variables('factoryId'), '/pipelines/EmailNotification')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Onetime_View_Creation_Notebook')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is a common ADF pipeline that will be used to execute the onetime VIEW creation notebooks.\nparameter file_name should be genetic",
				"activities": [
					{
						"name": "Read_Env_File",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "Json",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Notebook",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.Notebookpath,'/',pipeline().parameters.Notebookname)",
								"type": "Expression"
							},
							"baseParameters": {
								"env": {
									"value": "@activity('Read_Env_File').output.firstRow.azure_env",
									"type": "Expression"
								},
								"adls_storage_cntner": {
									"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_cntner)",
									"type": "Expression"
								},
								"feed_name": {
									"value": "@pipeline().parameters.feed_name",
									"type": "Expression"
								},
								"filename": {
									"value": "@pipeline().parameters.file_name",
									"type": "Expression"
								},
								"adb_par": {
									"value": "@string(activity('Read_Env_File').output.firstRow.adb_par)",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Email_Notify_Success",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Notebook",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('Onetime notebook execution is successful')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('Read_Env_File').output.firstRow.succ_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "NA",
									"type": "Expression"
								},
								"Status": "Success"
							}
						}
					},
					{
						"name": "Email_Notify_Failure",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Notebook",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "NA",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "Email_Notify_09",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('Could not find or unable to read job params json file. Please check the logs for more details.')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "DL_BA_Finance@aa.com",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "NA",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Notebookpath": {
						"type": "string",
						"defaultValue": "/rvact/dev/onetime/"
					},
					"Notebookname": {
						"type": "string",
						"defaultValue": "CDC_Onetime_View_Creation"
					},
					"feed_name": {
						"type": "string",
						"defaultValue": "AGDECURR"
					},
					"file_name": {
						"type": "string",
						"defaultValue": "RAC_AGDECURR_20210317000000.dat.gz"
					}
				},
				"folder": {
					"name": "DevOps"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-18T16:21:11Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDatabricks_ls')]",
				"[concat(variables('factoryId'), '/pipelines/EmailNotification')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/aztraining_adf_copydata_df')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "this pipeline is used to copy data from raw zone to structured zone ",
				"activities": [
					{
						"name": "Raw to struct data copy",
						"description": "raw to struct data copy in adf",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Filter_condition",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": false,
							"dataIntegrationUnits": 8
						},
						"inputs": [
							{
								"referenceName": "Binary_blob_training_ds",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Binary_adls_training_ds",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete raw zone data",
						"description": "this will delete the data from source blob after successfully processed files ",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Raw to struct data copy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Binary_blob_training_ds",
								"type": "DatasetReference",
								"parameters": {}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "AzureBlobStorage_ls",
									"type": "LinkedServiceReference"
								},
								"path": "runlogs"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Get Metadata_blob",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Binary_Getmetatdata",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Filter_condition",
						"description": "this activity will filter the list of files ",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Metadata_blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata_blob').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@contains(activity('Get Metadata_blob').output.childItems[0].name,item().name)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute Pipeline_Email_Notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Get Metadata_blob",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification_Pipelines",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"receiver": {
									"value": "eclasserasureshaz@outlook.com",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "LNDG_TYCO_CUST_CONVIT.txt",
									"type": "Expression"
								},
								"Status": {
									"value": "\"Fail\"",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"TokenID": {
						"type": "String"
					},
					"Value": {
						"type": "String"
					},
					"Runtokenvalue": {
						"type": "String"
					},
					"TokenPath": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Azuretraining"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Binary_blob_training_ds')]",
				"[concat(variables('factoryId'), '/datasets/Binary_adls_training_ds')]",
				"[concat(variables('factoryId'), '/datasets/Binary_Getmetatdata')]",
				"[concat(variables('factoryId'), '/pipelines/EmailNotification_Pipelines')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_TYR_Data_Ingestion_Incremental')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will ingest YQYR data till Mosaic",
				"activities": [
					{
						"name": "Read_Env_File",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "Json",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "TYR_Load",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter_Individual_File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [
							{
								"name": "Filename",
								"value": "String"
							}
						],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter_Individual_File').output.Value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "File_Audit",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "Copy_From_Landing_To_Work",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": {
											"value": "@concat('/',activity('Read_Env_File').output.firstRow.adls_storage_cntner,'/',activity('Read_Env_File').output.firstRow.azure_env,'/audit/','File_Validations_new')",
											"type": "Expression"
										},
										"baseParameters": {
											"filename": {
												"value": "@{item().name}",
												"type": "Expression"
											},
											"sourcetm": {
												"value": "@{substring(item().name,add(indexof(item().name,'.'),-14),14)}",
												"type": "Expression"
											},
											"storageaccountname": {
												"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_act)",
												"type": "Expression"
											},
											"env": {
												"value": "@activity('Read_Env_File').output.firstRow.azure_env",
												"type": "Expression"
											},
											"adb_par": {
												"value": "@string(activity('Read_Env_File').output.firstRow.adb_par)",
												"type": "Expression"
											},
											"feed_name": {
												"value": "@pipeline().parameters.feed_name",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureDatabricks_ls",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "IsValidFile",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "File_Audit",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@startswith(activity('File_Audit').output.runOutput,'Valid')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Copy_data_to_Reject",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "AzureBlobStorageReadSettings",
															"recursive": false,
															"wildcardFileName": {
																"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'.*')}",
																"type": "Expression"
															}
														},
														"formatSettings": {
															"type": "BinaryReadSettings"
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														}
													},
													"enableStaging": false,
													"skipErrorFile": {
														"fileMissing": true
													},
													"validateDataConsistency": false
												},
												"inputs": [
													{
														"referenceName": "Blob",
														"type": "DatasetReference",
														"parameters": {}
													}
												],
												"outputs": [
													{
														"referenceName": "ADLS_Reject",
														"type": "DatasetReference",
														"parameters": {
															"env": {
																"value": "@activity('Read_Env_File').output.firstRow.azure_env",
																"type": "Expression"
															},
															"adls_storage_cntner": {
																"value": "@activity('Read_Env_File').output.firstRow.adls_storage_cntner",
																"type": "Expression"
															},
															"input_file_prefix": {
																"value": "@substring(pipeline().parameters.filename,0,lastindexof(pipeline().parameters.filename,'_'))",
																"type": "Expression"
															},
															"sourceDataDt": {
																"value": "@substring(pipeline().parameters.filename,add(lastindexof(pipeline().parameters.filename,'_'),1),8)",
																"type": "Expression"
															},
															"Filename": {
																"value": "@pipeline().parameters.Filename",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "Delete_Reject_Files_From_Landing",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "Copy_data_to_Reject",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "Blob",
														"type": "DatasetReference",
														"parameters": {}
													},
													"logStorageSettings": {
														"linkedServiceName": {
															"referenceName": "AzureBlobStorage_ls",
															"type": "LinkedServiceReference"
														},
														"path": "log"
													},
													"enableLogging": true,
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": false,
														"wildcardFileName": {
															"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'*')}",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "Email_Notify_02",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "Copy_data_to_Reject",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "EmailNotification",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"DataFactoryName": {
															"value": "@pipeline().DataFactory",
															"type": "Expression"
														},
														"PipelineName": {
															"value": "@pipeline().Pipeline",
															"type": "Expression"
														},
														"Message": {
															"value": "@if (startswith(activity('File_Audit').output.runOutput,'Mismatch'),concat('File Count does not match with trailer record count.',activity('File_Audit').output.runOutput,'. Input files are moved to the Reject folder and load process is skipped. Please check the logs for more details.'),if(startswith(activity('File_Audit').output.runOutput,'Already'),'File already exists in the RAW zone. Input files are moved to the Reject folder and load process is skipped. Please check the logs for more details.','File name contains invalid date timestamp. Input files are moved to the Reject folder and load process is skipped. Please check the logs for more details.'))",
															"type": "Expression"
														},
														"EmailTo": {
															"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
															"type": "Expression"
														},
														"SourceFile": {
															"value": "@{item().name}",
															"type": "Expression"
														},
														"Status": {
															"value": "@if (startswith(activity('File_Audit').output.runOutput,'Mismatch'),'File Count mismatches with Trailer Count',if(startswith(activity('File_Audit').output.runOutput,'Already'),'Duplicate file','File name contains Invalid date timestamp'))",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "DeleteFromBlobWork_02",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "Delete_Reject_Files_From_Landing",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "Blob_work",
														"type": "DatasetReference",
														"parameters": {}
													},
													"logStorageSettings": {
														"linkedServiceName": {
															"referenceName": "AzureBlobStorage_ls",
															"type": "LinkedServiceReference"
														},
														"path": "log"
													},
													"enableLogging": true,
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": false,
														"wildcardFileName": {
															"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'.dat')}",
															"type": "Expression"
														}
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "WorkToStruct",
												"type": "DatabricksNotebook",
												"dependsOn": [
													{
														"activity": "Copy_From_Raw_To_Work",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"notebookPath": {
														"value": "@concat('/',activity('Read_Env_File').output.firstRow.adls_storage_cntner,'/',activity('Read_Env_File').output.firstRow.azure_env,'/struct/',pipeline().parameters.feed_name,'_Struct')",
														"type": "Expression"
													},
													"baseParameters": {
														"filename": {
															"value": "@{item().name}",
															"type": "Expression"
														},
														"env": {
															"value": "@activity('Read_Env_File').output.firstRow.azure_env",
															"type": "Expression"
														},
														"adb_par": {
															"value": "@string(activity('Read_Env_File').output.firstRow.adb_par)",
															"type": "Expression"
														},
														"feed_name": {
															"value": "@trim(pipeline().parameters.feed_name)",
															"type": "Expression"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureDatabricks_ls",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "Copy_From_Inbound_Raw",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.01:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "AzureBlobStorageReadSettings",
															"maxConcurrentConnections": 1,
															"recursive": false,
															"wildcardFileName": {
																"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'.*')}",
																"type": "Expression"
															}
														},
														"formatSettings": {
															"type": "BinaryReadSettings"
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														}
													},
													"enableStaging": false,
													"validateDataConsistency": false
												},
												"inputs": [
													{
														"referenceName": "Blob",
														"type": "DatasetReference",
														"parameters": {}
													}
												],
												"outputs": [
													{
														"referenceName": "ADLS_raw",
														"type": "DatasetReference",
														"parameters": {
															"env": {
																"value": "@activity('Read_Env_File').output.firstRow.azure_env",
																"type": "Expression"
															},
															"adls_storage_cntner": {
																"value": "@activity('Read_Env_File').output.firstRow.adls_storage_cntner",
																"type": "Expression"
															},
															"input_file_prefix": {
																"value": "@substring(pipeline().parameters.filename,0,lastindexof(pipeline().parameters.filename,'_'))",
																"type": "Expression"
															},
															"Filename": {
																"value": "@pipeline().parameters.Filename",
																"type": "Expression"
															},
															"sourceDataDt": {
																"value": "@substring(pipeline().parameters.filename,add(lastindexof(pipeline().parameters.filename,'_'),1),8)",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "Copy_From_Raw_To_Work",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "Copy_From_Inbound_Raw",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.01:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "AzureBlobFSReadSettings",
															"maxConcurrentConnections": 1,
															"recursive": false,
															"wildcardFolderPath": {
																"value": "@concat(activity('Read_Env_File').output.firstRow.azure_env,'/raw','/',substring(pipeline().parameters.filename,0,lastindexof(pipeline().parameters.filename,'_')),'/',substring(pipeline().parameters.filename,add(lastindexof(pipeline().parameters.filename,'_'),1),8))",
																"type": "Expression"
															},
															"wildcardFileName": {
																"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'.dat.gz')}",
																"type": "Expression"
															},
															"deleteFilesAfterCompletion": false
														},
														"formatSettings": {
															"type": "BinaryReadSettings"
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "ADLS_gzip",
														"type": "DatasetReference",
														"parameters": {
															"adls_storage_cntner": {
																"value": "@activity('Read_Env_File').output.firstRow.adls_storage_cntner",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "ADLS_work",
														"type": "DatasetReference",
														"parameters": {
															"env": {
																"value": "@activity('Read_Env_File').output.firstRow.azure_env",
																"type": "Expression"
															},
															"adls_storage_cntner": {
																"value": "@activity('Read_Env_File').output.firstRow.adls_storage_cntner",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "DeleteFromWork",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "Load_Batch_Audit",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "ADLS_work",
														"type": "DatasetReference",
														"parameters": {
															"env": {
																"value": "@activity('Read_Env_File').output.firstRow.azure_env",
																"type": "Expression"
															},
															"adls_storage_cntner": {
																"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_cntner)",
																"type": "Expression"
															}
														}
													},
													"logStorageSettings": {
														"linkedServiceName": {
															"referenceName": "AzureBlobStorage_ls",
															"type": "LinkedServiceReference"
														},
														"path": {
															"value": "log",
															"type": "Expression"
														}
													},
													"enableLogging": true,
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": false,
														"wildcardFileName": {
															"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'*')}",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "DeleteFromLanding",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "DeleteFromWork",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "Blob",
														"type": "DatasetReference",
														"parameters": {}
													},
													"logStorageSettings": {
														"linkedServiceName": {
															"referenceName": "AzureBlobStorage_ls",
															"type": "LinkedServiceReference"
														},
														"path": "log"
													},
													"enableLogging": true,
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": false,
														"wildcardFileName": {
															"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'*')}",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "StructToPrep",
												"type": "DatabricksNotebook",
												"dependsOn": [
													{
														"activity": "WorkToStruct",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"notebookPath": {
														"value": "@concat('/',activity('Read_Env_File').output.firstRow.adls_storage_cntner,'/',activity('Read_Env_File').output.firstRow.azure_env,'/prep/',pipeline().parameters.feed_name,'_Prep')",
														"type": "Expression"
													},
													"baseParameters": {
														"filename": {
															"value": "@{item().name}",
															"type": "Expression"
														},
														"env": {
															"value": "@activity('Read_Env_File').output.firstRow.azure_env",
															"type": "Expression"
														},
														"adb_par": {
															"value": "@string(activity('Read_Env_File').output.firstRow.adb_par)",
															"type": "Expression"
														},
														"feed_name": {
															"value": "@trim(pipeline().parameters.feed_name)",
															"type": "Expression"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureDatabricks_ls",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "Email_Notify_Success",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "DeleteFromBlobWork_03",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "EmailNotification",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"DataFactoryName": {
															"value": "@pipeline().DataFactory",
															"type": "Expression"
														},
														"PipelineName": {
															"value": "@pipeline().Pipeline",
															"type": "Expression"
														},
														"Message": {
															"value": "@{concat('Data ingestion is successfully completed for the above file.  ', replace(activity('File_Audit').output.runOutput, 'Valid-',''))}\n",
															"type": "Expression"
														},
														"EmailTo": {
															"value": "@activity('Read_Env_File').output.firstRow.succ_email_to",
															"type": "Expression"
														},
														"SourceFile": {
															"value": "@{item().name}",
															"type": "Expression"
														},
														"Status": "Success"
													}
												}
											},
											{
												"name": "Email_Notify_Cleanup_03",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "ADLS_Data_Cleanup_03",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "EmailNotification",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"DataFactoryName": {
															"value": "@pipeline().DataFactory",
															"type": "Expression"
														},
														"PipelineName": {
															"value": "@pipeline().Pipeline",
															"type": "Expression"
														},
														"Message": {
															"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
															"type": "Expression"
														},
														"EmailTo": {
															"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
															"type": "Expression"
														},
														"SourceFile": {
															"value": "@{item().name}",
															"type": "Expression"
														},
														"Status": "Fail"
													}
												}
											},
											{
												"name": "DeleteFromRaw_01",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "Copy_From_Inbound_Raw",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "ADLS_raw",
														"type": "DatasetReference",
														"parameters": {
															"env": {
																"value": "@activity('Read_Env_File').output.firstRow.azure_env",
																"type": "Expression"
															},
															"adls_storage_cntner": {
																"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_cntner)",
																"type": "Expression"
															},
															"input_file_prefix": {
																"value": "@variables('input_file_prefix')",
																"type": "Expression"
															},
															"Filename": {
																"value": "@pipeline().parameters.Filename",
																"type": "Expression"
															},
															"sourceDataDt": {
																"value": "@variables('sourceDataDt')",
																"type": "Expression"
															}
														}
													},
													"logStorageSettings": {
														"linkedServiceName": {
															"referenceName": "AzureBlobStorage_ls",
															"type": "LinkedServiceReference"
														},
														"path": {
															"value": "log",
															"type": "Expression"
														}
													},
													"enableLogging": true,
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": false,
														"wildcardFileName": {
															"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'*')}",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "Email_Notify_Cleanup_Raw_01",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "DeleteFromRaw_01",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "EmailNotification",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"DataFactoryName": {
															"value": "@pipeline().DataFactory",
															"type": "Expression"
														},
														"PipelineName": {
															"value": "@pipeline().Pipeline",
															"type": "Expression"
														},
														"Message": {
															"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
															"type": "Expression"
														},
														"EmailTo": {
															"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
															"type": "Expression"
														},
														"SourceFile": {
															"value": "@{item().name}",
															"type": "Expression"
														},
														"Status": "Fail"
													}
												}
											},
											{
												"name": "Email_Notify_Cleanup_01",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "ADLS_Data_Cleanup_01",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "EmailNotification",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"DataFactoryName": {
															"value": "@pipeline().DataFactory",
															"type": "Expression"
														},
														"PipelineName": {
															"value": "@pipeline().Pipeline",
															"type": "Expression"
														},
														"Message": {
															"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
															"type": "Expression"
														},
														"EmailTo": {
															"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
															"type": "Expression"
														},
														"SourceFile": {
															"value": "@{item().name}",
															"type": "Expression"
														},
														"Status": "Fail"
													}
												}
											},
											{
												"name": "Email_Notify_Cleanup_02",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "ADLS_Data_Cleanup_02",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "EmailNotification",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {}
												}
											},
											{
												"name": "Email_Notify_Failure_Raw_01",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "DeleteFromRaw_01",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "EmailNotification",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"DataFactoryName": {
															"value": "@pipeline().DataFactory",
															"type": "Expression"
														},
														"PipelineName": {
															"value": "@pipeline().Pipeline",
															"type": "Expression"
														},
														"Message": {
															"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
															"type": "Expression"
														},
														"EmailTo": {
															"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
															"type": "Expression"
														},
														"SourceFile": {
															"value": "@{item().name}",
															"type": "Expression"
														},
														"Status": "Fail"
													}
												}
											},
											{
												"name": "Email_Notify_Failure_Landing",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "DeleteFromLanding",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "EmailNotification",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"DataFactoryName": {
															"value": "@pipeline().DataFactory",
															"type": "Expression"
														},
														"PipelineName": {
															"value": "@pipeline().Pipeline",
															"type": "Expression"
														},
														"Message": {
															"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
															"type": "Expression"
														},
														"EmailTo": {
															"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
															"type": "Expression"
														},
														"SourceFile": {
															"value": "@{item().name}",
															"type": "Expression"
														},
														"Status": "Fail"
													}
												}
											},
											{
												"name": "Email_Notify_Failure_Work",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "DeleteFromWork",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "EmailNotification",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"DataFactoryName": {
															"value": "@pipeline().DataFactory",
															"type": "Expression"
														},
														"PipelineName": {
															"value": "@pipeline().Pipeline",
															"type": "Expression"
														},
														"Message": {
															"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
															"type": "Expression"
														},
														"EmailTo": {
															"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
															"type": "Expression"
														},
														"SourceFile": {
															"value": "@{item().name}",
															"type": "Expression"
														},
														"Status": "Fail"
													}
												}
											},
											{
												"name": "StructToMosaic",
												"type": "DatabricksNotebook",
												"dependsOn": [
													{
														"activity": "StructToPrep",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"notebookPath": {
														"value": "@concat('/',activity('Read_Env_File').output.firstRow.adls_storage_cntner,'/',activity('Read_Env_File').output.firstRow.azure_env,'/mosaic/YQYR_Mosaic_Export')",
														"type": "Expression"
													},
													"baseParameters": {
														"filename": {
															"value": "@{item().name}",
															"type": "Expression"
														},
														"env": {
															"value": "@activity('Read_Env_File').output.firstRow.azure_env",
															"type": "Expression"
														},
														"adb_par": {
															"value": "@string(activity('Read_Env_File').output.firstRow.adb_par)",
															"type": "Expression"
														},
														"feed_name": {
															"value": "@trim(pipeline().parameters.feed_name)",
															"type": "Expression"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureDatabricks_ls",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "Email_Notify_Cleanup_04",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "ADLS_Data_Cleanup_04",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "EmailNotification",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"DataFactoryName": {
															"value": "@pipeline().DataFactory",
															"type": "Expression"
														},
														"PipelineName": {
															"value": "@pipeline().Pipeline",
															"type": "Expression"
														},
														"Message": {
															"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
															"type": "Expression"
														},
														"EmailTo": {
															"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
															"type": "Expression"
														},
														"SourceFile": {
															"value": "@{item().name}",
															"type": "Expression"
														},
														"Status": "Fail"
													}
												}
											},
											{
												"name": "ADLS_Data_Cleanup_01",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "Copy_From_Raw_To_Work",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "ADLS Data Cleanup",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"env": {
															"value": "@activity('Read_Env_File').output.firstRow.azure_env",
															"type": "Expression"
														},
														"adls_storage_cntner": {
															"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_cntner)",
															"type": "Expression"
														},
														"wildcard_file_path_work": {
															"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'.dat')}",
															"type": "Expression"
														},
														"wildcard_file_path_raw": {
															"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'*')}",
															"type": "Expression"
														},
														"EmailTo": {
															"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
															"type": "Expression"
														},
														"SourceFile": {
															"value": "@{item().name}",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "ADLS_Data_Cleanup_02",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "WorkToStruct",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "ADLS Data Cleanup",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"env": {
															"value": "@activity('Read_Env_File').output.firstRow.azure_env",
															"type": "Expression"
														},
														"adls_storage_cntner": {
															"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_cntner)",
															"type": "Expression"
														},
														"wildcard_file_path_work": {
															"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'.dat')}",
															"type": "Expression"
														},
														"wildcard_file_path_raw": {
															"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'*')}",
															"type": "Expression"
														},
														"EmailTo": {
															"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
															"type": "Expression"
														},
														"SourceFile": {
															"value": "@{item().name}",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "ADLS_Data_Cleanup_03",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "StructToPrep",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "ADLS Data Cleanup",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"env": {
															"value": "@activity('Read_Env_File').output.firstRow.azure_env",
															"type": "Expression"
														},
														"adls_storage_cntner": {
															"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_cntner)",
															"type": "Expression"
														},
														"wildcard_file_path_work": {
															"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'.dat')}",
															"type": "Expression"
														},
														"wildcard_file_path_raw": {
															"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'*')}",
															"type": "Expression"
														},
														"EmailTo": {
															"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
															"type": "Expression"
														},
														"SourceFile": {
															"value": "@{item().name}",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "ADLS_Data_Cleanup_04",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "StructToMosaic",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "ADLS Data Cleanup",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"env": {
															"value": "@activity('Read_Env_File').output.firstRow.azure_env",
															"type": "Expression"
														},
														"adls_storage_cntner": {
															"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_cntner)",
															"type": "Expression"
														},
														"wildcard_file_path_work": {
															"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'.dat')}",
															"type": "Expression"
														},
														"wildcard_file_path_raw": {
															"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'*')}",
															"type": "Expression"
														},
														"EmailTo": {
															"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
															"type": "Expression"
														},
														"SourceFile": {
															"value": "@{item().name}",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "DeleteFromBlobWork_03",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "DeleteFromLanding",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "Blob_work",
														"type": "DatasetReference",
														"parameters": {}
													},
													"logStorageSettings": {
														"linkedServiceName": {
															"referenceName": "AzureBlobStorage_ls",
															"type": "LinkedServiceReference"
														},
														"path": "log"
													},
													"enableLogging": true,
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": false,
														"wildcardFileName": {
															"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'.dat')}",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "Email_Notify_Failure_BlobWork_03",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "DeleteFromBlobWork_03",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "EmailNotification",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"DataFactoryName": {
															"value": "@pipeline().DataFactory",
															"type": "Expression"
														},
														"PipelineName": {
															"value": "@pipeline().Pipeline",
															"type": "Expression"
														},
														"Message": {
															"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
															"type": "Expression"
														},
														"EmailTo": {
															"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
															"type": "Expression"
														},
														"SourceFile": {
															"value": "@{item().name}",
															"type": "Expression"
														},
														"Status": "Fail"
													}
												}
											},
											{
												"name": "Load_Batch_Audit",
												"type": "DatabricksNotebook",
												"dependsOn": [
													{
														"activity": "StructToMosaic",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"notebookPath": {
														"value": "@concat('/',activity('Read_Env_File').output.firstRow.adls_storage_cntner,'/',activity('Read_Env_File').output.firstRow.azure_env,'/audit/Load_Batch_Audit')",
														"type": "Expression"
													},
													"baseParameters": {
														"filename": {
															"value": "@{item().name}",
															"type": "Expression"
														},
														"env": {
															"value": "@activity('Read_Env_File').output.firstRow.azure_env",
															"type": "Expression"
														},
														"adb_par": {
															"value": "@string(activity('Read_Env_File').output.firstRow.adb_par)",
															"type": "Expression"
														},
														"feed_name": {
															"value": "@trim(pipeline().parameters.feed_name)",
															"type": "Expression"
														},
														"batchid": {
															"value": "@pipeline().RunId",
															"type": "Expression"
														},
														"batch_frequency": "\"Bi-Monthly\"",
														"batch_status": "\"Success\"",
														"pipeline_name": {
															"value": "@pipeline().Pipeline",
															"type": "Expression"
														},
														"trigger_time": {
															"value": "@pipeline().TriggerTime",
															"type": "Expression"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureDatabricks_ls",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "Email_Notify_Failure_Audit",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "Load_Batch_Audit",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "EmailNotification",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"DataFactoryName": {
															"value": "@pipeline().DataFactory",
															"type": "Expression"
														},
														"PipelineName": {
															"value": "@pipeline().Pipeline",
															"type": "Expression"
														},
														"Message": {
															"value": "@concat('The pipeline has encountered an error in sending ADB logs to EventHub. Please check the notebook logs for more details. Note: Adhoc cleanup is required before restarting the failed pipeline. ',activity('Load_Batch_Audit').output.runPageUrl)",
															"type": "Expression"
														},
														"EmailTo": {
															"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
															"type": "Expression"
														},
														"SourceFile": {
															"value": "@{item().name}",
															"type": "Expression"
														},
														"Status": "Fail"
													}
												}
											}
										]
									}
								},
								{
									"name": "Email_Notify_01",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "DeleteFromBlobWork_audit_fail",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "EmailNotification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"DataFactoryName": {
												"value": "@pipeline().DataFactory",
												"type": "Expression"
											},
											"PipelineName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"Message": {
												"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. \nOutput: ' ,activity('File_Audit').output.runPageUrl)",
												"type": "Expression"
											},
											"EmailTo": {
												"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
												"type": "Expression"
											},
											"SourceFile": {
												"value": "@{item().name}",
												"type": "Expression"
											},
											"Status": "Fail"
										}
									}
								},
								{
									"name": "Copy_From_Landing_To_Work",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.01:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": false,
												"wildcardFileName": {
													"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'.dat.gz')}",
													"type": "Expression"
												},
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "Blob_gzip",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "Blob_work",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Email_Notify_Cleanup_Blob_Work",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Copy_From_Landing_To_Work",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "EmailNotification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"DataFactoryName": {
												"value": "@pipeline().DataFactory",
												"type": "Expression"
											},
											"PipelineName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"Message": {
												"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
												"type": "Expression"
											},
											"EmailTo": {
												"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
												"type": "Expression"
											},
											"SourceFile": {
												"value": "@{item().name}",
												"type": "Expression"
											},
											"Status": "Fail"
										}
									}
								},
								{
									"name": "DeleteFromBlobWork_audit_fail",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "File_Audit",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "Blob_work",
											"type": "DatasetReference",
											"parameters": {}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "AzureBlobStorage_ls",
												"type": "LinkedServiceReference"
											},
											"path": "log"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": false,
											"wildcardFileName": {
												"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'.dat')}",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Email_Notify_09",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('Could not find or unable to read job params json file. Please check the logs for more details.')",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "DL_BA_Finance@aa.com",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@concat(pipeline().parameters.input_file_prefix,'.*')",
									"type": "Expression"
								},
								"Status": "Fail"
							}
						}
					},
					{
						"name": "List_Input_Files_From_Landing",
						"description": "This activity is used to get list files  from landing directory",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Read_Env_File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Blob",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Filter_Individual_File",
						"description": "This activity is used to Filter individual files  from file list to process single file for each trigger",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "List_Input_Files_From_Landing",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('List_Input_Files_From_Landing').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().name,trim(pipeline().parameters.Filename))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"feed_name": {
						"type": "string",
						"defaultValue": "YQYR"
					},
					"Filename": {
						"type": "string"
					},
					"input_file_prefix": {
						"type": "string"
					}
				},
				"variables": {
					"input_file_prefix": {
						"type": "String"
					},
					"sourceDataDt": {
						"type": "String"
					}
				},
				"folder": {
					"name": "TYR"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-18T16:21:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json')]",
				"[concat(variables('factoryId'), '/pipelines/EmailNotification')]",
				"[concat(variables('factoryId'), '/datasets/Blob')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDatabricks_ls')]",
				"[concat(variables('factoryId'), '/datasets/Blob_gzip')]",
				"[concat(variables('factoryId'), '/datasets/Blob_work')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_ls')]",
				"[concat(variables('factoryId'), '/datasets/ADLS_Reject')]",
				"[concat(variables('factoryId'), '/datasets/ADLS_raw')]",
				"[concat(variables('factoryId'), '/datasets/ADLS_gzip')]",
				"[concat(variables('factoryId'), '/datasets/ADLS_work')]",
				"[concat(variables('factoryId'), '/pipelines/ADLS Data Cleanup')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_dataMigration_HistorymigrateFiles_01')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will call the notebooks necessary to perform the data migration and copy files from transient ",
				"activities": [
					{
						"name": "ac_lookupAdfParamFile",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "ds_adf_param",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "db_migrateFiles",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ac_lookupAdfParamFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat('/',activity('ac_lookupAdfParamFile').output.firstRow.adls_storage_cntner,'/',activity('ac_lookupAdfParamFile').output.firstRow.azure_env,'/migration/migrateFiles')",
								"type": "Expression"
							},
							"baseParameters": {
								"adb_par": {
									"value": "@string(activity('ac_lookupAdfParamFile').output.firstRow.adb_par)",
									"type": "Expression"
								},
								"env": {
									"value": "@string(activity('ac_lookupAdfParamFile').output.firstRow.azure_env)",
									"type": "Expression"
								},
								"adbDebugInd": "N",
								"Migration_sources": {
									"value": "@pipeline().parameters.Migration_sources",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ac_sendFailHistoryCopy_Email",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ac_lookupAdfParamFile",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error during the ac_lookupAdfParamFile activity. Please check the logs for more details. \nError: ', replace(activity('ac_lookupAdfParamFile').Error.Message, '\"', ''))\n",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "DL_BA_Finance@aa.com",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.filename",
									"type": "Expression"
								},
								"Status": "FAIL"
							}
						}
					},
					{
						"name": "ac_sendPassEmail",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "db_migrateFiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('This pipeline has completed successfully : ',activity('db_migrateFiles').output.runPageUrl)",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('ac_lookupAdfParamFile').output.firstRow.succ_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.filename",
									"type": "Expression"
								},
								"Status": "Success"
							}
						}
					},
					{
						"name": "ac_sendFailHistoryCopy_Fail_Email",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "db_migrateFiles",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error during the db_migrateFiles notebook. Please check the logs for more details. \nError: runPageUrl: ', activity('db_migrateFiles').output.runPageUrl)",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('ac_lookupAdfParamFile').output.firstRow.fail_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.filename",
									"type": "Expression"
								},
								"Status": "FAIL"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"filename": {
						"type": "string",
						"defaultValue": "n/a"
					},
					"adbDebugInd": {
						"type": "string",
						"defaultValue": "N"
					},
					"Migration_sources": {
						"type": "string",
						"defaultValue": "Codesharein_sources"
					}
				},
				"variables": {
					"throwError": {
						"type": "String",
						"defaultValue": "unknown"
					},
					"arrayPosition": {
						"type": "String",
						"defaultValue": "unknown"
					},
					"feedName": {
						"type": "String",
						"defaultValue": "unknown"
					},
					"sourceDataDt": {
						"type": "String",
						"defaultValue": "unknown"
					}
				},
				"folder": {
					"name": "History_Migration"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-18T16:21:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adf_param')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDatabricks_ls')]",
				"[concat(variables('factoryId'), '/pipelines/EmailNotification')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_dataMigration_copyMigrationFileToLanding')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ac_copyMigrationFileToLanding",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_FileMigration",
								"type": "DatasetReference",
								"parameters": {
									"sourceFileName": {
										"value": "@pipeline().parameters.filename",
										"type": "Expression"
									},
									"folderName": {
										"value": "@pipeline().parameters.feed_name",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_FileLanding",
								"type": "DatasetReference",
								"parameters": {
									"sourceFileName": {
										"value": "@pipeline().parameters.filename",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"filename": {
						"type": "string"
					},
					"feed_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "History_Migration"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-18T16:21:11Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_FileMigration')]",
				"[concat(variables('factoryId'), '/datasets/ds_FileLanding')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_dataMigration_migration_landing_02')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will call the notebooks necessary to perform the data migration and copy files from migration to landing folder",
				"activities": [
					{
						"name": "ac_lookupAdfParamFile",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "ds_adf_param",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "db_copyMigrationFilesToLanding",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ac_lookupAdfParamFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat('/',activity('ac_lookupAdfParamFile').output.firstRow.adls_storage_cntner,'/',activity('ac_lookupAdfParamFile').output.firstRow.azure_env,'/migration/copyMigrationFilesToLanding')",
								"type": "Expression"
							},
							"baseParameters": {
								"adb_par": {
									"value": "@string(activity('ac_lookupAdfParamFile').output.firstRow.adb_par)",
									"type": "Expression"
								},
								"env": {
									"value": "@string(activity('ac_lookupAdfParamFile').output.firstRow.azure_env)",
									"type": "Expression"
								},
								"feed_name": {
									"value": "incr",
									"type": "Expression"
								},
								"adbDebugInd": "N",
								"Migration_sources": {
									"value": "@pipeline().parameters.Migration_sources",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ac_sendFailHistoryCopy_Email",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ac_lookupAdfParamFile",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error during the ac_lookupAdfParamFile activity. Please check the logs for more details. \nError: ', replace(activity('ac_lookupAdfParamFile').Error.Message, '\"', ''),\n' runPageUrl: ', activity('ac_lookupAdfParamFile').output.runPageUrl)",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "DL_BA_Finance@aa.com",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.filename",
									"type": "Expression"
								},
								"Status": "FAIL"
							}
						}
					},
					{
						"name": "ac_sendPassEmail",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "db_copyMigrationFilesToLanding",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('This pipeline has completed successfully.   db_copyMigrationFilesToLanding.runPageUrl: ', activity('db_copyMigrationFilesToLanding').output.runPageUrl)",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('ac_lookupAdfParamFile').output.firstRow.succ_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "@pipeline().parameters.feed_name",
									"type": "Expression"
								},
								"Status": "Success"
							}
						}
					},
					{
						"name": "ac_sendFailEmail_historyload",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "db_copyMigrationFilesToLanding",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"Message": {
									"value": "@concat('The pipeline has encountered an error during the db_copyMigrationFilesToLanding notebook. Please check the logs for more details. \nError: ', replace(activity('db_copyMigrationFilesToLanding').Error.Message, '\"', ''),\n' runPageUrl: ', activity('db_copyMigrationFilesToLanding').output.runPageUrl)",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@activity('ac_lookupAdfParamFile').output.firstRow.fail_email_to",
									"type": "Expression"
								},
								"SourceFile": {
									"value": "db_copyMigrationFilesToLanding",
									"type": "Expression"
								},
								"Status": "FAIL"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"feed_name": {
						"type": "string",
						"defaultValue": "incr"
					},
					"adbDebugInd": {
						"type": "string",
						"defaultValue": "N"
					},
					"filename": {
						"type": "string",
						"defaultValue": "n/a"
					},
					"Migration_sources": {
						"type": "string",
						"defaultValue": "RESPIN_sources"
					}
				},
				"variables": {
					"throwError": {
						"type": "String",
						"defaultValue": "unknown"
					},
					"arrayPosition": {
						"type": "String",
						"defaultValue": "unknown"
					},
					"feedName": {
						"type": "String",
						"defaultValue": "unknown"
					},
					"sourceDataDt": {
						"type": "String",
						"defaultValue": "unknown"
					}
				},
				"folder": {
					"name": "History_Migration"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-18T16:21:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adf_param')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDatabricks_ls')]",
				"[concat(variables('factoryId'), '/pipelines/EmailNotification')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADLS_Reject')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage_ls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"env": {
						"type": "string"
					},
					"adls_storage_cntner": {
						"type": "string"
					},
					"input_file_prefix": {
						"type": "string"
					},
					"sourceDataDt": {
						"type": "string"
					},
					"Filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat(dataset().env,'/reject','/',dataset().input_file_prefix,'/',dataset().sourceDataDt)",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().adls_storage_cntner",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADLS_generic')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage_ls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"complete_path": {
						"type": "string"
					},
					"adls_storage_cntner": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().complete_path",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().adls_storage_cntner",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADLS_gzip')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage_ls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"adls_storage_cntner": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": {
							"value": "@dataset().adls_storage_cntner",
							"type": "Expression"
						}
					},
					"compression": {
						"type": "gzip",
						"level": "Optimal"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADLS_raw')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage_ls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"env": {
						"type": "string"
					},
					"adls_storage_cntner": {
						"type": "string"
					},
					"input_file_prefix": {
						"type": "string"
					},
					"Filename": {
						"type": "string"
					},
					"sourceDataDt": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat(dataset().env,'/raw','/',dataset().input_file_prefix,'/',dataset().sourceDataDt)",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().adls_storage_cntner",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADLS_raw_pii')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage_ls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"env": {
						"type": "string"
					},
					"adls_storage_cntner_pii": {
						"type": "string"
					},
					"input_file_prefix": {
						"type": "string"
					},
					"Filename": {
						"type": "string"
					},
					"sourceDataDt": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat(dataset().env,'/raw-pii','/',dataset().input_file_prefix,'/',dataset().sourceDataDt)",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().adls_storage_cntner_pii",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADLS_raw_spii')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage_ls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"env": {
						"type": "string"
					},
					"adls_storage_cntner_spii": {
						"type": "string"
					},
					"input_file_prefix": {
						"type": "string"
					},
					"Filename": {
						"type": "string"
					},
					"sourceDataDt": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat(dataset().env,'/raw-spii','/',dataset().input_file_prefix,'/',dataset().sourceDataDt)",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().adls_storage_cntner_spii",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADLS_work')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage_ls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"env": {
						"type": "string"
					},
					"adls_storage_cntner": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat(dataset().env,'/work')",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().adls_storage_cntner",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADLS_work_pii')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage_ls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"env": {
						"type": "string"
					},
					"adls_storage_cntner_pii": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat(dataset().env,'/work-pii')",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().adls_storage_cntner_pii",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADLS_work_spii')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage_ls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"env": {
						"type": "string"
					},
					"adls_storage_cntner_spii": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat(dataset().env,'/work-spii')",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().adls_storage_cntner_spii",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BinaryDatasetForDeleteActivity')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Connect to your source store to delete files.",
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_ls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FolderPath": {
						"type": "string"
					},
					"Directory": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().Directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().FolderPath",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BinaryDatasetForDeleteActivity1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Connect to your source store to delete files.",
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_ls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FolderPath": {
						"type": "string"
					},
					"Directory": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Binary_ADLS_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "structzone"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Binary_Forch_Adls')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "structzone"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Binary_Getmetatdata')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Binary_adls_training_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "structzone"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Binary_blob_training_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "LNDG_TYCO_CUST_CONVIT.txt",
						"container": "rawzone"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Binary_copy_foreach')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "rawzone"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Binary_landing_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "LNDG_TYCO_PRODUCT_CONVT.txt",
						"container": "rawzone"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Blob')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "landing"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Blob_Binary_Generic')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_ls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ContainerName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": {
							"value": "@dataset().ContainerName",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Blob_encrypt')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "landing-encrypted"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Blob_encrypt_gzip')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "landing-encrypted"
					},
					"compression": {
						"type": "gzip",
						"level": "Optimal"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Blob_gzip')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "landing"
					},
					"compression": {
						"type": "gzip",
						"level": "Optimal"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Blob_work')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "work"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestinationDataset_opy')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "structzone"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Getmetadata_Dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "LNDG_TYCO_CUST_CONVIT.txt",
						"container": "rawzone"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "job_param.json",
						"container": "config"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_opy')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "rawzone"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Key",
						"type": "String"
					},
					{
						"name": "PolicyNumber",
						"type": "String"
					},
					{
						"name": "BirthDate",
						"type": "String"
					},
					{
						"name": "SSN",
						"type": "String"
					},
					{
						"name": "Email",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "Address1",
						"type": "String"
					},
					{
						"name": "Address2",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "State",
						"type": "String"
					},
					{
						"name": "Zip5",
						"type": "String"
					},
					{
						"name": "Zip4",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adfdeploy_adls_json')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "rawzone"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adfdeplyblob_json')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "azuredeploy.json",
						"container": "rawzone"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"$schema": {
							"type": "string"
						},
						"contentVersion": {
							"type": "string"
						},
						"parameters": {
							"type": "object",
							"properties": {
								"name": {
									"type": "object",
									"properties": {
										"type": {
											"type": "string"
										},
										"defaultValue": {
											"type": "string"
										}
									}
								},
								"apiVersion": {
									"type": "object",
									"properties": {
										"type": {
											"type": "string"
										},
										"defaultValue": {
											"type": "string"
										}
									}
								}
							}
						},
						"resources": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"apiVersion": {
										"type": "string"
									},
									"name": {
										"type": "string"
									},
									"location": {
										"type": "string"
									},
									"type": {
										"type": "string"
									},
									"identity": {
										"type": "object",
										"properties": {
											"type": {
												"type": "string"
											}
										}
									},
									"properties": {
										"type": "object"
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_FileLanding')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_ls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"sourceFileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().sourceFileName",
							"type": "Expression"
						},
						"container": "landing"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_FileMigration')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_ls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"sourceFileName": {
						"type": "string"
					},
					"folderName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().sourceFileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folderName",
							"type": "Expression"
						},
						"container": "migration"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_adf_param')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "job_param_Historymigration.json",
						"container": "config"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/jobparamlookup')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Jobparam.txt",
						"container": "transiant"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "env",
						"type": "String"
					},
					{
						"name": "blob_path",
						"type": "String"
					},
					{
						"name": "ADLS_PATH",
						"type": "String"
					},
					{
						"name": "Token_id",
						"type": "String"
					},
					{
						"name": "Param_path",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage_ls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "To connect it to Inbound/incoming blob.",
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage_ls_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage_ls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is to connect ADLS G2 storage account",
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage_ls_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage_ls_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDatabricks_V6_4')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This will use the run time 6.4 cluster",
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-7339348852698591.11.azuredatabricks.net",
					"accessToken": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault_ls",
							"type": "LinkedServiceReference"
						},
						"secretName": "ba-n-rvact-001-adbtoken-secret"
					},
					"existingClusterId": "0222-202204-flora568"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDatabricks_ls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-7339348852698591.11.azuredatabricks.net",
					"accessToken": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault_ls",
							"type": "LinkedServiceReference"
						},
						"secretName": "ba-n-rvact-001-adbtoken-secret"
					},
					"existingClusterId": "0406-221726-guess351"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVault_ls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Linked service for azure key vault",
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault_ls_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TransientStorage_ls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('TransientStorage_ls_properties_typeProperties_url')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/linkedService1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('linkedService1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/linkedService2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('linkedService2_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger_DataCopy')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "CopyPipeline_onetimecopy",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/rawblob/blobs/LNDG_",
					"blobPathEndsWith": ".txt",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('trigger_DataCopy_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CopyPipeline_onetimecopy')]"
			]
		}
	]
}