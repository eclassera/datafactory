{
	"name": "pl_Recpt_AX_Data_Ingestion_Incremental",
	"properties": {
		"description": "This pipeline will ingest Receipts TAX data till Mosaic",
		"activities": [
			{
				"name": "Read_Env_File",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "JsonSource",
						"storeSettings": {
							"type": "AzureBlobStorageReadSettings",
							"recursive": false,
							"enablePartitionDiscovery": false
						},
						"formatSettings": {
							"type": "JsonReadSettings"
						}
					},
					"dataset": {
						"referenceName": "Json",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "AX_Ld",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Filter_Individual_File",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [
					{
						"name": "Filename",
						"value": "String"
					}
				],
				"typeProperties": {
					"items": {
						"value": "@activity('Filter_Individual_File').output.Value",
						"type": "Expression"
					},
					"isSequential": true,
					"activities": [
						{
							"name": "File_Audit",
							"type": "DatabricksNotebook",
							"dependsOn": [
								{
									"activity": "Copy_From_Landing_To_Work",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebookPath": {
									"value": "@concat('/',activity('Read_Env_File').output.firstRow.adls_storage_cntner,'/',activity('Read_Env_File').output.firstRow.azure_env,'/audit/','File_Validations_new')",
									"type": "Expression"
								},
								"baseParameters": {
									"filename": {
										"value": "@{item().name}",
										"type": "Expression"
									},
									"sourcetm": {
										"value": "@{substring(item().name,add(indexof(item().name,'.'),-14),14)}",
										"type": "Expression"
									},
									"storageaccountname": {
										"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_act)",
										"type": "Expression"
									},
									"env": {
										"value": "@activity('Read_Env_File').output.firstRow.azure_env",
										"type": "Expression"
									},
									"adb_par": {
										"value": "@string(activity('Read_Env_File').output.firstRow.adb_par)",
										"type": "Expression"
									},
									"feed_name": {
										"value": "@pipeline().parameters.feed_name",
										"type": "Expression"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "AzureDatabricks_ls",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "IsValidFile",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "File_Audit",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@startswith(activity('File_Audit').output.runOutput,'Valid')",
									"type": "Expression"
								},
								"ifFalseActivities": [
									{
										"name": "Copy_data_to_Reject",
										"type": "Copy",
										"dependsOn": [],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"source": {
												"type": "BinarySource",
												"storeSettings": {
													"type": "AzureBlobStorageReadSettings",
													"recursive": false,
													"wildcardFileName": {
														"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'.*')}",
														"type": "Expression"
													}
												},
												"formatSettings": {
													"type": "BinaryReadSettings"
												}
											},
											"sink": {
												"type": "BinarySink",
												"storeSettings": {
													"type": "AzureBlobFSWriteSettings"
												}
											},
											"enableStaging": false,
											"skipErrorFile": {
												"fileMissing": true
											},
											"validateDataConsistency": false
										},
										"inputs": [
											{
												"referenceName": "Blob",
												"type": "DatasetReference"
											}
										],
										"outputs": [
											{
												"referenceName": "ADLS_Reject",
												"type": "DatasetReference",
												"parameters": {
													"env": {
														"value": "@activity('Read_Env_File').output.firstRow.azure_env",
														"type": "Expression"
													},
													"adls_storage_cntner": {
														"value": "@activity('Read_Env_File').output.firstRow.adls_storage_cntner",
														"type": "Expression"
													},
													"input_file_prefix": {
														"value": "@substring(pipeline().parameters.filename,0,lastindexof(pipeline().parameters.filename,'_'))",
														"type": "Expression"
													},
													"sourceDataDt": {
														"value": "@substring(pipeline().parameters.filename,add(lastindexof(pipeline().parameters.filename,'_'),1),8)",
														"type": "Expression"
													},
													"Filename": {
														"value": "@pipeline().parameters.Filename",
														"type": "Expression"
													}
												}
											}
										]
									},
									{
										"name": "Delete_Reject_Files_From_Landing",
										"type": "Delete",
										"dependsOn": [
											{
												"activity": "Copy_data_to_Reject",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"dataset": {
												"referenceName": "Blob",
												"type": "DatasetReference"
											},
											"logStorageSettings": {
												"linkedServiceName": {
													"referenceName": "AzureBlobStorage_ls",
													"type": "LinkedServiceReference"
												},
												"path": "log"
											},
											"enableLogging": true,
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": false,
												"wildcardFileName": {
													"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'*')}",
													"type": "Expression"
												}
											}
										}
									},
									{
										"name": "Email_Notify_02",
										"type": "ExecutePipeline",
										"dependsOn": [
											{
												"activity": "Copy_data_to_Reject",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"userProperties": [],
										"typeProperties": {
											"pipeline": {
												"referenceName": "EmailNotification",
												"type": "PipelineReference"
											},
											"waitOnCompletion": true,
											"parameters": {
												"DataFactoryName": {
													"value": "@pipeline().DataFactory",
													"type": "Expression"
												},
												"PipelineName": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"Message": {
													"value": "@if (startswith(activity('File_Audit').output.runOutput,'Mismatch'),concat('File Count does not match with trailer record count.',activity('File_Audit').output.runOutput,'. Input files are moved to the Reject folder and load process is skipped. Please check the logs for more details.'),if(startswith(activity('File_Audit').output.runOutput,'Already'),'File already exists in the RAW zone. Input files are moved to the Reject folder and load process is skipped. Please check the logs for more details.','File name contains invalid date timestamp. Input files are moved to the Reject folder and load process is skipped. Please check the logs for more details.'))",
													"type": "Expression"
												},
												"EmailTo": {
													"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
													"type": "Expression"
												},
												"SourceFile": {
													"value": "@{item().name}",
													"type": "Expression"
												},
												"Status": {
													"value": "@if (startswith(activity('File_Audit').output.runOutput,'Mismatch'),'File Count mismatches with Trailer Count',if(startswith(activity('File_Audit').output.runOutput,'Already'),'Duplicate file','File name contains Invalid date timestamp'))",
													"type": "Expression"
												}
											}
										}
									},
									{
										"name": "DeleteFromBlobWork_02",
										"type": "Delete",
										"dependsOn": [
											{
												"activity": "Delete_Reject_Files_From_Landing",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"dataset": {
												"referenceName": "Blob_work",
												"type": "DatasetReference"
											},
											"logStorageSettings": {
												"linkedServiceName": {
													"referenceName": "AzureBlobStorage_ls",
													"type": "LinkedServiceReference"
												},
												"path": "log"
											},
											"enableLogging": true,
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": false,
												"wildcardFileName": {
													"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'.dat')}",
													"type": "Expression"
												}
											}
										}
									}
								],
								"ifTrueActivities": [
									{
										"name": "WorkToStruct",
										"type": "DatabricksNotebook",
										"dependsOn": [
											{
												"activity": "Copy_From_Raw_To_Work",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"notebookPath": {
												"value": "@concat('/',activity('Read_Env_File').output.firstRow.adls_storage_cntner,'/',activity('Read_Env_File').output.firstRow.azure_env,'/struct/',pipeline().parameters.feed_name,'_Struct')",
												"type": "Expression"
											},
											"baseParameters": {
												"filename": {
													"value": "@{item().name}",
													"type": "Expression"
												},
												"env": {
													"value": "@activity('Read_Env_File').output.firstRow.azure_env",
													"type": "Expression"
												},
												"adb_par": {
													"value": "@string(activity('Read_Env_File').output.firstRow.adb_par)",
													"type": "Expression"
												},
												"feed_name": {
													"value": "@trim(pipeline().parameters.feed_name)",
													"type": "Expression"
												}
											}
										},
										"linkedServiceName": {
											"referenceName": "AzureDatabricks_ls",
											"type": "LinkedServiceReference"
										}
									},
									{
										"name": "Copy_From_Inbound_Raw",
										"type": "Copy",
										"dependsOn": [],
										"policy": {
											"timeout": "0.01:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"source": {
												"type": "BinarySource",
												"storeSettings": {
													"type": "AzureBlobStorageReadSettings",
													"maxConcurrentConnections": 1,
													"recursive": false,
													"wildcardFileName": {
														"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'.*')}",
														"type": "Expression"
													}
												},
												"formatSettings": {
													"type": "BinaryReadSettings"
												}
											},
											"sink": {
												"type": "BinarySink",
												"storeSettings": {
													"type": "AzureBlobFSWriteSettings"
												}
											},
											"enableStaging": false,
											"validateDataConsistency": false
										},
										"inputs": [
											{
												"referenceName": "Blob",
												"type": "DatasetReference"
											}
										],
										"outputs": [
											{
												"referenceName": "ADLS_raw",
												"type": "DatasetReference",
												"parameters": {
													"env": {
														"value": "@activity('Read_Env_File').output.firstRow.azure_env",
														"type": "Expression"
													},
													"adls_storage_cntner": {
														"value": "@activity('Read_Env_File').output.firstRow.adls_storage_cntner",
														"type": "Expression"
													},
													"input_file_prefix": {
														"value": "@substring(pipeline().parameters.filename,0,lastindexof(pipeline().parameters.filename,'_'))",
														"type": "Expression"
													},
													"Filename": {
														"value": "@pipeline().parameters.Filename",
														"type": "Expression"
													},
													"sourceDataDt": {
														"value": "@substring(pipeline().parameters.filename,add(lastindexof(pipeline().parameters.filename,'_'),1),8)",
														"type": "Expression"
													}
												}
											}
										]
									},
									{
										"name": "Copy_From_Raw_To_Work",
										"type": "Copy",
										"dependsOn": [
											{
												"activity": "Copy_From_Inbound_Raw",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "0.01:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"source": {
												"type": "BinarySource",
												"storeSettings": {
													"type": "AzureBlobFSReadSettings",
													"maxConcurrentConnections": 1,
													"recursive": false,
													"wildcardFolderPath": {
														"value": "@concat(activity('Read_Env_File').output.firstRow.azure_env,'/raw','/',substring(pipeline().parameters.filename,0,lastindexof(pipeline().parameters.filename,'_')),'/',substring(pipeline().parameters.filename,add(lastindexof(pipeline().parameters.filename,'_'),1),8))",
														"type": "Expression"
													},
													"wildcardFileName": {
														"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'.dat.gz')}",
														"type": "Expression"
													},
													"deleteFilesAfterCompletion": false
												},
												"formatSettings": {
													"type": "BinaryReadSettings"
												}
											},
											"sink": {
												"type": "BinarySink",
												"storeSettings": {
													"type": "AzureBlobFSWriteSettings"
												}
											},
											"enableStaging": false
										},
										"inputs": [
											{
												"referenceName": "ADLS_gzip",
												"type": "DatasetReference",
												"parameters": {
													"adls_storage_cntner": {
														"value": "@activity('Read_Env_File').output.firstRow.adls_storage_cntner",
														"type": "Expression"
													}
												}
											}
										],
										"outputs": [
											{
												"referenceName": "ADLS_work",
												"type": "DatasetReference",
												"parameters": {
													"env": {
														"value": "@activity('Read_Env_File').output.firstRow.azure_env",
														"type": "Expression"
													},
													"adls_storage_cntner": {
														"value": "@activity('Read_Env_File').output.firstRow.adls_storage_cntner",
														"type": "Expression"
													}
												}
											}
										]
									},
									{
										"name": "DeleteFromWork",
										"type": "Delete",
										"dependsOn": [
											{
												"activity": "Load_Batch_Audit",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"dataset": {
												"referenceName": "ADLS_work",
												"type": "DatasetReference",
												"parameters": {
													"env": {
														"value": "@activity('Read_Env_File').output.firstRow.azure_env",
														"type": "Expression"
													},
													"adls_storage_cntner": {
														"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_cntner)",
														"type": "Expression"
													}
												}
											},
											"logStorageSettings": {
												"linkedServiceName": {
													"referenceName": "AzureBlobStorage_ls",
													"type": "LinkedServiceReference"
												},
												"path": {
													"value": "log",
													"type": "Expression"
												}
											},
											"enableLogging": true,
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": false,
												"wildcardFileName": {
													"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'*')}",
													"type": "Expression"
												}
											}
										}
									},
									{
										"name": "DeleteFromLanding",
										"type": "Delete",
										"dependsOn": [
											{
												"activity": "DeleteFromWork",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"dataset": {
												"referenceName": "Blob",
												"type": "DatasetReference"
											},
											"logStorageSettings": {
												"linkedServiceName": {
													"referenceName": "AzureBlobStorage_ls",
													"type": "LinkedServiceReference"
												},
												"path": "log"
											},
											"enableLogging": true,
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": false,
												"wildcardFileName": {
													"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'*')}",
													"type": "Expression"
												}
											}
										}
									},
									{
										"name": "Email_Notify_Success",
										"type": "ExecutePipeline",
										"dependsOn": [
											{
												"activity": "DeleteFromBlobWork_03",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"userProperties": [],
										"typeProperties": {
											"pipeline": {
												"referenceName": "EmailNotification",
												"type": "PipelineReference"
											},
											"waitOnCompletion": true,
											"parameters": {
												"DataFactoryName": {
													"value": "@pipeline().DataFactory",
													"type": "Expression"
												},
												"PipelineName": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"Message": {
													"value": "@{concat('Data ingestion is successfully completed for the above file.  ', replace(activity('File_Audit').output.runOutput, 'Valid-',''))}\n",
													"type": "Expression"
												},
												"EmailTo": {
													"value": "@activity('Read_Env_File').output.firstRow.succ_email_to",
													"type": "Expression"
												},
												"SourceFile": {
													"value": "@{item().name}",
													"type": "Expression"
												},
												"Status": "Success"
											}
										}
									},
									{
										"name": "DeleteFromRaw_01",
										"type": "Delete",
										"dependsOn": [
											{
												"activity": "Copy_From_Inbound_Raw",
												"dependencyConditions": [
													"Failed"
												]
											}
										],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"dataset": {
												"referenceName": "ADLS_raw",
												"type": "DatasetReference",
												"parameters": {
													"env": {
														"value": "@activity('Read_Env_File').output.firstRow.azure_env",
														"type": "Expression"
													},
													"adls_storage_cntner": {
														"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_cntner)",
														"type": "Expression"
													},
													"input_file_prefix": {
														"value": "@substring(pipeline().parameters.filename,0,lastindexof(pipeline().parameters.filename,'_'))",
														"type": "Expression"
													},
													"Filename": {
														"value": "@pipeline().parameters.Filename",
														"type": "Expression"
													},
													"sourceDataDt": {
														"value": "@substring(pipeline().parameters.filename,add(lastindexof(pipeline().parameters.filename,'_'),1),8)",
														"type": "Expression"
													}
												}
											},
											"logStorageSettings": {
												"linkedServiceName": {
													"referenceName": "AzureBlobStorage_ls",
													"type": "LinkedServiceReference"
												},
												"path": {
													"value": "log",
													"type": "Expression"
												}
											},
											"enableLogging": true,
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": false,
												"wildcardFileName": {
													"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'*')}",
													"type": "Expression"
												}
											}
										}
									},
									{
										"name": "Email_Notify_Cleanup_Raw_01",
										"type": "ExecutePipeline",
										"dependsOn": [
											{
												"activity": "DeleteFromRaw_01",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"userProperties": [],
										"typeProperties": {
											"pipeline": {
												"referenceName": "EmailNotification",
												"type": "PipelineReference"
											},
											"waitOnCompletion": true,
											"parameters": {
												"DataFactoryName": {
													"value": "@pipeline().DataFactory",
													"type": "Expression"
												},
												"PipelineName": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"Message": {
													"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
													"type": "Expression"
												},
												"EmailTo": {
													"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
													"type": "Expression"
												},
												"SourceFile": {
													"value": "@{item().name}",
													"type": "Expression"
												},
												"Status": "Fail"
											}
										}
									},
									{
										"name": "Email_Notify_Cleanup_01",
										"type": "ExecutePipeline",
										"dependsOn": [
											{
												"activity": "ADLS_Data_Cleanup_01",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"userProperties": [],
										"typeProperties": {
											"pipeline": {
												"referenceName": "EmailNotification",
												"type": "PipelineReference"
											},
											"waitOnCompletion": true,
											"parameters": {
												"DataFactoryName": {
													"value": "@pipeline().DataFactory",
													"type": "Expression"
												},
												"PipelineName": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"Message": {
													"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
													"type": "Expression"
												},
												"EmailTo": {
													"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
													"type": "Expression"
												},
												"SourceFile": {
													"value": "@{item().name}",
													"type": "Expression"
												},
												"Status": "Fail"
											}
										}
									},
									{
										"name": "Email_Notify_Cleanup_02",
										"type": "ExecutePipeline",
										"dependsOn": [
											{
												"activity": "ADLS_Data_Cleanup_02",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"userProperties": [],
										"typeProperties": {
											"pipeline": {
												"referenceName": "EmailNotification",
												"type": "PipelineReference"
											},
											"waitOnCompletion": true,
											"parameters": {
												"DataFactoryName": {
													"value": "@pipeline().DataFactory",
													"type": "Expression"
												},
												"PipelineName": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"Message": {
													"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
													"type": "Expression"
												},
												"EmailTo": {
													"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
													"type": "Expression"
												},
												"SourceFile": {
													"value": "@{item().name}",
													"type": "Expression"
												},
												"Status": "Fail"
											}
										}
									},
									{
										"name": "Email_Notify_Failure_Raw_01",
										"type": "ExecutePipeline",
										"dependsOn": [
											{
												"activity": "DeleteFromRaw_01",
												"dependencyConditions": [
													"Failed"
												]
											}
										],
										"userProperties": [],
										"typeProperties": {
											"pipeline": {
												"referenceName": "EmailNotification",
												"type": "PipelineReference"
											},
											"waitOnCompletion": true,
											"parameters": {
												"DataFactoryName": {
													"value": "@pipeline().DataFactory",
													"type": "Expression"
												},
												"PipelineName": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"Message": {
													"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
													"type": "Expression"
												},
												"EmailTo": {
													"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
													"type": "Expression"
												},
												"SourceFile": {
													"value": "@{item().name}",
													"type": "Expression"
												},
												"Status": "Fail"
											}
										}
									},
									{
										"name": "Email_Notify_Failure_Landing",
										"type": "ExecutePipeline",
										"dependsOn": [
											{
												"activity": "DeleteFromLanding",
												"dependencyConditions": [
													"Failed"
												]
											}
										],
										"userProperties": [],
										"typeProperties": {
											"pipeline": {
												"referenceName": "EmailNotification",
												"type": "PipelineReference"
											},
											"waitOnCompletion": true,
											"parameters": {
												"DataFactoryName": {
													"value": "@pipeline().DataFactory",
													"type": "Expression"
												},
												"PipelineName": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"Message": {
													"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
													"type": "Expression"
												},
												"EmailTo": {
													"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
													"type": "Expression"
												},
												"SourceFile": {
													"value": "@{item().name}",
													"type": "Expression"
												},
												"Status": "Fail"
											}
										}
									},
									{
										"name": "Email_Notify_Failure_Work",
										"type": "ExecutePipeline",
										"dependsOn": [
											{
												"activity": "DeleteFromWork",
												"dependencyConditions": [
													"Failed"
												]
											}
										],
										"userProperties": [],
										"typeProperties": {
											"pipeline": {
												"referenceName": "EmailNotification",
												"type": "PipelineReference"
											},
											"waitOnCompletion": true,
											"parameters": {
												"DataFactoryName": {
													"value": "@pipeline().DataFactory",
													"type": "Expression"
												},
												"PipelineName": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"Message": {
													"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
													"type": "Expression"
												},
												"EmailTo": {
													"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
													"type": "Expression"
												},
												"SourceFile": {
													"value": "@{item().name}",
													"type": "Expression"
												},
												"Status": "Fail"
											}
										}
									},
									{
										"name": "StructToMosaic",
										"type": "DatabricksNotebook",
										"dependsOn": [
											{
												"activity": "WorkToStruct",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"notebookPath": {
												"value": "@concat('/',activity('Read_Env_File').output.firstRow.adls_storage_cntner,'/',activity('Read_Env_File').output.firstRow.azure_env,'/mosaic/RECEIPTS_TAX_Mosaic_Export')",
												"type": "Expression"
											},
											"baseParameters": {
												"filename": {
													"value": "@{item().name}",
													"type": "Expression"
												},
												"env": {
													"value": "@activity('Read_Env_File').output.firstRow.azure_env",
													"type": "Expression"
												},
												"adb_par": {
													"value": "@string(activity('Read_Env_File').output.firstRow.adb_par)",
													"type": "Expression"
												},
												"feed_name": {
													"value": "@trim(pipeline().parameters.feed_name)",
													"type": "Expression"
												}
											}
										},
										"linkedServiceName": {
											"referenceName": "AzureDatabricks_ls",
											"type": "LinkedServiceReference"
										}
									},
									{
										"name": "Email_Notify_Cleanup_04",
										"type": "ExecutePipeline",
										"dependsOn": [
											{
												"activity": "ADLS_Data_Cleanup_04",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"userProperties": [],
										"typeProperties": {
											"pipeline": {
												"referenceName": "EmailNotification",
												"type": "PipelineReference"
											},
											"waitOnCompletion": true,
											"parameters": {
												"DataFactoryName": {
													"value": "@pipeline().DataFactory",
													"type": "Expression"
												},
												"PipelineName": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"Message": {
													"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
													"type": "Expression"
												},
												"EmailTo": {
													"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
													"type": "Expression"
												},
												"SourceFile": {
													"value": "@{item().name}",
													"type": "Expression"
												},
												"Status": "Fail"
											}
										}
									},
									{
										"name": "ADLS_Data_Cleanup_01",
										"type": "ExecutePipeline",
										"dependsOn": [
											{
												"activity": "Copy_From_Raw_To_Work",
												"dependencyConditions": [
													"Failed"
												]
											}
										],
										"userProperties": [],
										"typeProperties": {
											"pipeline": {
												"referenceName": "ADLS Data Cleanup",
												"type": "PipelineReference"
											},
											"waitOnCompletion": true,
											"parameters": {
												"env": {
													"value": "@activity('Read_Env_File').output.firstRow.azure_env",
													"type": "Expression"
												},
												"adls_storage_cntner": {
													"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_cntner)",
													"type": "Expression"
												},
												"wildcard_file_path_work": {
													"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'.dat')}",
													"type": "Expression"
												},
												"wildcard_file_path_raw": {
													"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'*')}",
													"type": "Expression"
												},
												"EmailTo": {
													"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
													"type": "Expression"
												},
												"SourceFile": {
													"value": "@{item().name}",
													"type": "Expression"
												}
											}
										}
									},
									{
										"name": "ADLS_Data_Cleanup_02",
										"type": "ExecutePipeline",
										"dependsOn": [
											{
												"activity": "WorkToStruct",
												"dependencyConditions": [
													"Failed"
												]
											}
										],
										"userProperties": [],
										"typeProperties": {
											"pipeline": {
												"referenceName": "ADLS Data Cleanup",
												"type": "PipelineReference"
											},
											"waitOnCompletion": true,
											"parameters": {
												"env": {
													"value": "@activity('Read_Env_File').output.firstRow.azure_env",
													"type": "Expression"
												},
												"adls_storage_cntner": {
													"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_cntner)",
													"type": "Expression"
												},
												"wildcard_file_path_work": {
													"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'.dat')}",
													"type": "Expression"
												},
												"wildcard_file_path_raw": {
													"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'*')}",
													"type": "Expression"
												},
												"EmailTo": {
													"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
													"type": "Expression"
												},
												"SourceFile": {
													"value": "@{item().name}",
													"type": "Expression"
												}
											}
										}
									},
									{
										"name": "ADLS_Data_Cleanup_04",
										"type": "ExecutePipeline",
										"dependsOn": [
											{
												"activity": "StructToMosaic",
												"dependencyConditions": [
													"Failed"
												]
											}
										],
										"userProperties": [],
										"typeProperties": {
											"pipeline": {
												"referenceName": "ADLS Data Cleanup",
												"type": "PipelineReference"
											},
											"waitOnCompletion": true,
											"parameters": {
												"env": {
													"value": "@activity('Read_Env_File').output.firstRow.azure_env",
													"type": "Expression"
												},
												"adls_storage_cntner": {
													"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_cntner)",
													"type": "Expression"
												},
												"wildcard_file_path_work": {
													"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'.dat')}",
													"type": "Expression"
												},
												"wildcard_file_path_raw": {
													"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'*')}",
													"type": "Expression"
												},
												"EmailTo": {
													"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
													"type": "Expression"
												},
												"SourceFile": {
													"value": "@{item().name}",
													"type": "Expression"
												}
											}
										}
									},
									{
										"name": "DeleteFromBlobWork_03",
										"type": "Delete",
										"dependsOn": [
											{
												"activity": "DeleteFromLanding",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"dataset": {
												"referenceName": "Blob_work",
												"type": "DatasetReference"
											},
											"logStorageSettings": {
												"linkedServiceName": {
													"referenceName": "AzureBlobStorage_ls",
													"type": "LinkedServiceReference"
												},
												"path": "log"
											},
											"enableLogging": true,
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": false,
												"wildcardFileName": {
													"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'.dat')}",
													"type": "Expression"
												}
											}
										}
									},
									{
										"name": "Email_Notify_Failure_BlobWork_03",
										"type": "ExecutePipeline",
										"dependsOn": [
											{
												"activity": "DeleteFromBlobWork_03",
												"dependencyConditions": [
													"Failed"
												]
											}
										],
										"userProperties": [],
										"typeProperties": {
											"pipeline": {
												"referenceName": "EmailNotification",
												"type": "PipelineReference"
											},
											"waitOnCompletion": true,
											"parameters": {
												"DataFactoryName": {
													"value": "@pipeline().DataFactory",
													"type": "Expression"
												},
												"PipelineName": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"Message": {
													"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
													"type": "Expression"
												},
												"EmailTo": {
													"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
													"type": "Expression"
												},
												"SourceFile": {
													"value": "@{item().name}",
													"type": "Expression"
												},
												"Status": "Fail"
											}
										}
									},
									{
										"name": "Load_Batch_Audit",
										"type": "DatabricksNotebook",
										"dependsOn": [
											{
												"activity": "StructToMosaic",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"notebookPath": {
												"value": "@concat('/',activity('Read_Env_File').output.firstRow.adls_storage_cntner,'/',activity('Read_Env_File').output.firstRow.azure_env,'/audit/Load_Batch_Audit')",
												"type": "Expression"
											},
											"baseParameters": {
												"filename": {
													"value": "@{item().name}",
													"type": "Expression"
												},
												"env": {
													"value": "@activity('Read_Env_File').output.firstRow.azure_env",
													"type": "Expression"
												},
												"adb_par": {
													"value": "@string(activity('Read_Env_File').output.firstRow.adb_par)",
													"type": "Expression"
												},
												"feed_name": {
													"value": "@trim(pipeline().parameters.feed_name)",
													"type": "Expression"
												},
												"batchid": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"batch_frequency": "\"Daily\"",
												"batch_status": "\"Success\"",
												"pipeline_name": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"trigger_time": {
													"value": "@pipeline().TriggerTime",
													"type": "Expression"
												}
											}
										},
										"linkedServiceName": {
											"referenceName": "AzureDatabricks_ls",
											"type": "LinkedServiceReference"
										}
									},
									{
										"name": "Email_Notify_Failure_Audit",
										"type": "ExecutePipeline",
										"dependsOn": [
											{
												"activity": "Load_Batch_Audit",
												"dependencyConditions": [
													"Failed"
												]
											}
										],
										"userProperties": [],
										"typeProperties": {
											"pipeline": {
												"referenceName": "EmailNotification",
												"type": "PipelineReference"
											},
											"waitOnCompletion": true,
											"parameters": {
												"DataFactoryName": {
													"value": "@pipeline().DataFactory",
													"type": "Expression"
												},
												"PipelineName": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"Message": {
													"value": "@concat('The pipeline has encountered an error in sending ADB logs to EventHub. Please check the notebook logs for more details. Note: Adhoc cleanup is required before restarting the failed pipeline. ',activity('Load_Batch_Audit').output.runPageUrl)",
													"type": "Expression"
												},
												"EmailTo": {
													"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
													"type": "Expression"
												},
												"SourceFile": {
													"value": "@{item().name}",
													"type": "Expression"
												},
												"Status": "Fail"
											}
										}
									}
								]
							}
						},
						{
							"name": "Email_Notify_01",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "DeleteFromBlobWork_audit_fail",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "EmailNotification",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"DataFactoryName": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"PipelineName": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"Message": {
										"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. \nOutput: ' ,activity('File_Audit').output.runPageUrl)",
										"type": "Expression"
									},
									"EmailTo": {
										"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
										"type": "Expression"
									},
									"SourceFile": {
										"value": "@{item().name}",
										"type": "Expression"
									},
									"Status": "Fail"
								}
							}
						},
						{
							"name": "Copy_From_Landing_To_Work",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "0.01:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "BinarySource",
									"storeSettings": {
										"type": "AzureBlobStorageReadSettings",
										"recursive": false,
										"wildcardFileName": {
											"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'.dat.gz')}",
											"type": "Expression"
										},
										"deleteFilesAfterCompletion": false
									},
									"formatSettings": {
										"type": "BinaryReadSettings"
									}
								},
								"sink": {
									"type": "BinarySink",
									"storeSettings": {
										"type": "AzureBlobStorageWriteSettings"
									}
								},
								"enableStaging": false
							},
							"inputs": [
								{
									"referenceName": "Blob_gzip",
									"type": "DatasetReference"
								}
							],
							"outputs": [
								{
									"referenceName": "Blob_work",
									"type": "DatasetReference"
								}
							]
						},
						{
							"name": "Email_Notify_Cleanup_Blob_Work",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "Copy_From_Landing_To_Work",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "EmailNotification",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"DataFactoryName": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"PipelineName": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"Message": {
										"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
										"type": "Expression"
									},
									"EmailTo": {
										"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
										"type": "Expression"
									},
									"SourceFile": {
										"value": "@{item().name}",
										"type": "Expression"
									},
									"Status": "Fail"
								}
							}
						},
						{
							"name": "DeleteFromBlobWork_audit_fail",
							"type": "Delete",
							"dependsOn": [
								{
									"activity": "File_Audit",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"dataset": {
									"referenceName": "Blob_work",
									"type": "DatasetReference"
								},
								"logStorageSettings": {
									"linkedServiceName": {
										"referenceName": "AzureBlobStorage_ls",
										"type": "LinkedServiceReference"
									},
									"path": "log"
								},
								"enableLogging": true,
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"wildcardFileName": {
										"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'.dat')}",
										"type": "Expression"
									}
								}
							}
						}
					]
				}
			},
			{
				"name": "Email_Notify_09",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Read_Env_File",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "EmailNotification",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"DataFactoryName": {
							"value": "@pipeline().DataFactory",
							"type": "Expression"
						},
						"PipelineName": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"Message": {
							"value": "@concat('Could not find or unable to read job params json file. Please check the logs for more details.')",
							"type": "Expression"
						},
						"EmailTo": {
							"value": "DL_BA_Finance@aa.com",
							"type": "Expression"
						},
						"SourceFile": {
							"value": "@concat(pipeline().parameters.input_file_prefix,'.*')",
							"type": "Expression"
						},
						"Status": "Fail"
					}
				}
			},
			{
				"name": "List_Input_Files_From_Landing",
				"description": "This activity is used to get list files  from landing directory",
				"type": "GetMetadata",
				"dependsOn": [
					{
						"activity": "Read_Env_File",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataset": {
						"referenceName": "Blob",
						"type": "DatasetReference"
					},
					"fieldList": [
						"childItems"
					],
					"storeSettings": {
						"type": "AzureBlobStorageReadSettings",
						"recursive": true
					},
					"formatSettings": {
						"type": "BinaryReadSettings"
					}
				}
			},
			{
				"name": "Filter_Individual_File",
				"description": "This activity is used to Filter individual files  from file list to process single file for each trigger",
				"type": "Filter",
				"dependsOn": [
					{
						"activity": "List_Input_Files_From_Landing",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('List_Input_Files_From_Landing').output.childItems",
						"type": "Expression"
					},
					"condition": {
						"value": "@equals(item().name,trim(pipeline().parameters.Filename))",
						"type": "Expression"
					}
				}
			}
		],
		"parameters": {
			"feed_name": {
				"type": "string",
				"defaultValue": "RECEIPTS_FOP"
			},
			"Filename": {
				"type": "string",
				"defaultValue": "rac_tcn_receipt_fop"
			},
			"input_file_prefix": {
				"type": "string"
			}
		},
		"folder": {
			"name": "AZrceipts_Ingestion"
		},
		"annotations": [],
		"lastPublishTime": "2020-09-21T21:21:49Z"
	}
}