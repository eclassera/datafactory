{
	"name": "pl_DC_QUEST_data_ingestion",
	"properties": {
		"activities": [
			{
				"name": "Read_Env_File",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "JsonSource",
						"storeSettings": {
							"type": "AzureBlobStorageReadSettings",
							"recursive": false,
							"enablePartitionDiscovery": false
						},
						"formatSettings": {
							"type": "JsonReadSettings"
						}
					},
					"dataset": {
						"referenceName": "Json",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "List_Input_Files_From_Landing",
				"description": "This activity is used to get list files  from landing directory",
				"type": "GetMetadata",
				"dependsOn": [
					{
						"activity": "Read_Env_File",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataset": {
						"referenceName": "Blob_encrypt",
						"type": "DatasetReference"
					},
					"fieldList": [
						"childItems"
					],
					"storeSettings": {
						"type": "AzureBlobStorageReadSettings",
						"recursive": true,
						"enablePartitionDiscovery": false
					},
					"formatSettings": {
						"type": "BinaryReadSettings"
					}
				}
			},
			{
				"name": "Filter_QUESTS_File",
				"description": "This activity is used to Filter QUESTS files  from file list to process file for each trigger",
				"type": "Filter",
				"dependsOn": [
					{
						"activity": "List_Input_Files_From_Landing",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('List_Input_Files_From_Landing').output.childItems",
						"type": "Expression"
					},
					"condition": {
						"value": "@and(startswith(item().name,trim(pipeline().parameters.input_file_prefix)), endswith(item().name,'.dat.gz'))",
						"type": "Expression"
					}
				}
			},
			{
				"name": "QUESTS",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "If_FileExists",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Filter_QUESTS_File').output.Value",
						"type": "Expression"
					},
					"isSequential": true,
					"activities": [
						{
							"name": "File_Audit",
							"type": "DatabricksNotebook",
							"dependsOn": [
								{
									"activity": "For Each loop Break Check",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebookPath": {
									"value": "@concat('/',activity('Read_Env_File').output.firstRow.adls_storage_cntner,'/',activity('Read_Env_File').output.firstRow.azure_env,'/audit/','File_Validations')",
									"type": "Expression"
								},
								"baseParameters": {
									"filename": {
										"value": "@{item().name}",
										"type": "Expression"
									},
									"sourcetm": {
										"value": "@{substring(item().name,add(indexof(item().name,'.'),-14),14)}",
										"type": "Expression"
									},
									"storageaccountname": {
										"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_act)",
										"type": "Expression"
									},
									"env": {
										"value": "@activity('Read_Env_File').output.firstRow.azure_env",
										"type": "Expression"
									},
									"adb_par": {
										"value": "@string(activity('Read_Env_File').output.firstRow.adb_par)",
										"type": "Expression"
									},
									"feed_name": {
										"value": "@pipeline().parameters.feed_name",
										"type": "Expression"
									},
									"reload_ind": {
										"value": "@pipeline().parameters.reload_ind",
										"type": "Expression"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "AzureDatabricks_ls",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "IsValidFile",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "File_Audit",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@startswith(activity('File_Audit').output.runOutput,'Valid')",
									"type": "Expression"
								},
								"ifFalseActivities": [
									{
										"name": "Copy_data_to_Reject",
										"type": "Copy",
										"dependsOn": [],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"source": {
												"type": "BinarySource",
												"storeSettings": {
													"type": "AzureBlobStorageReadSettings",
													"recursive": false,
													"wildcardFileName": {
														"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'.*')}",
														"type": "Expression"
													},
													"deleteFilesAfterCompletion": false
												},
												"formatSettings": {
													"type": "BinaryReadSettings"
												}
											},
											"sink": {
												"type": "BinarySink",
												"storeSettings": {
													"type": "AzureBlobFSWriteSettings"
												}
											},
											"enableStaging": false
										},
										"inputs": [
											{
												"referenceName": "Blob_encrypt",
												"type": "DatasetReference"
											}
										],
										"outputs": [
											{
												"referenceName": "ADLS_Reject",
												"type": "DatasetReference",
												"parameters": {
													"env": {
														"value": "@activity('Read_Env_File').output.firstRow.azure_env",
														"type": "Expression"
													},
													"adls_storage_cntner": {
														"value": "@activity('Read_Env_File').output.firstRow.adls_storage_cntner",
														"type": "Expression"
													},
													"input_file_prefix": {
														"value": "@substring(item().name,0,lastindexof(item().name,'_'))",
														"type": "Expression"
													},
													"sourceDataDt": {
														"value": "@substring(item().name,add(lastindexof(item().name,'_'),1),8)",
														"type": "Expression"
													},
													"Filename": {
														"value": "@item().name",
														"type": "Expression"
													}
												}
											}
										]
									},
									{
										"name": "Delete_Reject_Files_From_Landing",
										"type": "Delete",
										"dependsOn": [
											{
												"activity": "Copy_data_to_Reject",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"dataset": {
												"referenceName": "Blob_encrypt",
												"type": "DatasetReference"
											},
											"logStorageSettings": {
												"linkedServiceName": {
													"referenceName": "AzureBlobStorage_ls",
													"type": "LinkedServiceReference"
												},
												"path": "log"
											},
											"enableLogging": true,
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": false,
												"wildcardFileName": {
													"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'*')}",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											}
										}
									},
									{
										"name": "Email_Notify_02",
										"type": "ExecutePipeline",
										"dependsOn": [
											{
												"activity": "Set variable_ Reject Loop Breaker",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"userProperties": [],
										"typeProperties": {
											"pipeline": {
												"referenceName": "EmailNotification",
												"type": "PipelineReference"
											},
											"waitOnCompletion": true,
											"parameters": {
												"DataFactoryName": {
													"value": "@pipeline().DataFactory",
													"type": "Expression"
												},
												"PipelineName": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"Message": {
													"value": "@if (startswith(activity('File_Audit').output.runOutput,'Mismatch'),concat('File Count does not match with trailer record count.',activity('File_Audit').output.runOutput,'. Input files are moved to the Reject folder and load process is skipped. Please check the logs for more details.'),if(startswith(activity('File_Audit').output.runOutput,'Already'),'File already exists in the RAW zone. Input files are moved to the Reject folder and load process is skipped. Please check the logs for more details.','File name contains invalid date timestamp. Input files are moved to the Reject folder and load process is skipped. Please check the logs for more details.'))",
													"type": "Expression"
												},
												"EmailTo": {
													"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
													"type": "Expression"
												},
												"SourceFile": {
													"value": "@{item().name}",
													"type": "Expression"
												},
												"Status": {
													"value": "@if (startswith(activity('File_Audit').output.runOutput,'Mismatch'),'File Count mismatches with Trailer Count',if(startswith(activity('File_Audit').output.runOutput,'Already'),'Duplicate file','File name contains Invalid date timestamp'))",
													"type": "Expression"
												}
											}
										}
									},
									{
										"name": "DeleteFromBlobWork_02",
										"type": "Delete",
										"dependsOn": [
											{
												"activity": "Delete_Reject_Files_From_Landing",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"dataset": {
												"referenceName": "Blob_work",
												"type": "DatasetReference"
											},
											"logStorageSettings": {
												"linkedServiceName": {
													"referenceName": "AzureBlobStorage_ls",
													"type": "LinkedServiceReference"
												},
												"path": "log"
											},
											"enableLogging": true,
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": false,
												"wildcardFileName": {
													"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'.dat')}",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											}
										}
									},
									{
										"name": "Set variable_ Reject Loop Breaker",
										"type": "SetVariable",
										"dependsOn": [
											{
												"activity": "Copy_data_to_Reject",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"userProperties": [],
										"typeProperties": {
											"variableName": "PipelineRunBreakId",
											"value": {
												"value": "0",
												"type": "Expression"
											}
										}
									}
								],
								"ifTrueActivities": [
									{
										"name": "Copy_From_Inbound_Raw",
										"type": "Copy",
										"dependsOn": [],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"source": {
												"type": "BinarySource",
												"storeSettings": {
													"type": "AzureBlobStorageReadSettings",
													"maxConcurrentConnections": 1,
													"recursive": false,
													"wildcardFileName": {
														"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'.*')}",
														"type": "Expression"
													},
													"deleteFilesAfterCompletion": false
												},
												"formatSettings": {
													"type": "BinaryReadSettings"
												}
											},
											"sink": {
												"type": "BinarySink",
												"storeSettings": {
													"type": "AzureBlobFSWriteSettings"
												}
											},
											"enableStaging": false
										},
										"inputs": [
											{
												"referenceName": "Blob_encrypt",
												"type": "DatasetReference"
											}
										],
										"outputs": [
											{
												"referenceName": "ADLS_raw_pii",
												"type": "DatasetReference",
												"parameters": {
													"env": {
														"value": "@activity('Read_Env_File').output.firstRow.azure_env",
														"type": "Expression"
													},
													"adls_storage_cntner_pii": {
														"value": "@activity('Read_Env_File').output.firstRow.adls_storage_cntner_pii",
														"type": "Expression"
													},
													"input_file_prefix": {
														"value": "@substring(item().name,0,lastindexof(item().name,'_'))",
														"type": "Expression"
													},
													"Filename": {
														"value": "@item().name",
														"type": "Expression"
													},
													"sourceDataDt": {
														"value": "@substring(item().name,add(lastindexof(item().name,'_'),1),8)",
														"type": "Expression"
													}
												}
											}
										]
									},
									{
										"name": "DeleteFromRaw_01",
										"type": "Delete",
										"dependsOn": [
											{
												"activity": "Set variable_ Raw Loop Breaker",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"dataset": {
												"referenceName": "ADLS_raw",
												"type": "DatasetReference",
												"parameters": {
													"env": {
														"value": "@activity('Read_Env_File').output.firstRow.azure_env",
														"type": "Expression"
													},
													"adls_storage_cntner": {
														"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_cntner_pii)",
														"type": "Expression"
													},
													"input_file_prefix": {
														"value": "@variables('input_file_prefix')",
														"type": "Expression"
													},
													"Filename": {
														"value": "@item().name",
														"type": "Expression"
													},
													"sourceDataDt": {
														"value": "@variables('sourceDataDt')",
														"type": "Expression"
													}
												}
											},
											"logStorageSettings": {
												"linkedServiceName": {
													"referenceName": "AzureBlobStorage_ls",
													"type": "LinkedServiceReference"
												},
												"path": "log"
											},
											"enableLogging": true,
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": false,
												"wildcardFileName": {
													"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'*')}",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											}
										}
									},
									{
										"name": "Email_Notify_Success",
										"type": "ExecutePipeline",
										"dependsOn": [
											{
												"activity": "DeleteFromADLSWork",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"userProperties": [],
										"typeProperties": {
											"pipeline": {
												"referenceName": "EmailNotification",
												"type": "PipelineReference"
											},
											"waitOnCompletion": true,
											"parameters": {
												"DataFactoryName": {
													"value": "@pipeline().DataFactory",
													"type": "Expression"
												},
												"PipelineName": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"Message": {
													"value": "@{concat('Data ingestion is successfully completed for the above file.  ', replace(activity('File_Audit').output.runOutput, 'Valid-',''))}\n",
													"type": "Expression"
												},
												"EmailTo": {
													"value": "@activity('Read_Env_File').output.firstRow.succ_email_to",
													"type": "Expression"
												},
												"SourceFile": {
													"value": "@{item().name}",
													"type": "Expression"
												},
												"Status": "Success"
											}
										}
									},
									{
										"name": "WorkToStruct",
										"type": "DatabricksNotebook",
										"dependsOn": [
											{
												"activity": "Copy_From_Inbound_Raw",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"notebookPath": {
												"value": "@concat('/',activity('Read_Env_File').output.firstRow.adls_storage_cntner,'/',activity('Read_Env_File').output.firstRow.azure_env,'/struct/',pipeline().parameters.feed_name,'_Struct')",
												"type": "Expression"
											},
											"baseParameters": {
												"filename": {
													"value": "@{item().name}",
													"type": "Expression"
												},
												"env": {
													"value": "@activity('Read_Env_File').output.firstRow.azure_env",
													"type": "Expression"
												},
												"adb_par": {
													"value": "@string(activity('Read_Env_File').output.firstRow.adb_par)",
													"type": "Expression"
												},
												"feed_name": {
													"value": "@trim(pipeline().parameters.feed_name)",
													"type": "Expression"
												},
												"source_data_tms": {
													"value": "@substring(item().name,add(lastindexof(item().name,'_'),1),14)",
													"type": "Expression"
												}
											}
										},
										"linkedServiceName": {
											"referenceName": "AzureDatabricks_ls",
											"type": "LinkedServiceReference"
										}
									},
									{
										"name": "ADLS_Data_Cleanup_02",
										"type": "ExecutePipeline",
										"dependsOn": [
											{
												"activity": "Set variable_ Struct Loop Breaker",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"userProperties": [],
										"typeProperties": {
											"pipeline": {
												"referenceName": "ADLS Data Cleanup",
												"type": "PipelineReference"
											},
											"waitOnCompletion": true,
											"parameters": {
												"env": {
													"value": "@activity('Read_Env_File').output.firstRow.azure_env",
													"type": "Expression"
												},
												"adls_storage_cntner": {
													"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_cntner_pii)",
													"type": "Expression"
												},
												"wildcard_file_path_work": {
													"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'.dat')}",
													"type": "Expression"
												},
												"wildcard_file_path_raw": {
													"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'*')}",
													"type": "Expression"
												},
												"EmailTo": {
													"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
													"type": "Expression"
												},
												"SourceFile": {
													"value": "@{item().name}",
													"type": "Expression"
												}
											}
										}
									},
									{
										"name": "StructToPrep",
										"type": "DatabricksNotebook",
										"dependsOn": [
											{
												"activity": "WorkToStruct",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"notebookPath": {
												"value": "@concat('/',activity('Read_Env_File').output.firstRow.adls_storage_cntner,'/',activity('Read_Env_File').output.firstRow.azure_env,'/prep/',pipeline().parameters.feed_name,'_Prep')",
												"type": "Expression"
											},
											"baseParameters": {
												"filename": {
													"value": "@{item().name}",
													"type": "Expression"
												},
												"env": {
													"value": "@activity('Read_Env_File').output.firstRow.azure_env",
													"type": "Expression"
												},
												"adb_par": {
													"value": "@string(activity('Read_Env_File').output.firstRow.adb_par)",
													"type": "Expression"
												},
												"feed_name": {
													"value": "@trim(pipeline().parameters.feed_name)",
													"type": "Expression"
												}
											}
										},
										"linkedServiceName": {
											"referenceName": "AzureDatabricks_ls",
											"type": "LinkedServiceReference"
										}
									},
									{
										"name": "Load_Batch_Audit",
										"type": "DatabricksNotebook",
										"dependsOn": [
											{
												"activity": "StructToPrep",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"notebookPath": {
												"value": "@concat('/',activity('Read_Env_File').output.firstRow.adls_storage_cntner,'/',activity('Read_Env_File').output.firstRow.azure_env,'/audit/Load_Batch_Audit')",
												"type": "Expression"
											},
											"baseParameters": {
												"filename": {
													"value": "@{item().name}",
													"type": "Expression"
												},
												"env": {
													"value": "@activity('Read_Env_File').output.firstRow.azure_env",
													"type": "Expression"
												},
												"adb_par": {
													"value": "@string(activity('Read_Env_File').output.firstRow.adb_par)",
													"type": "Expression"
												},
												"feed_name": {
													"value": "@trim(pipeline().parameters.feed_name)",
													"type": "Expression"
												},
												"batchid": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"batch_frequency": "\"Bi-Monthly\"",
												"batch_status": "\"Success\"",
												"pipeline_name": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"trigger_time": {
													"value": "@pipeline().TriggerTime",
													"type": "Expression"
												},
												"storageaccountname": {
													"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_act)",
													"type": "Expression"
												}
											}
										},
										"linkedServiceName": {
											"referenceName": "AzureDatabricks_ls",
											"type": "LinkedServiceReference"
										}
									},
									{
										"name": "DeleteFromADLSWork",
										"type": "Delete",
										"dependsOn": [
											{
												"activity": "DeleteFromLanding_Encrypted",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"dataset": {
												"referenceName": "ADLS_work_pii",
												"type": "DatasetReference",
												"parameters": {
													"env": {
														"value": "@activity('Read_Env_File').output.firstRow.azure_env",
														"type": "Expression"
													},
													"adls_storage_cntner_pii": {
														"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_cntner_pii)",
														"type": "Expression"
													}
												}
											},
											"logStorageSettings": {
												"linkedServiceName": {
													"referenceName": "AzureBlobStorage_ls",
													"type": "LinkedServiceReference"
												},
												"path": "log"
											},
											"enableLogging": true,
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"wildcardFileName": {
													"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'.dat')}",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											}
										}
									},
									{
										"name": "ADLS_Data_Cleanup_3",
										"type": "ExecutePipeline",
										"dependsOn": [
											{
												"activity": "Set variable_Prep Loop Breaker",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"userProperties": [],
										"typeProperties": {
											"pipeline": {
												"referenceName": "ADLS Data Cleanup",
												"type": "PipelineReference"
											},
											"waitOnCompletion": true,
											"parameters": {
												"env": {
													"value": "@activity('Read_Env_File').output.firstRow.azure_env",
													"type": "Expression"
												},
												"adls_storage_cntner": {
													"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_cntner_pii)",
													"type": "Expression"
												},
												"wildcard_file_path_work": {
													"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'.dat')}",
													"type": "Expression"
												},
												"wildcard_file_path_raw": {
													"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'*')}",
													"type": "Expression"
												},
												"EmailTo": {
													"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
													"type": "Expression"
												},
												"SourceFile": {
													"value": "@{item().name}",
													"type": "Expression"
												}
											}
										}
									},
									{
										"name": "Email_Notify_Failure_Audit",
										"type": "ExecutePipeline",
										"dependsOn": [
											{
												"activity": "Set variable_Load Batch Loop Breaker",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"userProperties": [],
										"typeProperties": {
											"pipeline": {
												"referenceName": "EmailNotification",
												"type": "PipelineReference"
											},
											"waitOnCompletion": true,
											"parameters": {
												"DataFactoryName": {
													"value": "@pipeline().DataFactory",
													"type": "Expression"
												},
												"PipelineName": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"Message": {
													"value": "@concat('The pipeline has encountered an error in sending ADB logs to EventHub. Please check the notebook logs for more details. Note: Adhoc cleanup is required before restarting the failed pipeline. ',activity('Load_Batch_Audit').output.runPageUrl)",
													"type": "Expression"
												},
												"EmailTo": {
													"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
													"type": "Expression"
												},
												"SourceFile": {
													"value": "@{item().name}",
													"type": "Expression"
												},
												"Status": "Fail"
											}
										}
									},
									{
										"name": "DeleteFromLanding_Encrypted",
										"type": "Delete",
										"dependsOn": [
											{
												"activity": "Load_Batch_Audit",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"dataset": {
												"referenceName": "Blob_encrypt",
												"type": "DatasetReference"
											},
											"logStorageSettings": {
												"linkedServiceName": {
													"referenceName": "AzureBlobStorage_ls",
													"type": "LinkedServiceReference"
												},
												"path": "log"
											},
											"enableLogging": true,
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFileName": {
													"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'*')}",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											}
										}
									},
									{
										"name": "Email_Notify_Failure_Landing",
										"type": "ExecutePipeline",
										"dependsOn": [
											{
												"activity": "Set variable_Load Batch Loop Breaker",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"userProperties": [],
										"typeProperties": {
											"pipeline": {
												"referenceName": "EmailNotification",
												"type": "PipelineReference"
											},
											"waitOnCompletion": true,
											"parameters": {
												"DataFactoryName": {
													"value": "@pipeline().DataFactory",
													"type": "Expression"
												},
												"PipelineName": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"Message": {
													"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
													"type": "Expression"
												},
												"EmailTo": {
													"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
													"type": "Expression"
												},
												"SourceFile": {
													"value": "@{item().name}",
													"type": "Expression"
												},
												"Status": "Fail"
											}
										}
									},
									{
										"name": "Email_Notify_Failure_BlobWork_03",
										"type": "ExecutePipeline",
										"dependsOn": [
											{
												"activity": "Set variable_Load Batch Loop Breaker",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"userProperties": [],
										"typeProperties": {
											"pipeline": {
												"referenceName": "EmailNotification",
												"type": "PipelineReference"
											},
											"waitOnCompletion": true,
											"parameters": {
												"DataFactoryName": {
													"value": "@pipeline().DataFactory",
													"type": "Expression"
												},
												"PipelineName": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"Message": {
													"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
													"type": "Expression"
												},
												"EmailTo": {
													"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
													"type": "Expression"
												},
												"SourceFile": {
													"value": "@{item().name}",
													"type": "Expression"
												},
												"Status": "Fail"
											}
										}
									},
									{
										"name": "Email_Notify_Cleanup_02",
										"type": "ExecutePipeline",
										"dependsOn": [
											{
												"activity": "ADLS_Data_Cleanup_02",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"userProperties": [],
										"typeProperties": {
											"pipeline": {
												"referenceName": "EmailNotification",
												"type": "PipelineReference"
											},
											"waitOnCompletion": true,
											"parameters": {
												"DataFactoryName": {
													"value": "@pipeline().DataFactory",
													"type": "Expression"
												},
												"PipelineName": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"Message": {
													"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
													"type": "Expression"
												},
												"EmailTo": {
													"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
													"type": "Expression"
												},
												"SourceFile": {
													"value": "@{item().name}",
													"type": "Expression"
												},
												"Status": {
													"value": "Fail",
													"type": "Expression"
												}
											}
										}
									},
									{
										"name": "Email_Notify_Cleanup_03",
										"type": "ExecutePipeline",
										"dependsOn": [
											{
												"activity": "ADLS_Data_Cleanup_3",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"userProperties": [],
										"typeProperties": {
											"pipeline": {
												"referenceName": "EmailNotification",
												"type": "PipelineReference"
											},
											"waitOnCompletion": true,
											"parameters": {
												"DataFactoryName": {
													"value": "@pipeline().DataFactory",
													"type": "Expression"
												},
												"PipelineName": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"Message": {
													"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
													"type": "Expression"
												},
												"EmailTo": {
													"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
													"type": "Expression"
												},
												"SourceFile": {
													"value": "@{item().name}",
													"type": "Expression"
												},
												"Status": "Fail"
											}
										}
									},
									{
										"name": "Email_Notify_Cleanup_Raw_01",
										"type": "ExecutePipeline",
										"dependsOn": [
											{
												"activity": "DeleteFromRaw_01",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"userProperties": [],
										"typeProperties": {
											"pipeline": {
												"referenceName": "EmailNotification",
												"type": "PipelineReference"
											},
											"waitOnCompletion": true,
											"parameters": {
												"DataFactoryName": {
													"value": "@pipeline().DataFactory",
													"type": "Expression"
												},
												"PipelineName": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"Message": {
													"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
													"type": "Expression"
												},
												"EmailTo": {
													"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
													"type": "Expression"
												},
												"SourceFile": {
													"value": "@{item().name}",
													"type": "Expression"
												},
												"Status": "Fail"
											}
										}
									},
									{
										"name": "Email_Notify_Failure_Raw_01",
										"type": "ExecutePipeline",
										"dependsOn": [
											{
												"activity": "DeleteFromRaw_01",
												"dependencyConditions": [
													"Failed"
												]
											}
										],
										"userProperties": [],
										"typeProperties": {
											"pipeline": {
												"referenceName": "EmailNotification",
												"type": "PipelineReference"
											},
											"waitOnCompletion": true,
											"parameters": {
												"DataFactoryName": {
													"value": "@pipeline().DataFactory",
													"type": "Expression"
												},
												"PipelineName": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"Message": {
													"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. ')",
													"type": "Expression"
												},
												"EmailTo": {
													"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
													"type": "Expression"
												},
												"SourceFile": {
													"value": "@{item().name}",
													"type": "Expression"
												},
												"Status": "Fail"
											}
										}
									},
									{
										"name": "Set variable_ Raw Loop Breaker",
										"type": "SetVariable",
										"dependsOn": [
											{
												"activity": "Copy_From_Inbound_Raw",
												"dependencyConditions": [
													"Failed"
												]
											}
										],
										"userProperties": [],
										"typeProperties": {
											"variableName": "PipelineRunBreakId",
											"value": {
												"value": "0",
												"type": "Expression"
											}
										}
									},
									{
										"name": "Set variable_ Struct Loop Breaker",
										"type": "SetVariable",
										"dependsOn": [
											{
												"activity": "WorkToStruct",
												"dependencyConditions": [
													"Failed"
												]
											}
										],
										"userProperties": [],
										"typeProperties": {
											"variableName": "PipelineRunBreakId",
											"value": {
												"value": "0",
												"type": "Expression"
											}
										}
									},
									{
										"name": "Set variable_Prep Loop Breaker",
										"type": "SetVariable",
										"dependsOn": [
											{
												"activity": "StructToPrep",
												"dependencyConditions": [
													"Failed"
												]
											}
										],
										"userProperties": [],
										"typeProperties": {
											"variableName": "PipelineRunBreakId",
											"value": {
												"value": "0",
												"type": "Expression"
											}
										}
									},
									{
										"name": "Set variable_Load Batch Loop Breaker",
										"type": "SetVariable",
										"dependsOn": [
											{
												"activity": "Load_Batch_Audit",
												"dependencyConditions": [
													"Failed"
												]
											},
											{
												"activity": "DeleteFromLanding_Encrypted",
												"dependencyConditions": [
													"Failed"
												]
											},
											{
												"activity": "DeleteFromADLSWork",
												"dependencyConditions": [
													"Failed"
												]
											}
										],
										"userProperties": [],
										"typeProperties": {
											"variableName": "PipelineRunBreakId",
											"value": {
												"value": "0",
												"type": "Expression"
											}
										}
									}
								]
							}
						},
						{
							"name": "DeleteFromBlobWork_audit_fail",
							"type": "Delete",
							"dependsOn": [
								{
									"activity": "Set variable_ File Audit Loop Breaker",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"dataset": {
									"referenceName": "ADLS_work_pii",
									"type": "DatasetReference",
									"parameters": {
										"env": {
											"value": "@activity('Read_Env_File').output.firstRow.azure_env",
											"type": "Expression"
										},
										"adls_storage_cntner_pii": {
											"value": "@string(activity('Read_Env_File').output.firstRow.adls_storage_cntner_pii)",
											"type": "Expression"
										}
									}
								},
								"logStorageSettings": {
									"linkedServiceName": {
										"referenceName": "AzureBlobStorage_ls",
										"type": "LinkedServiceReference"
									},
									"path": "log"
								},
								"enableLogging": true,
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"wildcardFileName": {
										"value": "@{concat(substring(item().name,0,add(indexof(item().name,'.'),-0)),'.dat')}",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								}
							}
						},
						{
							"name": "Email_Notify_01",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "DeleteFromBlobWork_audit_fail",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "EmailNotification",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"DataFactoryName": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"PipelineName": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"Message": {
										"value": "@concat('The pipeline has encountered an error. Please check the logs for more details. \nOutput: ' ,activity('File_Audit').output.runPageUrl)",
										"type": "Expression"
									},
									"EmailTo": {
										"value": "@activity('Read_Env_File').output.firstRow.fail_email_to",
										"type": "Expression"
									},
									"SourceFile": {
										"value": "@{item().name}",
										"type": "Expression"
									},
									"Status": "Fail"
								}
							}
						},
						{
							"name": "For Each loop Break Check",
							"type": "IfCondition",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@equals(variables('PipelineRunBreakId'),'0')",
									"type": "Expression"
								},
								"ifTrueActivities": [
									{
										"name": "Break Out",
										"type": "WebActivity",
										"dependsOn": [],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"url": {
												"value": "@concat('https://management.azure.com/subscriptions/ae0b13d9-e09c-4e54-b1e6-8e777d8fbe14/resourceGroups/ba-n-zeaus-rvact-rg/providers/Microsoft.DataFactory/factories/',pipeline().DataFactory,'/pipelineruns/',pipeline().RunId,'/Failed?api-version=2018-06-01')",
												"type": "Expression"
											},
											"method": "POST",
											"body": {
												"message": "Failing the Pipeline for For Each loop Breack"
											},
											"authentication": {
												"type": "MSI",
												"resource": {
													"value": "https://management.azure.com",
													"type": "Expression"
												}
											}
										}
									}
								]
							}
						},
						{
							"name": "Set variable_ File Audit Loop Breaker",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "File_Audit",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "PipelineRunBreakId",
								"value": {
									"value": "0",
									"type": "Expression"
								}
							}
						}
					]
				}
			},
			{
				"name": "Email_Notify_09",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Read_Env_File",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "EmailNotification",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"DataFactoryName": {
							"value": "@pipeline().DataFactory",
							"type": "Expression"
						},
						"PipelineName": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"Message": {
							"value": "@concat('Could not find or unable to read job params json file. Please check the logs for more details.')",
							"type": "Expression"
						},
						"EmailTo": {
							"value": "DL_BA_Finance@aa.com",
							"type": "Expression"
						},
						"SourceFile": {
							"value": "@concat(pipeline().parameters.input_file_prefix,'.*')",
							"type": "Expression"
						},
						"Status": "Fail"
					}
				}
			},
			{
				"name": "If_FileExists",
				"description": "This check if there is file in the landing zone. If not it send an email",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Filter_QUESTS_File",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@if(greaterOrEquals(activity('Filter_QUESTS_File').output.FilteredItemsCount,1),'true','false')",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "Email_Notify_08",
							"type": "ExecutePipeline",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "EmailNotification",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"DataFactoryName": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"PipelineName": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"Message": {
										"value": "@concat('No file is found in Landing-Decrypted. Please check the logs for more details.')",
										"type": "Expression"
									},
									"EmailTo": {
										"value": "DL_BA_Finance@aa.com",
										"type": "Expression"
									},
									"SourceFile": {
										"value": "@concat(pipeline().parameters.input_file_prefix,'.*')",
										"type": "Expression"
									},
									"Status": "File Missing"
								}
							}
						}
					]
				}
			}
		],
		"parameters": {
			"feed_name": {
				"type": "string",
				"defaultValue": "REQUESTS"
			},
			"input_file_prefix": {
				"type": "string",
				"defaultValue": "RAC_REQUESTS"
			},
			"reload_ind": {
				"type": "string",
				"defaultValue": "Y"
			}
		},
		"variables": {
			"input_file_prefix": {
				"type": "String"
			},
			"sourceDataDt": {
				"type": "String"
			},
			"PipelineRunBreakId": {
				"type": "String"
			}
		},
		"folder": {
			"name": "QUESTS"
		},
		"annotations": []
	}
}